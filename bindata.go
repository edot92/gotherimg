// Code generated by go-bindata.
// sources:
// views/index.html
// views/isimenu/mainkonten.html
// views/konten.html
// views/partials/allcss.html
// views/partials/alljs.html
// views/partials/alljssrc.html
// views/partials/footer.html
// views/partials/globalfc.html
// views/partials/globalfc2.html
// views/partials/sidebar.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe5\x34\x10\x7d\x4e\xa5\xfe\x87\x69\xaa\x22\x58\xea\xb8\xdd\xbe\xa0\x34\xa9\x58\x5d\x8a\x84\x04\x62\x25\x40\x82\x27\x34\xb1\xe7\x26\xd3\x3a\x76\xb0\x9d\xbb\xed\xae\xfa\xdf\x51\x3e\x7a\x93\xab\xde\xcd\xd3\x64\xe6\xf8\xcc\xf8\xf8\xd8\xc5\xd9\x4f\xbf\x6f\xfe\xfc\xe7\xe3\x3d\x34\xb1\x35\x77\xa7\x27\xa7\x27\xc5\x10\x81\x41\x5b\x97\x29\xd9\x74\xcc\x25\x45\x43\xa8\xef\x4e\x4f\x92\xa4\x38\x13\xa2\xee\x59\x13\x44\x6a\x3b\x83\x91\xa0\x89\xb1\xcb\xa5\x54\x86\xc9\x46\xa1\xa9\x75\x19\x5b\x89\xba\x65\x2b\xb5\x53\x41\x9e\x57\x18\x58\x05\x19\x58\x53\x85\x3e\x6b\x9c\xe7\xcf\xce\x46\x34\x42\xec\x49\x67\x16\x54\x94\x3d\xd0\x23\x66\xd5\xb3\x34\xae\x66\x9b\x0d\xf3\xbc\xe2\x5a\x8a\x38\xf6\x13\xf4\x5f\xcf\xbb\x32\xfd\x5b\xfc\xf5\x41\x6c\x5c\xdb\x61\xe4\xca\x50\x0a\xca\xd9\x48\x36\x96\xe9\x2f\xf7\x25\xe9\x9a\x2e\x55\xe3\x5d\x4b\xe5\x75\x0a\x72\xc5\xa1\x1a\xf4\x81\x62\x99\xf6\x71\x2b\x7e\xd8\xd7\x22\x47\x43\x77\xf0\xc7\x87\xdf\x3e\xfe\x7a\x5f\xc8\xe9\x77\x59\x65\xb1\xa5\x32\xfd\xf7\x29\xf8\x6d\x0a\xac\xf7\xe1\xbe\xe9\x61\x93\x09\xae\x29\x28\xcf\x5d\x64\x67\x57\xc8\xe8\x3a\x68\xc9\xf6\xf0\x0d\xb6\xdd\x2d\x58\xdc\x71\x8d\x13\xe6\x2d\xc5\x8e\xe9\x53\xe7\x7c\x5c\xad\xff\xc4\x3a\x36\xa5\xa6\x1d\x2b\x12\xe3\xcf\x25\xb0\xe5\xc8\x68\x44\x50\x68\xa8\xbc\xce\xae\x2e\xa1\xc5\x27\x6e\xfb\x76\x49\xed\xe9\x2f\xbe\x87\xb4\x43\x3f\x2c\x08\x12\x8d\x51\x21\x8c\x52\xa7\x70\x31\x02\xde\x22\x1e\x42\xf0\xea\x10\x93\x14\x21\x3e\xcf\x12\x25\x49\x92\x0d\x36\x21\x2f\x02\x47\x82\x2f\x73\x32\xa9\x50\x3d\xd6\xde\xf5\x56\xe7\xd0\x7b\xf3\x6d\x1a\x22\x46\x56\x72\x02\x67\x0f\x5d\x9d\x7e\x77\xfb\x0a\x96\xef\xe0\xe7\xde\x18\x68\x88\xeb\x26\xc2\x3b\xb9\x14\xa6\x54\x0e\xd7\x57\x57\x17\xb7\xeb\x02\x6c\xc8\x46\xf2\x80\x56\xc3\xb8\x51\x88\x0d\x01\xb7\x58\x13\x58\x56\x64\x9e\x0f\x78\x96\x79\x44\xe7\x02\x0f\xa2\xe7\xa0\x46\x8a\xd7\x31\x56\x10\x4f\x1d\x61\xcc\xc1\xba\x39\x3c\x82\x09\xfc\x99\x72\x50\x6e\x47\x7e\x19\xec\x65\xbc\x39\xc3\xa7\x79\x77\xbe\xe5\x27\xd2\xd3\x8e\x17\x65\x96\xf6\x63\x79\x25\x42\x74\x5d\x0e\x57\xdd\xd3\xc1\x3e\x0d\x6d\xe3\xdb\xec\x78\xf8\x47\x54\xf9\x8a\x5c\xca\x19\xe7\x73\x38\xdf\x6c\x36\xb7\xc7\x4e\xe8\xfc\xe6\xe6\x66\x35\x48\x87\x5a\xb3\xad\x73\x78\x7f\xd0\x77\xd9\x5c\x66\x71\x57\xa1\x3f\x76\xdc\x62\xee\xa5\xd1\x3f\x3a\x8f\xb6\x26\x38\xe3\x76\x30\x32\xda\xbd\x8c\x2f\xb3\x91\xe4\xda\x49\x87\xde\xab\x8d\xab\xd0\x6c\xd5\xfb\x95\xf9\xa6\x67\x49\xce\xef\xd2\x10\x57\x4e\x3f\x4f\x61\x52\x3c\x8e\xd7\xe4\xd5\xc7\x3f\xc2\xf4\x0f\x5f\x16\xdf\x9e\x09\xc1\x81\xe7\x82\xb9\x9e\x1f\x98\x01\x0d\x2f\x33\xaa\x90\x2b\x9a\xe3\x13\xad\x6f\x43\x21\xf7\x13\x14\x72\x7c\x4e\xff\x0f\x00\x00\xff\xff\x1d\x21\x12\xc7\x5e\x05\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1374, mode: os.FileMode(438), modTime: time.Unix(1494588166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIsimenuMainkontenHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\x5e\xa0\xff\xe1\xc0\x75\x90\x84\xc6\x52\x92\x76\xfb\x20\xdb\x19\x96\xae\x4b\x37\x14\xcb\x90\x76\x40\x82\xa1\x08\x68\xe9\x2c\xb1\x95\x44\x8d\x3c\xd9\x52\x86\xfc\xf7\x81\x7a\xb7\xec\x24\x6b\xf3\x21\x26\xef\x9e\xbb\x7b\xee\x45\xbc\x85\x0e\x94\xc8\xe9\xec\xf9\x33\x00\x80\x75\x91\x05\x24\x64\x06\xb9\x14\x19\xdd\x0a\xb2\x71\x83\x19\x39\xf0\x6f\xa3\x37\x7f\xb9\xd4\xb7\x25\x2c\xa1\x51\xb9\x72\xbd\xd6\x48\xd7\xf0\xd3\x44\xe0\x80\x0f\x8d\x20\xe7\x11\x5e\xc3\x0c\x42\x19\x14\xa9\x11\x44\x48\x6f\x13\x34\xc7\xf3\xea\xb7\xd0\x66\x75\x30\x54\xb7\xa1\xd8\x30\xa7\xb5\x7f\x8f\x6b\x72\xe6\xbb\x51\xab\x69\xd4\x9b\x69\xd4\x9b\xdd\xa8\x37\x5f\x1b\xf5\xa3\xcc\xc7\x41\x3d\xef\x61\xf3\x40\x49\xad\x99\xe3\x6a\xaa\x12\x74\x13\x5c\x93\x61\xd7\x14\x67\x06\x27\xdf\xe6\x86\x64\xde\x79\xa9\x8c\x97\x1f\xbe\xcd\xcd\x46\x68\xb1\x12\x89\x20\x53\x31\x56\xdf\x12\x64\x23\x57\x2f\x6c\xeb\xbb\xda\xc4\x72\xdc\x40\x6b\xdb\x32\xfc\xad\xa3\x31\x7f\xe7\x31\x38\xc9\xbc\x43\xb7\x3c\x1f\x85\x0f\x7c\xac\xa3\x81\xcf\x4e\x7b\xb9\xe2\x69\x39\x54\xd0\x83\x57\x8e\x4b\xf2\x57\x51\x62\x68\x1f\xef\x21\xab\xa1\x4a\x0f\x23\xc7\xf5\xaa\x9b\xbd\x96\x2a\x75\xcd\xbf\xdb\xd2\xdd\xf0\xa4\x40\x58\xb6\x81\x77\xb9\x37\x10\xcb\x71\x39\x91\xb2\xad\x1a\x6a\x1d\xb5\xd0\x69\xa2\x35\xb8\x3a\x0c\xae\xfe\x27\x9d\x6a\x97\x4e\x35\x18\x05\x32\xd3\xd2\xcc\x97\x8c\xec\xfd\xf8\x7b\xda\x3a\xe0\xa0\x57\xf8\x4f\x81\x9a\xde\xc8\x44\xaa\xd6\xbc\x67\xd6\xa0\xee\x3b\xb8\xe7\xc1\x0b\xbb\xff\xfc\xed\xfa\x8b\x9f\xbc\x09\x8f\x79\x1b\xe0\x7d\x8f\xfe\x52\x89\x99\xbe\x88\xa7\x2b\xae\x3c\x06\x2f\xbb\x26\xbf\x04\x36\x5c\xab\x51\x3a\xbc\x14\x52\xdb\x9d\xf1\xd1\xf8\xd1\x69\xb2\xd1\xb9\xcc\x34\x7e\xac\x72\xf4\xc1\xfa\xac\x65\x66\x1d\xd5\x65\xc5\x35\x2f\x12\x1a\xd0\xf7\x8e\x4b\x31\x66\xa3\x7c\x3a\x5b\x67\xea\xd4\xf3\x76\xaa\xd8\xe3\xe6\x7b\x30\xd3\x6c\x59\x50\x5e\x90\xe5\xb8\x31\xa5\x89\x6d\x5d\xf9\x60\x99\x44\x44\x89\xc9\x2f\x9c\xf8\xdf\xc7\x9f\xe0\x25\x58\x8b\x95\x3a\xbb\x98\xaa\x4e\x7a\xd5\xf9\x54\x75\xda\xab\x7e\x9e\xaa\x5e\x7d\x9a\x32\x31\x34\x62\x2c\x3b\x0e\xec\xdd\xdb\x6b\x78\x73\xf9\xfe\xf2\xca\x37\x35\xed\xf8\xbb\x21\x27\xee\xbe\xc3\xd2\xd9\xb7\x56\xd1\xaa\xb7\xbe\xba\x38\xaf\xed\x7e\xff\x70\xf9\x87\xab\x49\x89\x2c\x12\xeb\xca\xde\x75\x73\x75\x71\xee\x1c\xf0\xa3\x8b\xb8\xe8\x1d\x7d\x28\xe2\xe2\x69\x4f\x06\x65\x5c\x8d\x5b\xb5\xeb\xd8\x0d\x38\x05\xf1\xa8\x73\xa8\x94\x54\x7b\x6d\x9b\x4e\x7f\x83\x9a\xef\x83\x78\x82\x8a\x0e\xab\xef\x3b\x41\xfd\x11\x2c\xbc\x7e\x13\x3e\x7f\xb6\x08\xc5\x06\x82\x84\x6b\xbd\x64\x81\xcc\x88\x8b\x0c\x15\x6b\x97\xe4\x58\xa9\xe4\xb6\x13\x4f\x55\x81\x4c\x66\x69\x38\xfb\x11\xcc\x41\xa7\xb3\x93\xd3\x31\x72\x8a\x36\xef\xc0\x2c\x96\x4a\xdc\x99\x70\xc9\x14\x5a\xc3\x0d\x06\x32\x9e\xe2\x92\xf5\x0f\x08\x83\x14\x29\x96\xa1\x11\x69\x3a\x64\xd6\x47\x12\xe1\x72\x67\xe9\x81\xcc\x82\x44\x04\x5f\x5a\xe9\xb0\xed\x19\x6c\x45\x48\xf1\xd2\x3a\x39\x3e\xfe\xde\x82\x18\x45\x14\x53\x77\xab\x37\xcc\x92\x01\xac\x78\xf0\x25\x52\xb2\xc8\xc2\x99\x16\x77\xe8\x07\x72\x83\x6a\x3e\x92\x2a\xcc\x91\x93\x9f\xc9\xf6\x34\xd6\xe5\x52\x0b\xd3\x5f\x1f\x02\x34\x84\xda\x9f\x31\x44\xa4\x3c\x42\xbf\x50\x89\x6d\x71\xad\x91\xb4\x47\xa8\xdd\xcf\x79\x64\x39\xf3\x9a\x9f\x7f\xfa\xfa\x38\x2f\xe7\x0d\xbd\xf6\xf2\x50\x01\xea\x22\x88\x34\x02\xad\x82\x25\x8b\x89\x72\xdf\xf3\xb6\xdb\xad\x8b\x29\xcf\x0a\x4c\x70\x8d\x4a\x66\x9c\xa4\x1b\xc8\xd4\xab\x43\x6b\xaf\x2e\x8b\x1b\x89\x35\xab\x6b\xd7\xec\xd8\xae\x00\x7d\x06\x0a\x13\x4e\x62\x83\xf3\x61\xcb\xf9\xb1\x08\x43\xcc\xe6\x77\x33\x91\x85\x58\xfa\xa7\x73\x76\xb6\xf0\x44\x1a\x1d\xea\xaa\x67\xda\x78\x50\x11\x8a\xcd\x74\x62\x26\xb2\xbd\xfb\x57\xcd\xdf\x9f\xcd\x30\x80\xd9\xbb\x0b\x91\xe5\x05\x01\x55\x39\x2e\x19\x61\x49\x4d\xce\xcd\x2a\x64\xed\xd4\x75\x37\xd3\xef\x25\x7b\xcd\xc0\x3b\x83\x19\x54\x4f\x98\x57\x3b\xe6\x15\xdb\x4f\x75\xe4\x6f\x92\x6f\xae\xb0\x76\x14\x63\x69\x4a\x98\x2b\x7c\x08\xa1\xa2\xd5\x13\x08\xf3\x5e\xed\x43\xc6\x25\xec\xce\xcd\xef\x7f\x01\x00\x00\xff\xff\x5c\xd0\x3f\x4d\x1b\x0b\x00\x00")

func viewsIsimenuMainkontenHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIsimenuMainkontenHtml,
		"views/isimenu/mainkonten.html",
	)
}

func viewsIsimenuMainkontenHtml() (*asset, error) {
	bytes, err := viewsIsimenuMainkontenHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/isimenu/mainkonten.html", size: 2843, mode: os.FileMode(438), modTime: time.Unix(1494589180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsKontenHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x0b\xc2\x30\x0c\x47\xef\x82\xdf\xe1\xc7\xa0\xe0\x3f\xe6\x5d\xc6\x10\x4f\x7a\xf5\x2a\x1e\xb2\x2d\xd5\xe2\x1a\xa5\x4d\x41\x11\xfd\xec\x82\x05\x71\xa7\x10\xde\xcb\x23\x95\x79\xa3\x70\xd2\xf1\xbd\x3c\xab\xef\x0b\x98\x7a\x3c\x02\x80\xca\xac\x60\x93\xb4\xd8\x52\x4f\x9e\x64\xcf\xd2\x71\x98\xa0\x23\xa5\x9d\x28\x07\x4b\x2d\xc3\xd3\xed\x10\x35\x38\x39\x1d\xf3\x58\x34\xc9\x5a\x0e\x98\x35\x0f\xe5\x58\x6e\xbe\xdb\x14\xbf\x6c\x4e\xaf\x71\xb9\x8a\xb2\xe0\x39\x00\x19\xce\x51\xb8\xe8\x3c\x4b\x5a\x7a\x72\x92\xcd\xbf\xef\x86\x7e\xbe\xc1\x0b\xa6\xfe\x04\x00\x00\xff\xff\x14\xf9\x2f\x35\xcc\x00\x00\x00")

func viewsKontenHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsKontenHtml,
		"views/konten.html",
	)
}

func viewsKontenHtml() (*asset, error) {
	bytes, err := viewsKontenHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/konten.html", size: 204, mode: os.FileMode(438), modTime: time.Unix(1494588114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsAllcssHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4b\x6f\xe3\x36\x10\x3e\x3b\x40\xfe\x03\xe3\x43\xd1\x6e\x41\xd2\xaf\x3c\xec\x38\x41\x2f\x0b\x74\x81\xf6\x52\xf4\xb6\xd8\x03\x4d\x8d\xe5\x71\x28\x52\x21\xc7\x6b\x07\x45\xfe\x7b\x21\x4a\x56\x64\x5b\x4e\xed\x6e\x8b\xbd\xd2\x33\xdf\x63\xe6\xd3\x24\xd3\x2b\xce\xd9\xcc\x39\x0a\xe4\x55\xce\x7e\x60\x73\x67\x49\xad\x21\xb8\x0c\x18\xe7\x8f\x97\x17\x53\x83\xf6\x89\x79\x30\x0f\xdd\x40\x2f\x06\xc2\x02\x80\xba\x6c\xe1\x61\x5e\xbc\x28\x42\x2d\x75\x08\xb2\x06\x11\x19\x5a\xa1\x43\xe8\x32\x79\x62\x7b\xc1\xc9\x2b\x52\x39\x12\xd7\xa2\x17\x11\x9b\xcf\xbb\xa0\x97\x17\x51\x77\xae\x52\x60\x21\x07\x8d\x73\xd4\x2c\x37\xab\x14\x2d\x2b\x59\x4a\xed\x55\x1d\xc1\x86\xa2\xb1\x70\x9e\xa5\xd8\x22\x52\xe7\x52\x03\x2a\xc7\x20\xb4\xcb\x0e\x44\x28\x0d\x3b\x9c\xa7\x82\x2b\xdd\x30\xa5\x8d\x0a\xe1\xa1\xab\x34\xf0\x4c\xa1\xe5\xcd\x4e\x4c\x1e\xba\xf1\xb1\xf8\x35\xfe\xd0\xe4\xff\x8c\x73\x66\x08\xd8\xa7\x8f\x6c\xfc\xe5\xf1\xf2\xa2\xd3\xe9\x9c\xa1\x80\xe7\xca\xd3\xe0\x34\x1d\x32\xa2\x4f\xaf\x3e\x83\x4d\x70\xfe\xe5\x5c\xb3\x3c\x3c\xa1\x0d\xe7\x87\x63\xdb\xee\xc9\xb4\x85\xe0\xd0\x3f\x63\xe7\xc0\xe2\x5e\xb4\xf6\x1d\x56\x5b\x46\x6b\xd0\xd6\x8b\xf6\x60\x14\x41\xc2\xc8\x31\x5a\x60\x28\x83\x58\x95\xd7\x2d\xbf\xfe\xf9\xfb\x6f\xd7\x61\x81\x5f\x99\xb2\x09\xfb\x03\x42\xee\x6c\x22\x96\x81\xcd\x9d\x67\x9f\x3e\xde\x15\xdd\x61\x95\xe7\xce\x53\x59\xcb\xc0\x40\x06\x45\x4a\x8b\x86\x0c\x12\x54\xec\x79\x05\x1e\x77\xe3\xdc\x70\x7c\x57\x3a\x9e\x06\xed\x31\x27\x16\xbc\xae\xfd\x2d\x83\x5c\x50\x66\xa2\x80\xe8\x70\x19\xba\x8f\x53\x59\x56\xbe\xd7\xe5\x2b\xa1\xed\x3d\xfb\xb3\x69\x9f\x34\xbd\xe4\xf0\xd0\x6d\x99\x78\x00\x03\xba\x11\xb8\xe3\x19\x38\x0a\xb1\x7c\xde\x88\x99\x0a\xf0\x6f\xfb\xc3\x1a\x80\x94\x01\xff\x6d\x32\xea\x73\xc7\x13\x45\x40\x98\x41\x8e\xfa\x09\xfc\x7f\x83\x49\x6a\x66\xde\x1c\x5e\x71\x7e\x12\xd4\x82\x28\x0f\x13\x29\x75\x62\x97\x41\x68\xe3\x56\xc9\xdc\x28\x0f\xc5\xdd\x92\x6a\xa9\x36\xd2\xe0\xac\x5e\x82\x1c\x89\x9e\x18\x7e\xd3\x5a\x0a\xc2\x89\x94\xeb\xf5\x5a\x2c\x9f\xd7\x98\xa4\x40\xf1\x48\xca\x65\x91\xdb\x17\x5e\x3d\xf1\x04\x32\x27\xeb\x0a\x59\x02\x7e\xd7\x4d\x9e\x38\xaa\x63\x5b\x96\x23\xd1\xbf\x15\xa3\xdb\x93\xa3\xf0\x7f\xc9\x8a\x41\x91\x7d\xd1\xef\x8b\x7e\x7b\x7e\x1a\x97\x43\xaf\x02\xb9\xac\x3c\xdc\x51\x43\xf1\x4d\x8b\x80\x09\xcc\x94\xff\x59\xc4\x8b\xaf\x9d\x25\xb0\xc4\xfe\x2a\x3e\xf7\x4c\xf9\x14\x2d\x37\x30\xa7\x09\x1b\x5c\xf7\xf2\x0d\xbb\xc2\xac\xb8\x58\xca\xd2\xfd\xe5\x45\xe7\xb5\x80\xae\x21\xca\xa6\x35\x26\xb4\x78\xa7\x3c\xb6\xfc\x52\x9e\xb7\x1f\x33\xb4\xbc\x6a\xb8\xbd\xb9\xcb\x37\x3f\x95\x18\xf2\x83\xa8\x32\x19\x05\x29\xb4\xe0\x39\x7f\xfb\x3f\x25\x16\x6d\x99\x86\xa3\x03\xa2\xce\xeb\x07\x59\xcb\x6b\xe1\x1a\x8f\x07\x91\xeb\x68\x41\x7f\xd0\xeb\x35\x2a\x44\xe6\x12\x65\x78\x82\xca\xb8\xb4\x64\xcf\x5d\x40\x42\x67\x27\xe5\x5f\x03\xfc\x0a\xf7\x0d\xf7\x6a\x45\xee\xbe\x1c\xe1\x66\x8b\x79\x53\x40\xde\xbf\xcd\x75\xc2\xfa\xd5\xc3\x0e\x49\xc8\xb6\xc3\xaf\x3b\x87\xbd\xb6\x42\x93\x1e\x14\x8e\x77\x0b\xff\x61\xca\x2d\xae\x6a\x69\xc3\x62\x7b\xb5\x8b\xd7\xf7\x20\x87\x83\xde\x3e\xe4\xd6\xc3\x36\x41\x1e\xd3\x05\x35\xa6\xb2\x9b\xac\xd3\x68\x6e\x0e\x69\x5a\x94\x9f\x43\xb5\x3f\xc8\x3d\x88\xed\x76\xf6\x20\xea\xe7\x77\xd5\x8e\x0f\xd5\x1e\xa1\x39\x71\x28\xd3\xf2\x6c\x3e\xfe\x1d\x00\x00\xff\xff\x6c\x8b\xa7\x2a\xb2\x0b\x00\x00")

func viewsPartialsAllcssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsAllcssHtml,
		"views/partials/allcss.html",
	)
}

func viewsPartialsAllcssHtml() (*asset, error) {
	bytes, err := viewsPartialsAllcssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/allcss.html", size: 2994, mode: os.FileMode(438), modTime: time.Unix(1494406626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsAlljsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func viewsPartialsAlljsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsAlljsHtml,
		"views/partials/alljs.html",
	)
}

func viewsPartialsAlljsHtml() (*asset, error) {
	bytes, err := viewsPartialsAlljsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/alljs.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1494578214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsAlljssrcHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xcf\x6f\xdb\x36\x14\xbe\x07\xc8\xff\xc0\x08\x03\x9c\x60\x15\x19\xd9\x59\x53\x74\xae\x6f\x3d\x6c\x18\xb6\xc3\x76\x2b\x7a\xa0\xa9\x67\x9b\xb2\x44\x2a\x7c\x4f\x95\xd3\xbf\x7e\xa0\x64\xcb\x4e\x22\xdb\x92\x5b\x27\x97\x44\xa6\x1e\xbf\xef\xfd\xfc\x44\x69\x7c\x15\x86\x6c\x2a\x51\x2b\x86\xca\xe9\x9c\x90\x85\xe1\xe4\xf2\xe2\xf2\xc2\xdf\xf9\xa2\x67\xec\xea\x8f\xcf\x5f\x27\xf5\xa2\x5f\xaa\xad\x18\x3a\xf5\x29\x40\x92\xa4\x95\x48\x50\x24\x0f\x05\xb8\xc7\x70\xc8\x23\x7e\xc7\x33\x6d\x78\x82\xc1\xe4\xf2\x82\x31\xc6\xc6\xa2\xde\x32\xd9\xc1\x65\xe3\xab\x2f\x60\x62\x3d\xfb\xda\xe0\x8e\x0f\x02\x47\x3c\x8a\xf8\xa8\x41\x6e\xc3\xf4\xbe\x7a\x57\x6b\xc4\x43\x68\x2f\x61\xd6\x2e\x3c\x75\x6a\x0d\x41\x8f\x39\x7c\x0a\x08\x56\x24\x12\xf9\x4d\xd6\xab\x9b\xe0\xf4\x8c\x5d\x0f\xac\x21\x5b\xa8\x05\x92\x74\x34\x60\xda\xb0\xd8\xaa\x22\x03\x43\x7c\x73\xf1\x39\x05\xff\xef\x66\x7b\xa7\x74\x9a\xe0\x3a\xd8\xf5\x73\xf0\xd2\x4f\x3b\xd5\x29\x70\x55\x20\xd9\x6c\xed\xf5\x60\x12\xb0\x5f\x59\x30\xae\xfe\x6e\xfc\x0f\x6e\x7e\xaf\xd2\xb0\x13\x4f\x7b\x02\xa6\xd6\x12\x92\x93\x79\x5b\x0e\xd6\xb5\xc9\xe5\x1c\x18\xe6\xa0\xf4\x4c\x2b\x96\xa7\xc5\x5c\x9b\xb6\xe6\x60\x52\xc1\xd3\xf5\x3d\xa4\x52\x41\x08\x75\x06\xb0\x35\xf7\x7b\xb7\xed\xad\xd4\xee\x8e\x05\x51\xfe\x51\x54\xe6\x09\x2c\x25\x9f\x3e\x0a\x89\x08\x84\x0d\xf7\x8a\x9c\xdc\xd3\x3b\xdb\x40\x80\x48\x9b\x39\xb2\x85\x34\x71\x0a\xee\x78\x44\xed\xa8\x7b\xf7\x20\xa4\xa0\x68\xd8\x63\x47\xf2\xb0\x52\xd6\x41\x77\xeb\x50\xa6\x69\x67\xeb\xaa\xc3\x10\x9c\x96\xa9\xfe\x0e\x09\x5a\xd3\xa7\x36\x2b\x6d\xfb\xd4\x32\x41\xae\xac\x5d\xea\xf6\x8a\xb6\xef\xc9\xac\xef\x98\xb0\xd4\xb4\x08\x53\xab\x64\x0a\x7d\x18\x75\xdc\xb5\x2e\x25\x00\xc9\x14\x5c\xaf\xda\x34\x83\x14\xc6\x92\x80\x74\x06\xb9\x56\x4b\x70\x27\x41\x18\x4b\x7a\xd6\x2e\x4b\x07\xab\xa7\x4d\x5e\x50\x26\x71\xc9\xa7\x85\x6f\xda\xde\xc4\x24\xa7\x47\x76\xf9\xe1\xc2\x8f\x42\xa8\xd8\xf8\x1a\xa6\xb6\x88\x67\xa9\x74\xc0\x95\xcd\x84\x4c\xe4\x4a\xa4\x7a\xda\x34\xb7\xb8\xe3\xb7\x7c\x74\xac\xdb\xdb\x06\xf8\x14\x0e\x1d\x7d\x30\x2f\xea\xbc\x23\x50\x6d\x2a\x51\x96\x25\x4f\x1e\x4a\x1d\xcf\x81\xb0\x22\x58\x3f\x61\xd6\x4b\x61\x0c\x99\x15\x8d\xc5\x19\x66\xb0\x63\xb4\xcf\x07\xf4\xcf\x7f\xff\xf9\x5b\x0c\xf9\x07\x1e\x9d\x36\xbb\x1b\xda\xc2\xe4\xcb\x79\xcd\xe5\x67\x58\xc4\x1a\xa9\xe3\x38\x77\xf5\x1c\xc3\x7a\xd6\x45\x75\x1c\xe8\x31\xfb\x1d\x09\x6a\x61\xe0\x09\x7a\x02\x9f\x90\x53\x94\xe2\x54\xae\x1a\xff\x98\xbc\xec\xa0\xf3\x04\x63\x48\xf5\x37\xc7\x0d\xd0\xae\xda\x88\xf7\xfc\x3d\x1f\xf6\xd2\x9f\x8e\x4e\xef\x13\x27\x71\xc7\xa3\x7b\x7e\x77\xff\x43\x02\xd6\x39\x71\x05\xc2\xed\xf0\xfe\x36\x7c\xae\x73\x62\xc4\x23\x7e\xdf\x5f\xfe\xfa\x0d\x4e\xa3\x8d\x62\xc4\x47\xbe\x0b\x4f\x90\xcc\xde\xe9\xae\xf4\x54\x54\x87\xd5\xe8\xb0\xcc\xb6\x9f\x7b\x7f\x2c\xc4\xed\xef\x6d\x94\xe7\x4d\x6a\x1b\xe3\xeb\xb2\x39\x98\xc3\x8a\xc3\x8a\xc0\xa0\xb6\x06\x5f\x99\xfe\xcd\x88\x4d\x91\x81\xd3\xea\xed\x1c\xf0\xaa\xf1\x76\xec\xf9\xc2\x9a\xfd\xf4\xe7\x18\xae\x8a\x31\x54\x36\x06\xac\xaf\x0f\xbc\x50\x9c\x93\x36\x9c\xfe\xb4\xe7\x68\xf7\x7c\xb7\xb8\xe1\x8a\x63\xc1\x2b\x77\x2e\xcd\xee\x99\x79\x27\xcb\xb9\xa6\x8a\xb2\x04\xf3\x7d\xa1\x57\xda\xbc\x10\xed\x4c\x22\x81\x13\xe8\xd4\xa9\xe7\x63\x3f\x12\xb2\xda\x81\xd5\xa3\x3e\xe2\xd1\x2d\x8f\x7e\x13\x0a\x9b\x00\xbd\xc5\x7f\xb5\xc5\xbe\x4f\x19\x0d\xfe\xfa\x0b\x83\x10\x6c\x7d\x06\xa9\x4f\x1e\xd7\x03\x1d\x0f\xfc\xeb\xfe\xd3\x9b\x45\xee\x07\xf2\xaf\xad\xc9\x3b\x66\x8a\x34\xbd\xe9\x6a\xb7\x05\xfc\x85\xcf\x0c\xdf\x1c\xdf\x63\x98\xc9\x22\x25\xe4\x08\x74\x1d\xd0\x02\x32\x08\xde\xb1\xa0\xc9\xd0\xf3\x0f\x0f\xff\x07\x00\x00\xff\xff\x20\xa1\x22\x0c\x4f\x12\x00\x00")

func viewsPartialsAlljssrcHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsAlljssrcHtml,
		"views/partials/alljssrc.html",
	)
}

func viewsPartialsAlljssrcHtml() (*asset, error) {
	bytes, err := viewsPartialsAlljssrcHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/alljssrc.html", size: 4687, mode: os.FileMode(438), modTime: time.Unix(1494406762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xd1\x4a\xeb\x40\x10\x86\xaf\x53\xe8\x3b\xcc\xc9\x81\xde\xad\x69\x0b\xe2\x45\xd3\x42\x40\x90\x88\x95\x52\xea\x03\x6c\x36\x9b\x74\x30\xee\xc4\xdd\x49\xb5\x6f\x2f\xc9\x26\x18\xa9\x20\x08\x5e\xcd\xec\xfc\x33\x7c\xf3\xb3\x13\xe7\x78\x02\x55\x49\xe7\xd6\x61\x41\xc4\xda\x86\x9b\xe9\x24\xb8\x2c\x0b\x34\xa6\x17\xbf\x53\x15\x19\xd6\x86\xbd\x1e\xc4\xae\x96\x66\xe8\xc8\xb0\x2c\xb5\x15\x8b\xe5\xbc\x57\x83\x8b\x8e\xaa\xd1\x90\x51\x95\xb7\x80\xdd\xe1\x0a\x0e\xe9\x5d\xb2\x4b\x1f\x92\x3d\x6c\x93\xfb\x27\xd8\x26\x8f\xb7\xe9\x3e\x8d\xa3\x76\x68\x03\x33\x45\xf5\x79\x05\xcb\xf9\xe2\xc6\xd3\x7c\x7d\x3a\xe9\x5e\x33\x93\xb9\x7a\x05\x3e\x78\xfd\x9f\x10\x5f\x78\x52\x31\x92\x11\x59\xc3\x4c\xc6\x8d\xb7\x92\x70\xb4\xba\x58\x87\xff\x47\xc5\x20\xc6\xcf\x41\x2d\x50\x91\x81\x42\x42\x21\x05\xbf\x21\xb7\xe6\xdd\x6b\x23\xad\x86\x0a\xcb\x23\x0b\x6f\xa6\xf7\x7c\x3d\x0f\x37\x71\x84\x23\x42\x24\x87\x45\x7f\x01\x2c\xa4\xd2\x19\xd1\xf3\x40\x64\xfd\xce\xa2\xb6\xf8\x22\xed\xf9\xaf\x98\xd6\xb9\x01\x47\x56\x9a\xf2\x47\x73\x43\xde\x7d\x8a\x10\xfe\x62\xa2\x1c\x4f\xdd\x61\xf5\x89\x8f\x1f\x01\x00\x00\xff\xff\x83\xba\x96\xb0\x7e\x02\x00\x00")

func viewsPartialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsFooterHtml,
		"views/partials/footer.html",
	)
}

func viewsPartialsFooterHtml() (*asset, error) {
	bytes, err := viewsPartialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/footer.html", size: 638, mode: os.FileMode(438), modTime: time.Unix(1494277508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsGlobalfcHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x6e\xe4\x36\x0c\xbe\x07\xc8\x3b\x30\xd3\x00\xb2\x93\x8c\xbd\x01\x16\x0d\xd0\x89\xe7\xb2\x97\xee\xa5\x68\x17\xb9\x05\xc1\x40\xb6\x69\x5b\xa9\x2c\x79\x25\x7a\x92\xb4\x9b\xe7\xe8\x03\xf5\xc5\x0a\xd9\xb2\xe7\xc7\x4e\xda\x3d\x74\x4e\x1e\x89\x3f\x1f\x3f\x92\x22\x6f\xcf\x96\x4b\x10\x4a\x0a\x85\x60\x33\x23\x1a\xb2\x60\x50\x72\xc2\x1c\x48\x03\x55\xc2\x42\xc3\x4b\x84\xe5\x72\x7d\x7a\x72\xdb\x8b\x00\xbd\x34\x98\x2c\x08\x9f\x29\x7e\xe4\x5b\xde\x9f\x2e\xd6\xa7\x27\x00\x00\x8f\xbf\xb5\x68\x5e\x82\xa2\x55\x19\x09\xad\x20\x38\x0f\xe1\xcf\xfe\xca\xfd\xb6\xdc\xc0\xb9\x15\x39\xa6\xdc\x40\x02\xe7\x01\x8b\xfc\x3f\x16\x46\xf8\x35\xf8\x10\xae\x76\xc2\xa2\x80\xe0\x6c\x90\x8e\x2a\x6e\x3f\x49\x6e\x6d\xc0\xaa\xe5\xa8\x13\x82\x41\x6a\x8d\x5a\x9d\x9e\xec\xf4\xce\x83\x5c\x67\x6d\x8d\x8a\xc2\x48\xab\x80\x59\x24\x12\xaa\xb4\x11\xcf\x30\x22\xdd\x6c\x6a\x54\x2d\xbb\x82\x1d\x48\xdc\x5e\x01\x6e\x51\xd1\x46\xf1\x1a\xaf\xa0\x10\xcf\x98\x1f\x00\x1f\xf0\xec\xa4\xe0\x2c\x49\x80\x79\x24\x9b\x4e\x83\xcd\xc2\x19\xe2\xde\x0b\x7b\x88\xa9\x44\x3a\x0c\x79\xe4\xe8\x49\xa8\x5c\x3f\x75\x14\xf5\x9f\xe1\xc4\x66\x1c\xf7\xce\x1c\xae\xc1\xb6\xb0\xa0\x34\xf5\xf8\x41\x1b\x10\x0a\x6a\x9d\x0a\x89\xb0\x15\xf8\x04\xb5\xce\xf1\x4d\x60\x9b\x2d\x37\x76\x1f\x1d\xcf\x70\xe3\xbf\x03\xe6\x2e\xd9\x31\xd4\x2e\x43\xbd\xb3\x6f\xdf\x20\xd8\x37\x74\xcf\x7a\xc7\x1b\xe7\x98\x3d\xb8\xfb\xc3\xeb\x4c\x4b\xc9\x1b\x2b\x52\x89\xec\x21\x9c\x90\xdd\x25\x72\x40\x62\xb0\xd6\x5b\xf4\xe9\x97\xfa\x09\xcd\xb2\x12\x65\x25\x45\x59\xd1\x04\xd4\xc0\x8d\x25\x6d\x10\xb4\x11\xa5\x50\x5c\x5e\x41\x8e\x05\x6f\x25\x41\xcd\x4d\x29\xd4\x9d\x6e\xa6\x6a\x83\x3f\x4b\x2f\x12\xa3\x51\x10\x12\x60\x6c\xc2\x7f\x87\xb0\x4f\x4e\xa4\x8b\x22\x60\x36\x33\x5a\xca\xc3\x2a\x0b\xa7\x3a\x63\x89\xec\x1f\xbe\x3a\xeb\xd3\xd4\xe4\x5a\x21\x24\x50\x70\x69\xf1\x48\x63\x74\xad\xe6\x3d\x1f\xd4\x77\x47\xef\x14\x4a\x97\xfd\x4e\xd7\xe5\xdd\x1b\xec\x0f\xee\x74\x13\xcc\x31\x3b\x8a\x37\xdc\x58\xfc\xac\x28\xf0\x27\x31\x7c\x0c\x57\x71\xec\x12\x05\x54\x21\x38\x10\xd0\x36\x70\xdd\x3c\x43\xa1\x8d\xeb\x2f\xf3\x02\x1f\x9b\x67\xd0\x05\x0c\x0d\xea\xcd\x09\x55\x4e\x3d\xb9\xe2\xf2\xb6\xd7\x70\x7d\x13\xee\x5c\x5f\xdf\xac\xa6\x74\x4d\x55\x7e\x9c\x2d\xaa\x41\xee\xcc\x71\xfb\xa6\x04\xec\x97\x1f\xcf\xf3\xef\xa8\xbd\xe1\xe7\x73\x47\xa6\x3d\x4e\xdd\xf0\x7b\x9d\x1e\xcf\x1c\xa1\xb4\xf8\x5e\x20\xff\x3d\x8e\xef\x6e\xa3\xa3\x50\xe6\xca\xf0\xfd\x58\xfe\xa5\xc5\xee\xd9\xd8\x63\xec\x01\x12\x08\xae\x6f\x60\xe9\xf3\x1c\xc2\x25\xb0\xe6\x99\x1d\x37\x4a\x18\x91\x11\x65\x89\xe6\x67\xae\x72\x89\xe6\x8d\xbe\x3b\x68\xd7\x39\xa5\x37\x86\xc2\xfd\xd1\x93\x7e\x05\x33\x13\xc8\x9f\x2c\xfd\xab\xff\x10\x1e\xcd\x1f\xff\x64\x77\xbd\x69\xd0\x8a\x3f\xf0\xed\xde\x9c\xa4\x6e\x7f\x7c\xfd\xef\xa8\x77\x0c\xed\xb5\xd4\xeb\x70\x13\xc7\x50\x11\x35\xf6\xa7\x38\x7e\x6c\x15\x17\xf9\x57\x9e\x0b\x13\x65\xba\x8e\x53\x9e\xfd\xfe\xc2\x4d\x1e\xa7\x5a\x93\x25\xc3\x9b\x0d\xcf\xf3\x8d\x71\x15\xb6\x21\x9e\xda\xb8\x37\xe1\x9e\x18\xb7\x43\x7c\xae\x79\x89\x6e\xbc\xdc\x3f\xac\x0e\x6f\x7e\x69\x6b\xd7\xd3\x83\xcb\x8b\x8b\xfe\xe3\x02\xbe\xa0\x45\x02\xd5\xd6\x29\x1a\xa1\x4a\xd0\x0a\x88\xa7\x90\xb6\x44\x5a\x59\x2f\xe5\xdd\x8c\x7c\x1a\x67\x2f\x45\xf3\xab\x73\x77\x48\xee\xce\xd9\x87\xd5\xe1\x4a\x42\x3c\xfd\xa4\x5b\x45\xfd\x4a\xf2\x83\x13\xbc\xe3\x29\xac\x41\x0a\x16\x46\x12\x55\x49\xd5\x6a\x3f\xc1\x13\x19\xe4\x59\x15\xbc\x93\xd4\x91\x86\xbc\xf3\xe1\x56\xab\x30\xca\x2a\x21\x73\x83\x2a\x60\x9c\x85\x11\x27\x32\x01\xab\x0c\x16\xb3\x73\x76\xd0\x4e\x60\xd1\x39\xbf\x5e\xcc\x36\xbd\xdf\x09\x66\x5e\x9d\xa3\x0e\xf5\x6c\x5c\x5e\x1e\xcf\x95\x59\x70\x15\xd5\x32\x60\x8e\x54\x60\x70\x39\x52\x79\x39\x05\xc0\x6e\xfb\x04\x41\xe6\xaa\x2e\x59\x64\x52\x5b\x5c\xf8\xad\xb1\xbf\x5a\x38\x1b\x33\x9a\x24\x48\x62\xb2\xf8\x82\x7e\x88\xf8\xf5\x73\xb1\xfe\xfb\xaf\xdb\xb8\x57\x5d\xb3\x49\xd5\xc2\xf0\xd4\xdc\xc6\xfd\x2e\xba\xfe\x27\x00\x00\xff\xff\x6f\xb9\xc5\x59\xd8\x0a\x00\x00")

func viewsPartialsGlobalfcHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsGlobalfcHtml,
		"views/partials/globalfc.html",
	)
}

func viewsPartialsGlobalfcHtml() (*asset, error) {
	bytes, err := viewsPartialsGlobalfcHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/globalfc.html", size: 2776, mode: os.FileMode(438), modTime: time.Unix(1492767584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsGlobalfc2Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func viewsPartialsGlobalfc2HtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsGlobalfc2Html,
		"views/partials/globalfc2.html",
	)
}

func viewsPartialsGlobalfc2Html() (*asset, error) {
	bytes, err := viewsPartialsGlobalfc2HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/globalfc2.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1494588177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsPartialsSidebarHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd2\x4b\x6a\xf3\x30\x10\x07\xf0\x7d\x20\x77\x18\xfc\xad\x8d\x2f\xa0\x18\xfc\xb5\xa6\x35\xb4\x4a\x70\x9c\x03\x8c\x9d\x89\x35\x54\x91\x5c\x3d\x9a\x1e\xbf\xe4\xe1\x45\x29\x14\x1c\x42\xe8\x4a\x42\xe8\x3f\xd2\xfc\x18\xa1\x19\x3a\x8d\xde\x2f\x12\xc5\xbd\xd2\xdc\xab\x00\xca\x7e\x90\x03\xe5\x63\x9b\xe4\xf3\x19\x00\x80\x40\x50\x8e\x76\x8b\xe4\x1f\x9b\x21\x86\x80\x0a\x0d\x9a\x16\x5d\x4c\xc6\xf8\xd6\xd9\x61\x6b\x0f\x26\x0d\xb6\xef\x35\x8d\xc9\x53\xda\x0f\x68\xc6\x7b\x7b\x32\x31\xe5\xce\x9a\x24\x17\xfc\xe3\x10\x76\x08\x3b\x4c\x07\x32\x1d\xeb\xd4\xbf\x47\x74\x94\xda\x24\x17\x19\xe7\x22\x3b\xd6\xf9\xb5\x6e\xa0\xcf\x90\xe4\x95\x5c\x6d\x1a\x68\x8a\xe7\x42\x16\x12\xfe\x17\xf5\xe6\x5b\x54\x64\x38\xee\xda\x31\x8d\xce\xd9\xc3\xf1\x99\x36\x9f\xcf\x44\xa6\xf9\xb8\x4c\xb5\x19\x6c\xb0\xa6\x77\xb4\x67\xcf\x17\xa2\xbf\xc8\xb3\x5a\x36\x4b\xf9\x04\x75\xf9\x5a\xad\xab\x91\xe9\x4e\x42\x64\x3a\x74\x8c\xe6\xa6\x3c\x67\x14\x4f\xe8\x3a\x35\xd5\xa2\x94\x0f\x45\x5d\x15\xf2\xbe\x0e\x9e\x42\xe0\xf3\xa8\x98\x2d\xb9\x5b\x32\x44\x4f\x6e\x22\xc2\xba\x6c\x9a\xea\x32\x11\xf2\xb1\xac\xaf\x32\xb8\x42\x41\xdb\xde\xc6\x70\xcb\xe6\xb5\xed\xde\x26\x36\xff\x72\xfa\xc4\x15\x2d\x7f\x05\x00\x00\xff\xff\xd1\xc7\xeb\x12\x3b\x05\x00\x00")

func viewsPartialsSidebarHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsPartialsSidebarHtml,
		"views/partials/sidebar.html",
	)
}

func viewsPartialsSidebarHtml() (*asset, error) {
	bytes, err := viewsPartialsSidebarHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/partials/sidebar.html", size: 1339, mode: os.FileMode(438), modTime: time.Unix(1493967099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/index.html": viewsIndexHtml,
	"views/isimenu/mainkonten.html": viewsIsimenuMainkontenHtml,
	"views/konten.html": viewsKontenHtml,
	"views/partials/allcss.html": viewsPartialsAllcssHtml,
	"views/partials/alljs.html": viewsPartialsAlljsHtml,
	"views/partials/alljssrc.html": viewsPartialsAlljssrcHtml,
	"views/partials/footer.html": viewsPartialsFooterHtml,
	"views/partials/globalfc.html": viewsPartialsGlobalfcHtml,
	"views/partials/globalfc2.html": viewsPartialsGlobalfc2Html,
	"views/partials/sidebar.html": viewsPartialsSidebarHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
		"isimenu": &bintree{nil, map[string]*bintree{
			"mainkonten.html": &bintree{viewsIsimenuMainkontenHtml, map[string]*bintree{}},
		}},
		"konten.html": &bintree{viewsKontenHtml, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"allcss.html": &bintree{viewsPartialsAllcssHtml, map[string]*bintree{}},
			"alljs.html": &bintree{viewsPartialsAlljsHtml, map[string]*bintree{}},
			"alljssrc.html": &bintree{viewsPartialsAlljssrcHtml, map[string]*bintree{}},
			"footer.html": &bintree{viewsPartialsFooterHtml, map[string]*bintree{}},
			"globalfc.html": &bintree{viewsPartialsGlobalfcHtml, map[string]*bintree{}},
			"globalfc2.html": &bintree{viewsPartialsGlobalfc2Html, map[string]*bintree{}},
			"sidebar.html": &bintree{viewsPartialsSidebarHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

