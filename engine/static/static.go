// Code generated by go-bindata.
// sources:
// static/css/ace-ie.min.css
// static/css/ace-part2.min.css
// static/css/ace-rtl.min.css
// static/css/ace-skins.min.css
// static/css/ace.min.css
// static/css/bootstrap-colorpicker.min.css
// static/css/bootstrap-datepicker3.min.css
// static/css/bootstrap-datetimepicker.min.css
// static/css/bootstrap-duallistbox.min.css
// static/css/bootstrap-editable.min.css
// static/css/bootstrap-multiselect.min.css
// static/css/bootstrap-table.css
// static/css/bootstrap-timepicker.min.css
// static/css/bootstrap.min.css
// static/css/chosen.min.css
// static/css/colorbox.min.css
// static/css/daterangepicker.min.css
// static/css/dropzone.min.css
// static/css/font-awesome.min.css
// static/css/fonts.googleapis.com.css
// static/css/fullcalendar.min.css
// static/css/images/backImage.png
// static/css/images/backgroundTop.png
// static/css/images/bg_black.png
// static/css/images/bg_black_horizontal.png
// static/css/images/bg_blackhover.png
// static/css/images/bg_blackhover_horizontal.png
// static/css/images/bg_blackpressed.png
// static/css/images/bg_blackpressed_horizontal.png
// static/css/images/bg_blueenergy.png
// static/css/images/bg_darkblue.png
// static/css/images/bg_darkbluehover.png
// static/css/images/bg_darkbluepressed.png
// static/css/images/black_gradient.png
// static/css/images/blackbackground.png
// static/css/images/check_black.png
// static/css/images/check_blue.png
// static/css/images/check_blue_indeterminate.png
// static/css/images/check_disabled.png
// static/css/images/check_indeterminate_black.png
// static/css/images/check_indeterminate_disabled.png
// static/css/images/check_indeterminate_white.png
// static/css/images/check_lightblue.png
// static/css/images/check_lightblue_indeterminate.png
// static/css/images/check_white.png
// static/css/images/close.png
// static/css/images/close_black.png
// static/css/images/close_blue.png
// static/css/images/close_white.png
// static/css/images/colorpicker/ReadMe.txt
// static/css/images/colorpicker/bar-hue.png
// static/css/images/colorpicker/bar-saturation.png
// static/css/images/colorpicker/map-hue.png
// static/css/images/colorpicker/map-saturation-overlay.png
// static/css/images/colorpicker/map-saturation.png
// static/css/images/common.png
// static/css/images/crosshair-white.png
// static/css/images/crosshair.png
// static/css/images/darkness/ReadMe.txt
// static/css/images/darkness/ui-bg_flat_30_cccccc_40x100.png
// static/css/images/darkness/ui-bg_flat_50_5c5c5c_40x100.png
// static/css/images/darkness/ui-bg_glass_20_555555_1x400.png
// static/css/images/darkness/ui-bg_glass_40_0078a3_1x400.png
// static/css/images/darkness/ui-bg_glass_40_ffc73d_1x400.png
// static/css/images/darkness/ui-bg_gloss-wave_25_333333_500x100.png
// static/css/images/darkness/ui-bg_highlight-soft_80_eeeeee_1x100.png
// static/css/images/darkness/ui-bg_inset-soft_25_000000_1x100.png
// static/css/images/darkness/ui-bg_inset-soft_30_f58400_1x100.png
// static/css/images/darkness/ui-icons_222222_256x240.png
// static/css/images/darkness/ui-icons_4b8e0b_256x240.png
// static/css/images/darkness/ui-icons_a83300_256x240.png
// static/css/images/darkness/ui-icons_cccccc_256x240.png
// static/css/images/darkness/ui-icons_ffffff_256x240.png
// static/css/images/darkred_gradient.png
// static/css/images/drag.png
// static/css/images/dragcancel.png
// static/css/images/error.png
// static/css/images/filter.png
// static/css/images/html_editor.png
// static/css/images/html_editor_white.png
// static/css/images/icon-calendar-white.png
// static/css/images/icon-calendar.png
// static/css/images/icon-cancel-white.png
// static/css/images/icon-cancel.png
// static/css/images/icon-delete-white.png
// static/css/images/icon-delete.png
// static/css/images/icon-down-blue.png
// static/css/images/icon-down-transparent.png
// static/css/images/icon-down-white.png
// static/css/images/icon-down.png
// static/css/images/icon-edit-white.png
// static/css/images/icon-edit.png
// static/css/images/icon-first-blue.png
// static/css/images/icon-first-transparent.png
// static/css/images/icon-first-white.png
// static/css/images/icon-first.png
// static/css/images/icon-last-blue.png
// static/css/images/icon-last-transparent.png
// static/css/images/icon-last-white.png
// static/css/images/icon-last.png
// static/css/images/icon-left-blue.png
// static/css/images/icon-left-transparent.png
// static/css/images/icon-left-white.png
// static/css/images/icon-left.png
// static/css/images/icon-menu-minimized-white.png
// static/css/images/icon-menu-minimized.png
// static/css/images/icon-plus-white.png
// static/css/images/icon-plus.png
// static/css/images/icon-recurrence-exception-white.png
// static/css/images/icon-recurrence-exception.png
// static/css/images/icon-recurrence-white.png
// static/css/images/icon-recurrence.png
// static/css/images/icon-right-blue.png
// static/css/images/icon-right-transparent.png
// static/css/images/icon-right-white.png
// static/css/images/icon-right.png
// static/css/images/icon-save-white.png
// static/css/images/icon-save.png
// static/css/images/icon-showpassword-white.png
// static/css/images/icon-showpassword.png
// static/css/images/icon-time-white.png
// static/css/images/icon-time.png
// static/css/images/icon-up-blue.png
// static/css/images/icon-up-transparent.png
// static/css/images/icon-up-white.png
// static/css/images/icon-up.png
// static/css/images/info.png
// static/css/images/le-frog/ReadMe.txt
// static/css/images/le-frog/ui-bg_diagonals-small_0_aaaaaa_40x40.png
// static/css/images/le-frog/ui-bg_diagonals-thick_15_444444_40x40.png
// static/css/images/le-frog/ui-bg_diagonals-thick_95_ffdc2e_40x40.png
// static/css/images/le-frog/ui-bg_glass_55_fbf5d0_1x400.png
// static/css/images/le-frog/ui-bg_highlight-hard_30_285c00_1x100.png
// static/css/images/le-frog/ui-bg_highlight-soft_33_3a8104_1x100.png
// static/css/images/le-frog/ui-bg_highlight-soft_50_4eb305_1x100.png
// static/css/images/le-frog/ui-bg_highlight-soft_60_4ca20b_1x100.png
// static/css/images/le-frog/ui-bg_inset-soft_10_285c00_1x100.png
// static/css/images/le-frog/ui-icons_4eb305_256x240.png
// static/css/images/le-frog/ui-icons_72b42d_256x240.png
// static/css/images/le-frog/ui-icons_cd0a0a_256x240.png
// static/css/images/le-frog/ui-icons_ffffff_256x240.png
// static/css/images/lightness/ReadMe.txt
// static/css/images/lightness/icon-first.png
// static/css/images/lightness/icon-last.png
// static/css/images/lightness/ui-bg_diagonals-thick_18_b81900_40x40.png
// static/css/images/lightness/ui-bg_diagonals-thick_20_666666_40x40.png
// static/css/images/lightness/ui-bg_flat_10_000000_40x100.png
// static/css/images/lightness/ui-bg_glass_100_f6f6f6_1x400.png
// static/css/images/lightness/ui-bg_glass_100_fdf5ce_1x400.png
// static/css/images/lightness/ui-bg_glass_65_ffffff_1x400.png
// static/css/images/lightness/ui-bg_gloss-wave_35_f6a828_500x100.png
// static/css/images/lightness/ui-bg_highlight-soft_100_eeeeee_1x100.png
// static/css/images/lightness/ui-bg_highlight-soft_75_ffe45c_1x100.png
// static/css/images/lightness/ui-icons_222222_256x240.png
// static/css/images/lightness/ui-icons_228ef1_256x240.png
// static/css/images/lightness/ui-icons_ef8c08_256x240.png
// static/css/images/lightness/ui-icons_ffd27a_256x240.png
// static/css/images/lightness/ui-icons_ffffff_256x240.png
// static/css/images/loader-small.gif
// static/css/images/loader.gif
// static/css/images/mail.png
// static/css/images/menubutton.png
// static/css/images/metro-icon-down-white.png
// static/css/images/metro-icon-down.png
// static/css/images/metro-icon-first-white.png
// static/css/images/metro-icon-first.png
// static/css/images/metro-icon-last-white.png
// static/css/images/metro-icon-last.png
// static/css/images/metro-icon-left-white.png
// static/css/images/metro-icon-left.png
// static/css/images/metro-icon-right - Copy.png
// static/css/images/metro-icon-right-white.png
// static/css/images/metro-icon-right.png
// static/css/images/metro-icon-up-white.png
// static/css/images/metro-icon-up.png
// static/css/images/multi-arrow.gif
// static/css/images/office-icon-down.png
// static/css/images/office-icon-first.png
// static/css/images/office-icon-last.png
// static/css/images/office-icon-left.png
// static/css/images/office-icon-right.png
// static/css/images/office-icon-up.png
// static/css/images/overcast/ReadMe.txt
// static/css/images/overcast/ui-bg_flat_0_aaaaaa_40x100.png
// static/css/images/overcast/ui-bg_flat_0_eeeeee_40x100.png
// static/css/images/overcast/ui-bg_flat_55_c0402a_40x100.png
// static/css/images/overcast/ui-bg_flat_55_eeeeee_40x100.png
// static/css/images/overcast/ui-bg_glass_100_f8f8f8_1x400.png
// static/css/images/overcast/ui-bg_glass_35_dddddd_1x400.png
// static/css/images/overcast/ui-bg_glass_60_eeeeee_1x400.png
// static/css/images/overcast/ui-bg_inset-hard_75_999999_1x100.png
// static/css/images/overcast/ui-bg_inset-soft_50_c9c9c9_1x100.png
// static/css/images/overcast/ui-icons_3383bb_256x240.png
// static/css/images/overcast/ui-icons_454545_256x240.png
// static/css/images/overcast/ui-icons_70b2e1_256x240.png
// static/css/images/overcast/ui-icons_999999_256x240.png
// static/css/images/overcast/ui-icons_fbc856_256x240.png
// static/css/images/pin-black.png
// static/css/images/pin-blue.png
// static/css/images/pin-lightblue.png
// static/css/images/pin-white.png
// static/css/images/pin-yellow.png
// static/css/images/pin.png
// static/css/images/pinned-black.png
// static/css/images/pinned-blue.png
// static/css/images/pinned-lightblue.png
// static/css/images/pinned-white.png
// static/css/images/pinned-yellow.png
// static/css/images/pinned.png
// static/css/images/plus.png
// static/css/images/plus_white.png
// static/css/images/pointer.png
// static/css/images/rangebar_classic.png
// static/css/images/rangebar_darkblue.png
// static/css/images/rangebar_shinyblack.png
// static/css/images/rangebar_summer.png
// static/css/images/red_arrow_down.png
// static/css/images/red_arrow_up.png
// static/css/images/red_gradient.png
// static/css/images/redmond/ReadMe.txt
// static/css/images/redmond/icon-first.png
// static/css/images/redmond/icon-last.png
// static/css/images/redmond/ui-bg_flat_0_aaaaaa_40x100.png
// static/css/images/redmond/ui-bg_flat_55_fbec88_40x100.png
// static/css/images/redmond/ui-bg_glass_75_d0e5f5_1x400.png
// static/css/images/redmond/ui-bg_glass_85_dfeffc_1x400.png
// static/css/images/redmond/ui-bg_glass_95_fef1ec_1x400.png
// static/css/images/redmond/ui-bg_gloss-wave_55_5c9ccc_500x100.png
// static/css/images/redmond/ui-bg_inset-hard_100_f5f8f9_1x100.png
// static/css/images/redmond/ui-bg_inset-hard_100_fcfdfd_1x100.png
// static/css/images/redmond/ui-icons_217bc0_256x240.png
// static/css/images/redmond/ui-icons_2e83ff_256x240.png
// static/css/images/redmond/ui-icons_469bdd_256x240.png
// static/css/images/redmond/ui-icons_6da8d5_256x240.png
// static/css/images/redmond/ui-icons_cd0a0a_256x240.png
// static/css/images/redmond/ui-icons_d8e7f3_256x240.png
// static/css/images/redmond/ui-icons_f9bd01_256x240.png
// static/css/images/roundbg_check_black.png
// static/css/images/roundbg_check_disabled.png
// static/css/images/roundbg_check_indeterminate.png
// static/css/images/roundbg_check_white.png
// static/css/images/roundbg_classic_hover.png
// static/css/images/roundbg_classic_normal.png
// static/css/images/roundbg_disabled.png
// static/css/images/search.png
// static/css/images/search_white.png
// static/css/images/smoothness/ReadMe.txt
// static/css/images/smoothness/ui-bg_flat_0_aaaaaa_40x100.png
// static/css/images/smoothness/ui-bg_flat_75_ffffff_40x100.png
// static/css/images/smoothness/ui-bg_glass_55_fbf9ee_1x400.png
// static/css/images/smoothness/ui-bg_glass_65_ffffff_1x400.png
// static/css/images/smoothness/ui-bg_glass_75_dadada_1x400.png
// static/css/images/smoothness/ui-bg_glass_75_e6e6e6_1x400.png
// static/css/images/smoothness/ui-bg_glass_95_fef1ec_1x400.png
// static/css/images/smoothness/ui-bg_highlight-soft_75_cccccc_1x100.png
// static/css/images/smoothness/ui-icons_222222_256x240.png
// static/css/images/smoothness/ui-icons_2e83ff_256x240.png
// static/css/images/smoothness/ui-icons_454545_256x240.png
// static/css/images/smoothness/ui-icons_888888_256x240.png
// static/css/images/smoothness/ui-icons_cd0a0a_256x240.png
// static/css/images/sortasc.png
// static/css/images/sortascbutton.png
// static/css/images/sortdesc.png
// static/css/images/sortdescbutton.png
// static/css/images/sortremove.png
// static/css/images/star.png
// static/css/images/star_disabled.png
// static/css/images/star_hover.png
// static/css/images/start/ReadMe.txt
// static/css/images/start/ui-bg_flat_55_999999_40x100.png
// static/css/images/start/ui-bg_flat_75_aaaaaa_40x100.png
// static/css/images/start/ui-bg_glass_45_0078ae_1x400.png
// static/css/images/start/ui-bg_glass_55_f8da4e_1x400.png
// static/css/images/start/ui-bg_glass_75_79c9ec_1x400.png
// static/css/images/start/ui-bg_gloss-wave_45_e14f1c_500x100.png
// static/css/images/start/ui-bg_gloss-wave_50_6eac2c_500x100.png
// static/css/images/start/ui-bg_gloss-wave_75_2191c0_500x100.png
// static/css/images/start/ui-bg_inset-hard_100_fcfdfd_1x100.png
// static/css/images/start/ui-icons_0078ae_256x240.png
// static/css/images/start/ui-icons_056b93_256x240.png
// static/css/images/start/ui-icons_d8e7f3_256x240.png
// static/css/images/start/ui-icons_e0fdff_256x240.png
// static/css/images/start/ui-icons_f5e175_256x240.png
// static/css/images/start/ui-icons_f7a50d_256x240.png
// static/css/images/start/ui-icons_fcd113_256x240.png
// static/css/images/stripes.png
// static/css/images/success.png
// static/css/images/sunny/ReadMe.txt
// static/css/images/sunny/ui-bg_diagonals-medium_20_d34d17_40x40.png
// static/css/images/sunny/ui-bg_flat_30_cccccc_40x100.png
// static/css/images/sunny/ui-bg_flat_50_5c5c5c_40x100.png
// static/css/images/sunny/ui-bg_gloss-wave_45_817865_500x100.png
// static/css/images/sunny/ui-bg_gloss-wave_60_fece2f_500x100.png
// static/css/images/sunny/ui-bg_gloss-wave_70_ffdd57_500x100.png
// static/css/images/sunny/ui-bg_gloss-wave_90_fff9e5_500x100.png
// static/css/images/sunny/ui-bg_highlight-soft_100_feeebd_1x100.png
// static/css/images/sunny/ui-bg_inset-soft_30_ffffff_1x100.png
// static/css/images/sunny/ui-icons_3d3d3d_256x240.png
// static/css/images/sunny/ui-icons_bd7b00_256x240.png
// static/css/images/sunny/ui-icons_d19405_256x240.png
// static/css/images/sunny/ui-icons_eb990f_256x240.png
// static/css/images/sunny/ui-icons_ed9f26_256x240.png
// static/css/images/sunny/ui-icons_fadc7a_256x240.png
// static/css/images/sunny/ui-icons_ffe180_256x240.png
// static/css/images/tick.png
// static/css/images/time.png
// static/css/images/track_classic.png
// static/css/images/track_darkblue.png
// static/css/images/track_shinyblack.png
// static/css/images/track_summer.png
// static/css/images/warning.png
// static/css/images/wp_check_indeterminate_white.png
// static/css/images/wp_check_white.png
// static/css/jquery-ui.custom.min.css
// static/css/jquery-ui.min.css
// static/css/jquery.gritter.min.css
// static/css/jqx.base.css
// static/css/prettify.min.css
// static/css/select2.min.css
// static/css/sweetalert2.css
// static/css/sweetalert2.min.css
// static/css/ui.jqgrid.min.css
// static/font-awesome/4.5.0/css/font-awesome.min.css
// static/font-awesome/4.5.0/fonts/fontawesome-webfont.eot
// static/font-awesome/4.5.0/fonts/fontawesome-webfont.svg
// static/font-awesome/4.5.0/fonts/fontawesome-webfont.ttf
// static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff
// static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff2
// static/fonts/glyphicons-halflings-regular.eot
// static/fonts/glyphicons-halflings-regular.svg
// static/fonts/glyphicons-halflings-regular.ttf
// static/fonts/glyphicons-halflings-regular.woff
// static/fonts/glyphicons-halflings-regular.woff2
// static/foto/EDY_PRASETIYO_1232414142414.png
// static/foto/EDY_PRAS_22_123132131321.png
// static/foto/edy44_nokktp123.png
// static/foto/edy_3_nokktp12333.png
// static/foto/edy_params.png
// static/header.jpg
// static/images/avatars/avatar.png
// static/images/avatars/avatar1.png
// static/images/avatars/avatar2.png
// static/images/avatars/avatar3.png
// static/images/avatars/avatar4.png
// static/images/avatars/avatar5.png
// static/images/avatars/profile-pic.jpg
// static/images/avatars/user.jpg
// static/images/bootstrap-colorpicker/alpha-horizontal.png
// static/images/bootstrap-colorpicker/alpha.png
// static/images/bootstrap-colorpicker/hue-horizontal.png
// static/images/bootstrap-colorpicker/hue.png
// static/images/bootstrap-colorpicker/saturation.png
// static/images/email/email1.png
// static/images/email/email2.png
// static/images/email/email3.png
// static/images/email/email4.png
// static/images/gallery/image-1.jpg
// static/images/gallery/image-2.jpg
// static/images/gallery/image-3.jpg
// static/images/gallery/image-4.jpg
// static/images/gallery/image-5.jpg
// static/images/gallery/image-6.jpg
// static/images/gallery/thumb-1.jpg
// static/images/gallery/thumb-2.jpg
// static/images/gallery/thumb-3.jpg
// static/images/gallery/thumb-4.jpg
// static/images/gallery/thumb-5.jpg
// static/images/gallery/thumb-6.jpg
// static/images/placeholder/165x90.png
// static/images/placeholder/255x150.png
// static/images/placeholder/530x270.png
// static/images/placeholder/550x280.png
// static/js/LOGIN MANAJEMEN LAPAS.html
// static/js/LOGIN MANAJEMEN LAPAS_files/ace-elements.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/ace-extra.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/ace-rtl.min.css
// static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.css
// static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/axios.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-datetimepicker.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-notify.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-table.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.css
// static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/font-awesome.min.css
// static/js/LOGIN MANAJEMEN LAPAS_files/fonts.googleapis.com.css
// static/js/LOGIN MANAJEMEN LAPAS_files/id.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/jquery.inputmask.bundle.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/jquery.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/jquery.serializejson.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/jqx-all.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/jqxcore.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/js.cookie.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/moment-with-locales.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/select2.min.js.download
// static/js/LOGIN MANAJEMEN LAPAS_files/sweetalert2.min.js.download
// static/js/REV._REG_._ANAK_acc_.xls
// static/js/ace-editable.min.js
// static/js/ace-elements.min.js
// static/js/ace-extra.min.js
// static/js/ace.min.js
// static/js/autosize.min.js
// static/js/axios.js
// static/js/axios.min.js
// static/js/bootbox.js
// static/js/bootstrap-colorpicker.min.js
// static/js/bootstrap-datepicker.min.js
// static/js/bootstrap-datetimepicker.min.js
// static/js/bootstrap-editable.min.js
// static/js/bootstrap-markdown.min.js
// static/js/bootstrap-multiselect.min.js
// static/js/bootstrap-notify.min.js
// static/js/bootstrap-table.js
// static/js/bootstrap-tag.min.js
// static/js/bootstrap-timepicker.min.js
// static/js/bootstrap-wysiwyg.min.js
// static/js/bootstrap.min.js
// static/js/buttons.colVis.min.js
// static/js/buttons.flash.min.js
// static/js/buttons.html5.min.js
// static/js/buttons.print.min.js
// static/js/chosen.jquery.min.js
// static/js/dataTables.buttons.min.js
// static/js/dataTables.select.min.js
// static/js/daterangepicker.min.js
// static/js/dropzone.min.js
// static/js/excanvas.min.js
// static/js/fullcalendar.min.js
// static/js/grid.locale-en.js
// static/js/holder.min.js
// static/js/html5shiv.min.js
// static/js/id.js
// static/js/jquery-1.11.3.min.js
// static/js/jquery-2.1.4.min.js
// static/js/jquery-additional-methods.min.js
// static/js/jquery-typeahead.js
// static/js/jquery-ui.custom.min.js
// static/js/jquery-ui.min.js
// static/js/jquery.bootstrap-duallistbox.min.js
// static/js/jquery.colorbox.min.js
// static/js/jquery.dataTables.bootstrap.min.js
// static/js/jquery.dataTables.min.js
// static/js/jquery.easypiechart.min.js
// static/js/jquery.flot.min.js
// static/js/jquery.flot.pie.min.js
// static/js/jquery.flot.resize.min.js
// static/js/jquery.gritter.min.js
// static/js/jquery.hotkeys.index.min.js
// static/js/jquery.inputlimiter.min.js
// static/js/jquery.inputmask.bundle.js
// static/js/jquery.jqGrid.min.js
// static/js/jquery.knob.min.js
// static/js/jquery.maskedinput.min.js
// static/js/jquery.min.js
// static/js/jquery.mobile.custom.min.js
// static/js/jquery.nestable.min.js
// static/js/jquery.raty.min.js
// static/js/jquery.serializejson.min.js
// static/js/jquery.sparkline.index.min.js
// static/js/jquery.ui.touch-punch.min.js
// static/js/jquery.validate.min.js
// static/js/jqx-all.js
// static/js/jqxcore.js
// static/js/js.cookie.min.js
// static/js/markdown.min.js
// static/js/moment-with-locales.min.js
// static/js/moment.min.js
// static/js/prettify.min.js
// static/js/reload.min.js
// static/js/respond.min.js
// static/js/select2.min.js
// static/js/spin.js
// static/js/spinbox.min.js
// static/js/sweetalert2.common.js
// static/js/sweetalert2.js
// static/js/sweetalert2.min.js
// static/js/tree.min.js
// static/js/wizard.min.js
// static/login.jpg
// static/login1.jpg
// static/swf/flashExport.swf
// DO NOT EDIT!

package statik

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticCssAceIeMinCss reads file data from disk. It returns an error on failure.
func staticCssAceIeMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ace-ie.min.css"
	name := "static/css/ace-ie.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAcePart2MinCss reads file data from disk. It returns an error on failure.
func staticCssAcePart2MinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ace-part2.min.css"
	name := "static/css/ace-part2.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAceRtlMinCss reads file data from disk. It returns an error on failure.
func staticCssAceRtlMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ace-rtl.min.css"
	name := "static/css/ace-rtl.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAceSkinsMinCss reads file data from disk. It returns an error on failure.
func staticCssAceSkinsMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ace-skins.min.css"
	name := "static/css/ace-skins.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAceMinCss reads file data from disk. It returns an error on failure.
func staticCssAceMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ace.min.css"
	name := "static/css/ace.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapColorpickerMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapColorpickerMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-colorpicker.min.css"
	name := "static/css/bootstrap-colorpicker.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapDatepicker3MinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapDatepicker3MinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-datepicker3.min.css"
	name := "static/css/bootstrap-datepicker3.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapDatetimepickerMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapDatetimepickerMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-datetimepicker.min.css"
	name := "static/css/bootstrap-datetimepicker.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapDuallistboxMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapDuallistboxMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-duallistbox.min.css"
	name := "static/css/bootstrap-duallistbox.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapEditableMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapEditableMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-editable.min.css"
	name := "static/css/bootstrap-editable.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapMultiselectMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapMultiselectMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-multiselect.min.css"
	name := "static/css/bootstrap-multiselect.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapTableCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapTableCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-table.css"
	name := "static/css/bootstrap-table.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapTimepickerMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapTimepickerMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap-timepicker.min.css"
	name := "static/css/bootstrap-timepicker.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\bootstrap.min.css"
	name := "static/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssChosenMinCss reads file data from disk. It returns an error on failure.
func staticCssChosenMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\chosen.min.css"
	name := "static/css/chosen.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssColorboxMinCss reads file data from disk. It returns an error on failure.
func staticCssColorboxMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\colorbox.min.css"
	name := "static/css/colorbox.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssDaterangepickerMinCss reads file data from disk. It returns an error on failure.
func staticCssDaterangepickerMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\daterangepicker.min.css"
	name := "static/css/daterangepicker.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssDropzoneMinCss reads file data from disk. It returns an error on failure.
func staticCssDropzoneMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\dropzone.min.css"
	name := "static/css/dropzone.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func staticCssFontAwesomeMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\font-awesome.min.css"
	name := "static/css/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsGoogleapisComCss reads file data from disk. It returns an error on failure.
func staticCssFontsGoogleapisComCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\fonts.googleapis.com.css"
	name := "static/css/fonts.googleapis.com.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFullcalendarMinCss reads file data from disk. It returns an error on failure.
func staticCssFullcalendarMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\fullcalendar.min.css"
	name := "static/css/fullcalendar.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBackimagePng reads file data from disk. It returns an error on failure.
func staticCssImagesBackimagePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\backImage.png"
	name := "static/css/images/backImage.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBackgroundtopPng reads file data from disk. It returns an error on failure.
func staticCssImagesBackgroundtopPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\backgroundTop.png"
	name := "static/css/images/backgroundTop.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blackPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_black.png"
	name := "static/css/images/bg_black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_black_horizontalPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_black_horizontalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_black_horizontal.png"
	name := "static/css/images/bg_black_horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blackhoverPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blackhoverPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_blackhover.png"
	name := "static/css/images/bg_blackhover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blackhover_horizontalPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blackhover_horizontalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_blackhover_horizontal.png"
	name := "static/css/images/bg_blackhover_horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blackpressedPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blackpressedPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_blackpressed.png"
	name := "static/css/images/bg_blackpressed.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blackpressed_horizontalPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blackpressed_horizontalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_blackpressed_horizontal.png"
	name := "static/css/images/bg_blackpressed_horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_blueenergyPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_blueenergyPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_blueenergy.png"
	name := "static/css/images/bg_blueenergy.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_darkbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_darkbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_darkblue.png"
	name := "static/css/images/bg_darkblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_darkbluehoverPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_darkbluehoverPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_darkbluehover.png"
	name := "static/css/images/bg_darkbluehover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBg_darkbluepressedPng reads file data from disk. It returns an error on failure.
func staticCssImagesBg_darkbluepressedPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\bg_darkbluepressed.png"
	name := "static/css/images/bg_darkbluepressed.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBlack_gradientPng reads file data from disk. It returns an error on failure.
func staticCssImagesBlack_gradientPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\black_gradient.png"
	name := "static/css/images/black_gradient.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesBlackbackgroundPng reads file data from disk. It returns an error on failure.
func staticCssImagesBlackbackgroundPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\blackbackground.png"
	name := "static/css/images/blackbackground.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_blackPng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_blackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_black.png"
	name := "static/css/images/check_black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_bluePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_bluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_blue.png"
	name := "static/css/images/check_blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_blue_indeterminatePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_blue_indeterminatePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_blue_indeterminate.png"
	name := "static/css/images/check_blue_indeterminate.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_disabledPng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_disabledPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_disabled.png"
	name := "static/css/images/check_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_indeterminate_blackPng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_indeterminate_blackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_indeterminate_black.png"
	name := "static/css/images/check_indeterminate_black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_indeterminate_disabledPng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_indeterminate_disabledPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_indeterminate_disabled.png"
	name := "static/css/images/check_indeterminate_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_indeterminate_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_indeterminate_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_indeterminate_white.png"
	name := "static/css/images/check_indeterminate_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_lightbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_lightbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_lightblue.png"
	name := "static/css/images/check_lightblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_lightblue_indeterminatePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_lightblue_indeterminatePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_lightblue_indeterminate.png"
	name := "static/css/images/check_lightblue_indeterminate.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCheck_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesCheck_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\check_white.png"
	name := "static/css/images/check_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesClosePng reads file data from disk. It returns an error on failure.
func staticCssImagesClosePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\close.png"
	name := "static/css/images/close.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesClose_blackPng reads file data from disk. It returns an error on failure.
func staticCssImagesClose_blackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\close_black.png"
	name := "static/css/images/close_black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesClose_bluePng reads file data from disk. It returns an error on failure.
func staticCssImagesClose_bluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\close_blue.png"
	name := "static/css/images/close_blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesClose_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesClose_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\close_white.png"
	name := "static/css/images/close_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\ReadMe.txt"
	name := "static/css/images/colorpicker/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerBarHuePng reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerBarHuePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\bar-hue.png"
	name := "static/css/images/colorpicker/bar-hue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerBarSaturationPng reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerBarSaturationPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\bar-saturation.png"
	name := "static/css/images/colorpicker/bar-saturation.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerMapHuePng reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerMapHuePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\map-hue.png"
	name := "static/css/images/colorpicker/map-hue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerMapSaturationOverlayPng reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerMapSaturationOverlayPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\map-saturation-overlay.png"
	name := "static/css/images/colorpicker/map-saturation-overlay.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesColorpickerMapSaturationPng reads file data from disk. It returns an error on failure.
func staticCssImagesColorpickerMapSaturationPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\colorpicker\\map-saturation.png"
	name := "static/css/images/colorpicker/map-saturation.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCommonPng reads file data from disk. It returns an error on failure.
func staticCssImagesCommonPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\common.png"
	name := "static/css/images/common.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCrosshairWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesCrosshairWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\crosshair-white.png"
	name := "static/css/images/crosshair-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesCrosshairPng reads file data from disk. It returns an error on failure.
func staticCssImagesCrosshairPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\crosshair.png"
	name := "static/css/images/crosshair.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ReadMe.txt"
	name := "static/css/images/darkness/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_flat_30_cccccc_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_flat_30_cccccc_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_flat_30_cccccc_40x100.png"
	name := "static/css/images/darkness/ui-bg_flat_30_cccccc_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_flat_50_5c5c5c_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_flat_50_5c5c5c_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_flat_50_5c5c5c_40x100.png"
	name := "static/css/images/darkness/ui-bg_flat_50_5c5c5c_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_glass_20_555555_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_glass_20_555555_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_glass_20_555555_1x400.png"
	name := "static/css/images/darkness/ui-bg_glass_20_555555_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_glass_40_0078a3_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_glass_40_0078a3_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_glass_40_0078a3_1x400.png"
	name := "static/css/images/darkness/ui-bg_glass_40_0078a3_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_glass_40_ffc73d_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_glass_40_ffc73d_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_glass_40_ffc73d_1x400.png"
	name := "static/css/images/darkness/ui-bg_glass_40_ffc73d_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_glossWave_25_333333_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_glossWave_25_333333_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_gloss-wave_25_333333_500x100.png"
	name := "static/css/images/darkness/ui-bg_gloss-wave_25_333333_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_highlightSoft_80_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_highlightSoft_80_eeeeee_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_highlight-soft_80_eeeeee_1x100.png"
	name := "static/css/images/darkness/ui-bg_highlight-soft_80_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_insetSoft_25_000000_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_insetSoft_25_000000_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_inset-soft_25_000000_1x100.png"
	name := "static/css/images/darkness/ui-bg_inset-soft_25_000000_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiBg_insetSoft_30_f58400_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiBg_insetSoft_30_f58400_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-bg_inset-soft_30_f58400_1x100.png"
	name := "static/css/images/darkness/ui-bg_inset-soft_30_f58400_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiIcons_222222_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-icons_222222_256x240.png"
	name := "static/css/images/darkness/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiIcons_4b8e0b_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiIcons_4b8e0b_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-icons_4b8e0b_256x240.png"
	name := "static/css/images/darkness/ui-icons_4b8e0b_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiIcons_a83300_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiIcons_a83300_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-icons_a83300_256x240.png"
	name := "static/css/images/darkness/ui-icons_a83300_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiIcons_cccccc_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiIcons_cccccc_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-icons_cccccc_256x240.png"
	name := "static/css/images/darkness/ui-icons_cccccc_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarknessUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesDarknessUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkness\\ui-icons_ffffff_256x240.png"
	name := "static/css/images/darkness/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDarkred_gradientPng reads file data from disk. It returns an error on failure.
func staticCssImagesDarkred_gradientPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\darkred_gradient.png"
	name := "static/css/images/darkred_gradient.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDragPng reads file data from disk. It returns an error on failure.
func staticCssImagesDragPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\drag.png"
	name := "static/css/images/drag.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesDragcancelPng reads file data from disk. It returns an error on failure.
func staticCssImagesDragcancelPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\dragcancel.png"
	name := "static/css/images/dragcancel.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesErrorPng reads file data from disk. It returns an error on failure.
func staticCssImagesErrorPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\error.png"
	name := "static/css/images/error.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesFilterPng reads file data from disk. It returns an error on failure.
func staticCssImagesFilterPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\filter.png"
	name := "static/css/images/filter.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesHtml_editorPng reads file data from disk. It returns an error on failure.
func staticCssImagesHtml_editorPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\html_editor.png"
	name := "static/css/images/html_editor.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesHtml_editor_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesHtml_editor_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\html_editor_white.png"
	name := "static/css/images/html_editor_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconCalendarWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconCalendarWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-calendar-white.png"
	name := "static/css/images/icon-calendar-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconCalendarPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconCalendarPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-calendar.png"
	name := "static/css/images/icon-calendar.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconCancelWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconCancelWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-cancel-white.png"
	name := "static/css/images/icon-cancel-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconCancelPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconCancelPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-cancel.png"
	name := "static/css/images/icon-cancel.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDeleteWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDeleteWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-delete-white.png"
	name := "static/css/images/icon-delete-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDeletePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDeletePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-delete.png"
	name := "static/css/images/icon-delete.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDownBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDownBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-down-blue.png"
	name := "static/css/images/icon-down-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDownTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDownTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-down-transparent.png"
	name := "static/css/images/icon-down-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDownWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDownWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-down-white.png"
	name := "static/css/images/icon-down-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconDownPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconDownPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-down.png"
	name := "static/css/images/icon-down.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconEditWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconEditWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-edit-white.png"
	name := "static/css/images/icon-edit-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconEditPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconEditPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-edit.png"
	name := "static/css/images/icon-edit.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconFirstBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconFirstBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-first-blue.png"
	name := "static/css/images/icon-first-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconFirstTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconFirstTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-first-transparent.png"
	name := "static/css/images/icon-first-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconFirstWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconFirstWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-first-white.png"
	name := "static/css/images/icon-first-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconFirstPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconFirstPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-first.png"
	name := "static/css/images/icon-first.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLastBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLastBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-last-blue.png"
	name := "static/css/images/icon-last-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLastTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLastTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-last-transparent.png"
	name := "static/css/images/icon-last-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLastWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLastWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-last-white.png"
	name := "static/css/images/icon-last-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLastPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLastPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-last.png"
	name := "static/css/images/icon-last.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLeftBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLeftBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-left-blue.png"
	name := "static/css/images/icon-left-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLeftTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLeftTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-left-transparent.png"
	name := "static/css/images/icon-left-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLeftWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLeftWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-left-white.png"
	name := "static/css/images/icon-left-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconLeftPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconLeftPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-left.png"
	name := "static/css/images/icon-left.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconMenuMinimizedWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconMenuMinimizedWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-menu-minimized-white.png"
	name := "static/css/images/icon-menu-minimized-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconMenuMinimizedPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconMenuMinimizedPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-menu-minimized.png"
	name := "static/css/images/icon-menu-minimized.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconPlusWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconPlusWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-plus-white.png"
	name := "static/css/images/icon-plus-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconPlusPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconPlusPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-plus.png"
	name := "static/css/images/icon-plus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRecurrenceExceptionWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRecurrenceExceptionWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-recurrence-exception-white.png"
	name := "static/css/images/icon-recurrence-exception-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRecurrenceExceptionPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRecurrenceExceptionPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-recurrence-exception.png"
	name := "static/css/images/icon-recurrence-exception.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRecurrenceWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRecurrenceWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-recurrence-white.png"
	name := "static/css/images/icon-recurrence-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRecurrencePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRecurrencePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-recurrence.png"
	name := "static/css/images/icon-recurrence.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRightBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRightBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-right-blue.png"
	name := "static/css/images/icon-right-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRightTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRightTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-right-transparent.png"
	name := "static/css/images/icon-right-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRightWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRightWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-right-white.png"
	name := "static/css/images/icon-right-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconRightPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconRightPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-right.png"
	name := "static/css/images/icon-right.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconSaveWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconSaveWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-save-white.png"
	name := "static/css/images/icon-save-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconSavePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconSavePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-save.png"
	name := "static/css/images/icon-save.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconShowpasswordWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconShowpasswordWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-showpassword-white.png"
	name := "static/css/images/icon-showpassword-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconShowpasswordPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconShowpasswordPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-showpassword.png"
	name := "static/css/images/icon-showpassword.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconTimeWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconTimeWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-time-white.png"
	name := "static/css/images/icon-time-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconTimePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconTimePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-time.png"
	name := "static/css/images/icon-time.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconUpBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconUpBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-up-blue.png"
	name := "static/css/images/icon-up-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconUpTransparentPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconUpTransparentPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-up-transparent.png"
	name := "static/css/images/icon-up-transparent.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconUpWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesIconUpWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-up-white.png"
	name := "static/css/images/icon-up-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesIconUpPng reads file data from disk. It returns an error on failure.
func staticCssImagesIconUpPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\icon-up.png"
	name := "static/css/images/icon-up.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesInfoPng reads file data from disk. It returns an error on failure.
func staticCssImagesInfoPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\info.png"
	name := "static/css/images/info.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ReadMe.txt"
	name := "static/css/images/le-frog/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_diagonalsSmall_0_aaaaaa_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_diagonalsSmall_0_aaaaaa_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_diagonals-small_0_aaaaaa_40x40.png"
	name := "static/css/images/le-frog/ui-bg_diagonals-small_0_aaaaaa_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_diagonalsThick_15_444444_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_diagonalsThick_15_444444_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_diagonals-thick_15_444444_40x40.png"
	name := "static/css/images/le-frog/ui-bg_diagonals-thick_15_444444_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_diagonalsThick_95_ffdc2e_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_diagonalsThick_95_ffdc2e_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_diagonals-thick_95_ffdc2e_40x40.png"
	name := "static/css/images/le-frog/ui-bg_diagonals-thick_95_ffdc2e_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_glass_55_fbf5d0_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_glass_55_fbf5d0_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_glass_55_fbf5d0_1x400.png"
	name := "static/css/images/le-frog/ui-bg_glass_55_fbf5d0_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_highlightHard_30_285c00_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_highlightHard_30_285c00_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_highlight-hard_30_285c00_1x100.png"
	name := "static/css/images/le-frog/ui-bg_highlight-hard_30_285c00_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_highlightSoft_33_3a8104_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_highlightSoft_33_3a8104_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_highlight-soft_33_3a8104_1x100.png"
	name := "static/css/images/le-frog/ui-bg_highlight-soft_33_3a8104_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_highlightSoft_50_4eb305_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_highlightSoft_50_4eb305_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_highlight-soft_50_4eb305_1x100.png"
	name := "static/css/images/le-frog/ui-bg_highlight-soft_50_4eb305_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_highlightSoft_60_4ca20b_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_highlightSoft_60_4ca20b_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_highlight-soft_60_4ca20b_1x100.png"
	name := "static/css/images/le-frog/ui-bg_highlight-soft_60_4ca20b_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiBg_insetSoft_10_285c00_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiBg_insetSoft_10_285c00_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-bg_inset-soft_10_285c00_1x100.png"
	name := "static/css/images/le-frog/ui-bg_inset-soft_10_285c00_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiIcons_4eb305_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiIcons_4eb305_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-icons_4eb305_256x240.png"
	name := "static/css/images/le-frog/ui-icons_4eb305_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiIcons_72b42d_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiIcons_72b42d_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-icons_72b42d_256x240.png"
	name := "static/css/images/le-frog/ui-icons_72b42d_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiIcons_cd0a0a_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiIcons_cd0a0a_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-icons_cd0a0a_256x240.png"
	name := "static/css/images/le-frog/ui-icons_cd0a0a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLeFrogUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLeFrogUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\le-frog\\ui-icons_ffffff_256x240.png"
	name := "static/css/images/le-frog/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ReadMe.txt"
	name := "static/css/images/lightness/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessIconFirstPng reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessIconFirstPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\icon-first.png"
	name := "static/css/images/lightness/icon-first.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessIconLastPng reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessIconLastPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\icon-last.png"
	name := "static/css/images/lightness/icon-last.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_diagonalsThick_18_b81900_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_diagonalsThick_18_b81900_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_diagonals-thick_18_b81900_40x40.png"
	name := "static/css/images/lightness/ui-bg_diagonals-thick_18_b81900_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_diagonalsThick_20_666666_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_diagonalsThick_20_666666_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_diagonals-thick_20_666666_40x40.png"
	name := "static/css/images/lightness/ui-bg_diagonals-thick_20_666666_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_flat_10_000000_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_flat_10_000000_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_flat_10_000000_40x100.png"
	name := "static/css/images/lightness/ui-bg_flat_10_000000_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_glass_100_f6f6f6_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_glass_100_f6f6f6_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_glass_100_f6f6f6_1x400.png"
	name := "static/css/images/lightness/ui-bg_glass_100_f6f6f6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_glass_100_fdf5ce_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_glass_100_fdf5ce_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_glass_100_fdf5ce_1x400.png"
	name := "static/css/images/lightness/ui-bg_glass_100_fdf5ce_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_glass_65_ffffff_1x400.png"
	name := "static/css/images/lightness/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_glossWave_35_f6a828_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_glossWave_35_f6a828_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_gloss-wave_35_f6a828_500x100.png"
	name := "static/css/images/lightness/ui-bg_gloss-wave_35_f6a828_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_highlightSoft_100_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_highlightSoft_100_eeeeee_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_highlight-soft_100_eeeeee_1x100.png"
	name := "static/css/images/lightness/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiBg_highlightSoft_75_ffe45c_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiBg_highlightSoft_75_ffe45c_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-bg_highlight-soft_75_ffe45c_1x100.png"
	name := "static/css/images/lightness/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiIcons_222222_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-icons_222222_256x240.png"
	name := "static/css/images/lightness/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiIcons_228ef1_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiIcons_228ef1_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-icons_228ef1_256x240.png"
	name := "static/css/images/lightness/ui-icons_228ef1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiIcons_ef8c08_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiIcons_ef8c08_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-icons_ef8c08_256x240.png"
	name := "static/css/images/lightness/ui-icons_ef8c08_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiIcons_ffd27a_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiIcons_ffd27a_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-icons_ffd27a_256x240.png"
	name := "static/css/images/lightness/ui-icons_ffd27a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLightnessUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesLightnessUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\lightness\\ui-icons_ffffff_256x240.png"
	name := "static/css/images/lightness/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLoaderSmallGif reads file data from disk. It returns an error on failure.
func staticCssImagesLoaderSmallGif() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\loader-small.gif"
	name := "static/css/images/loader-small.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesLoaderGif reads file data from disk. It returns an error on failure.
func staticCssImagesLoaderGif() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\loader.gif"
	name := "static/css/images/loader.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMailPng reads file data from disk. It returns an error on failure.
func staticCssImagesMailPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\mail.png"
	name := "static/css/images/mail.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMenubuttonPng reads file data from disk. It returns an error on failure.
func staticCssImagesMenubuttonPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\menubutton.png"
	name := "static/css/images/menubutton.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconDownWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconDownWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-down-white.png"
	name := "static/css/images/metro-icon-down-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconDownPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconDownPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-down.png"
	name := "static/css/images/metro-icon-down.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconFirstWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconFirstWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-first-white.png"
	name := "static/css/images/metro-icon-first-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconFirstPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconFirstPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-first.png"
	name := "static/css/images/metro-icon-first.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconLastWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconLastWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-last-white.png"
	name := "static/css/images/metro-icon-last-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconLastPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconLastPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-last.png"
	name := "static/css/images/metro-icon-last.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconLeftWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconLeftWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-left-white.png"
	name := "static/css/images/metro-icon-left-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconLeftPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconLeftPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-left.png"
	name := "static/css/images/metro-icon-left.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconRightCopyPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconRightCopyPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-right - Copy.png"
	name := "static/css/images/metro-icon-right - Copy.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconRightWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconRightWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-right-white.png"
	name := "static/css/images/metro-icon-right-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconRightPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconRightPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-right.png"
	name := "static/css/images/metro-icon-right.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconUpWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconUpWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-up-white.png"
	name := "static/css/images/metro-icon-up-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMetroIconUpPng reads file data from disk. It returns an error on failure.
func staticCssImagesMetroIconUpPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\metro-icon-up.png"
	name := "static/css/images/metro-icon-up.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesMultiArrowGif reads file data from disk. It returns an error on failure.
func staticCssImagesMultiArrowGif() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\multi-arrow.gif"
	name := "static/css/images/multi-arrow.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconDownPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconDownPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-down.png"
	name := "static/css/images/office-icon-down.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconFirstPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconFirstPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-first.png"
	name := "static/css/images/office-icon-first.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconLastPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconLastPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-last.png"
	name := "static/css/images/office-icon-last.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconLeftPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconLeftPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-left.png"
	name := "static/css/images/office-icon-left.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconRightPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconRightPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-right.png"
	name := "static/css/images/office-icon-right.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOfficeIconUpPng reads file data from disk. It returns an error on failure.
func staticCssImagesOfficeIconUpPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\office-icon-up.png"
	name := "static/css/images/office-icon-up.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ReadMe.txt"
	name := "static/css/images/overcast/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_flat_0_aaaaaa_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_flat_0_aaaaaa_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_flat_0_aaaaaa_40x100.png"
	name := "static/css/images/overcast/ui-bg_flat_0_aaaaaa_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_flat_0_eeeeee_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_flat_0_eeeeee_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_flat_0_eeeeee_40x100.png"
	name := "static/css/images/overcast/ui-bg_flat_0_eeeeee_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_flat_55_c0402a_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_flat_55_c0402a_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_flat_55_c0402a_40x100.png"
	name := "static/css/images/overcast/ui-bg_flat_55_c0402a_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_flat_55_eeeeee_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_flat_55_eeeeee_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_flat_55_eeeeee_40x100.png"
	name := "static/css/images/overcast/ui-bg_flat_55_eeeeee_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_glass_100_f8f8f8_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_glass_100_f8f8f8_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_glass_100_f8f8f8_1x400.png"
	name := "static/css/images/overcast/ui-bg_glass_100_f8f8f8_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_glass_35_dddddd_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_glass_35_dddddd_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_glass_35_dddddd_1x400.png"
	name := "static/css/images/overcast/ui-bg_glass_35_dddddd_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_glass_60_eeeeee_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_glass_60_eeeeee_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_glass_60_eeeeee_1x400.png"
	name := "static/css/images/overcast/ui-bg_glass_60_eeeeee_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_insetHard_75_999999_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_insetHard_75_999999_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_inset-hard_75_999999_1x100.png"
	name := "static/css/images/overcast/ui-bg_inset-hard_75_999999_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiBg_insetSoft_50_c9c9c9_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiBg_insetSoft_50_c9c9c9_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-bg_inset-soft_50_c9c9c9_1x100.png"
	name := "static/css/images/overcast/ui-bg_inset-soft_50_c9c9c9_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiIcons_3383bb_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiIcons_3383bb_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-icons_3383bb_256x240.png"
	name := "static/css/images/overcast/ui-icons_3383bb_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiIcons_454545_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiIcons_454545_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-icons_454545_256x240.png"
	name := "static/css/images/overcast/ui-icons_454545_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiIcons_70b2e1_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiIcons_70b2e1_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-icons_70b2e1_256x240.png"
	name := "static/css/images/overcast/ui-icons_70b2e1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiIcons_999999_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiIcons_999999_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-icons_999999_256x240.png"
	name := "static/css/images/overcast/ui-icons_999999_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesOvercastUiIcons_fbc856_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesOvercastUiIcons_fbc856_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\overcast\\ui-icons_fbc856_256x240.png"
	name := "static/css/images/overcast/ui-icons_fbc856_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinBlackPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinBlackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin-black.png"
	name := "static/css/images/pin-black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin-blue.png"
	name := "static/css/images/pin-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinLightbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinLightbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin-lightblue.png"
	name := "static/css/images/pin-lightblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin-white.png"
	name := "static/css/images/pin-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinYellowPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinYellowPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin-yellow.png"
	name := "static/css/images/pin-yellow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pin.png"
	name := "static/css/images/pin.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedBlackPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedBlackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned-black.png"
	name := "static/css/images/pinned-black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedBluePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedBluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned-blue.png"
	name := "static/css/images/pinned-blue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedLightbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedLightbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned-lightblue.png"
	name := "static/css/images/pinned-lightblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedWhitePng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedWhitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned-white.png"
	name := "static/css/images/pinned-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedYellowPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedYellowPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned-yellow.png"
	name := "static/css/images/pinned-yellow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPinnedPng reads file data from disk. It returns an error on failure.
func staticCssImagesPinnedPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pinned.png"
	name := "static/css/images/pinned.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPlusPng reads file data from disk. It returns an error on failure.
func staticCssImagesPlusPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\plus.png"
	name := "static/css/images/plus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPlus_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesPlus_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\plus_white.png"
	name := "static/css/images/plus_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesPointerPng reads file data from disk. It returns an error on failure.
func staticCssImagesPointerPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\pointer.png"
	name := "static/css/images/pointer.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRangebar_classicPng reads file data from disk. It returns an error on failure.
func staticCssImagesRangebar_classicPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\rangebar_classic.png"
	name := "static/css/images/rangebar_classic.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRangebar_darkbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesRangebar_darkbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\rangebar_darkblue.png"
	name := "static/css/images/rangebar_darkblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRangebar_shinyblackPng reads file data from disk. It returns an error on failure.
func staticCssImagesRangebar_shinyblackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\rangebar_shinyblack.png"
	name := "static/css/images/rangebar_shinyblack.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRangebar_summerPng reads file data from disk. It returns an error on failure.
func staticCssImagesRangebar_summerPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\rangebar_summer.png"
	name := "static/css/images/rangebar_summer.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRed_arrow_downPng reads file data from disk. It returns an error on failure.
func staticCssImagesRed_arrow_downPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\red_arrow_down.png"
	name := "static/css/images/red_arrow_down.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRed_arrow_upPng reads file data from disk. It returns an error on failure.
func staticCssImagesRed_arrow_upPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\red_arrow_up.png"
	name := "static/css/images/red_arrow_up.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRed_gradientPng reads file data from disk. It returns an error on failure.
func staticCssImagesRed_gradientPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\red_gradient.png"
	name := "static/css/images/red_gradient.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ReadMe.txt"
	name := "static/css/images/redmond/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondIconFirstPng reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondIconFirstPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\icon-first.png"
	name := "static/css/images/redmond/icon-first.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondIconLastPng reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondIconLastPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\icon-last.png"
	name := "static/css/images/redmond/icon-last.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_flat_0_aaaaaa_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_flat_0_aaaaaa_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_flat_0_aaaaaa_40x100.png"
	name := "static/css/images/redmond/ui-bg_flat_0_aaaaaa_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_flat_55_fbec88_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_flat_55_fbec88_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_flat_55_fbec88_40x100.png"
	name := "static/css/images/redmond/ui-bg_flat_55_fbec88_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_glass_75_d0e5f5_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_glass_75_d0e5f5_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_glass_75_d0e5f5_1x400.png"
	name := "static/css/images/redmond/ui-bg_glass_75_d0e5f5_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_glass_85_dfeffc_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_glass_85_dfeffc_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_glass_85_dfeffc_1x400.png"
	name := "static/css/images/redmond/ui-bg_glass_85_dfeffc_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_glass_95_fef1ec_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_glass_95_fef1ec_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_glass_95_fef1ec_1x400.png"
	name := "static/css/images/redmond/ui-bg_glass_95_fef1ec_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_glossWave_55_5c9ccc_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_glossWave_55_5c9ccc_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_gloss-wave_55_5c9ccc_500x100.png"
	name := "static/css/images/redmond/ui-bg_gloss-wave_55_5c9ccc_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_insetHard_100_f5f8f9_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_insetHard_100_f5f8f9_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_inset-hard_100_f5f8f9_1x100.png"
	name := "static/css/images/redmond/ui-bg_inset-hard_100_f5f8f9_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiBg_insetHard_100_fcfdfd_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiBg_insetHard_100_fcfdfd_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-bg_inset-hard_100_fcfdfd_1x100.png"
	name := "static/css/images/redmond/ui-bg_inset-hard_100_fcfdfd_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_217bc0_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_217bc0_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_217bc0_256x240.png"
	name := "static/css/images/redmond/ui-icons_217bc0_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_2e83ff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_2e83ff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_2e83ff_256x240.png"
	name := "static/css/images/redmond/ui-icons_2e83ff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_469bdd_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_469bdd_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_469bdd_256x240.png"
	name := "static/css/images/redmond/ui-icons_469bdd_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_6da8d5_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_6da8d5_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_6da8d5_256x240.png"
	name := "static/css/images/redmond/ui-icons_6da8d5_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_cd0a0a_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_cd0a0a_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_cd0a0a_256x240.png"
	name := "static/css/images/redmond/ui-icons_cd0a0a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_d8e7f3_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_d8e7f3_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_d8e7f3_256x240.png"
	name := "static/css/images/redmond/ui-icons_d8e7f3_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRedmondUiIcons_f9bd01_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesRedmondUiIcons_f9bd01_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\redmond\\ui-icons_f9bd01_256x240.png"
	name := "static/css/images/redmond/ui-icons_f9bd01_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_check_blackPng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_check_blackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_check_black.png"
	name := "static/css/images/roundbg_check_black.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_check_disabledPng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_check_disabledPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_check_disabled.png"
	name := "static/css/images/roundbg_check_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_check_indeterminatePng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_check_indeterminatePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_check_indeterminate.png"
	name := "static/css/images/roundbg_check_indeterminate.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_check_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_check_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_check_white.png"
	name := "static/css/images/roundbg_check_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_classic_hoverPng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_classic_hoverPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_classic_hover.png"
	name := "static/css/images/roundbg_classic_hover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_classic_normalPng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_classic_normalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_classic_normal.png"
	name := "static/css/images/roundbg_classic_normal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesRoundbg_disabledPng reads file data from disk. It returns an error on failure.
func staticCssImagesRoundbg_disabledPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\roundbg_disabled.png"
	name := "static/css/images/roundbg_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSearchPng reads file data from disk. It returns an error on failure.
func staticCssImagesSearchPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\search.png"
	name := "static/css/images/search.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSearch_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesSearch_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\search_white.png"
	name := "static/css/images/search_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ReadMe.txt"
	name := "static/css/images/smoothness/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_flat_0_aaaaaa_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_flat_0_aaaaaa_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_flat_0_aaaaaa_40x100.png"
	name := "static/css/images/smoothness/ui-bg_flat_0_aaaaaa_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_flat_75_ffffff_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_flat_75_ffffff_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_flat_75_ffffff_40x100.png"
	name := "static/css/images/smoothness/ui-bg_flat_75_ffffff_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_glass_55_fbf9ee_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_glass_55_fbf9ee_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_glass_55_fbf9ee_1x400.png"
	name := "static/css/images/smoothness/ui-bg_glass_55_fbf9ee_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_glass_65_ffffff_1x400.png"
	name := "static/css/images/smoothness/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_glass_75_dadada_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_glass_75_dadada_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_glass_75_dadada_1x400.png"
	name := "static/css/images/smoothness/ui-bg_glass_75_dadada_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_glass_75_e6e6e6_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_glass_75_e6e6e6_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_glass_75_e6e6e6_1x400.png"
	name := "static/css/images/smoothness/ui-bg_glass_75_e6e6e6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_glass_95_fef1ec_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_glass_95_fef1ec_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_glass_95_fef1ec_1x400.png"
	name := "static/css/images/smoothness/ui-bg_glass_95_fef1ec_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiBg_highlightSoft_75_cccccc_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiBg_highlightSoft_75_cccccc_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-bg_highlight-soft_75_cccccc_1x100.png"
	name := "static/css/images/smoothness/ui-bg_highlight-soft_75_cccccc_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiIcons_222222_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-icons_222222_256x240.png"
	name := "static/css/images/smoothness/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiIcons_2e83ff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiIcons_2e83ff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-icons_2e83ff_256x240.png"
	name := "static/css/images/smoothness/ui-icons_2e83ff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiIcons_454545_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiIcons_454545_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-icons_454545_256x240.png"
	name := "static/css/images/smoothness/ui-icons_454545_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiIcons_888888_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiIcons_888888_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-icons_888888_256x240.png"
	name := "static/css/images/smoothness/ui-icons_888888_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSmoothnessUiIcons_cd0a0a_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSmoothnessUiIcons_cd0a0a_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\smoothness\\ui-icons_cd0a0a_256x240.png"
	name := "static/css/images/smoothness/ui-icons_cd0a0a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSortascPng reads file data from disk. It returns an error on failure.
func staticCssImagesSortascPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sortasc.png"
	name := "static/css/images/sortasc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSortascbuttonPng reads file data from disk. It returns an error on failure.
func staticCssImagesSortascbuttonPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sortascbutton.png"
	name := "static/css/images/sortascbutton.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSortdescPng reads file data from disk. It returns an error on failure.
func staticCssImagesSortdescPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sortdesc.png"
	name := "static/css/images/sortdesc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSortdescbuttonPng reads file data from disk. It returns an error on failure.
func staticCssImagesSortdescbuttonPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sortdescbutton.png"
	name := "static/css/images/sortdescbutton.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSortremovePng reads file data from disk. It returns an error on failure.
func staticCssImagesSortremovePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sortremove.png"
	name := "static/css/images/sortremove.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStarPng reads file data from disk. It returns an error on failure.
func staticCssImagesStarPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\star.png"
	name := "static/css/images/star.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStar_disabledPng reads file data from disk. It returns an error on failure.
func staticCssImagesStar_disabledPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\star_disabled.png"
	name := "static/css/images/star_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStar_hoverPng reads file data from disk. It returns an error on failure.
func staticCssImagesStar_hoverPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\star_hover.png"
	name := "static/css/images/star_hover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesStartReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ReadMe.txt"
	name := "static/css/images/start/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_flat_55_999999_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_flat_55_999999_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_flat_55_999999_40x100.png"
	name := "static/css/images/start/ui-bg_flat_55_999999_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_flat_75_aaaaaa_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_flat_75_aaaaaa_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_flat_75_aaaaaa_40x100.png"
	name := "static/css/images/start/ui-bg_flat_75_aaaaaa_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glass_45_0078ae_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glass_45_0078ae_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_glass_45_0078ae_1x400.png"
	name := "static/css/images/start/ui-bg_glass_45_0078ae_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glass_55_f8da4e_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glass_55_f8da4e_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_glass_55_f8da4e_1x400.png"
	name := "static/css/images/start/ui-bg_glass_55_f8da4e_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glass_75_79c9ec_1x400Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glass_75_79c9ec_1x400Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_glass_75_79c9ec_1x400.png"
	name := "static/css/images/start/ui-bg_glass_75_79c9ec_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glossWave_45_e14f1c_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glossWave_45_e14f1c_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_gloss-wave_45_e14f1c_500x100.png"
	name := "static/css/images/start/ui-bg_gloss-wave_45_e14f1c_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glossWave_50_6eac2c_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glossWave_50_6eac2c_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_gloss-wave_50_6eac2c_500x100.png"
	name := "static/css/images/start/ui-bg_gloss-wave_50_6eac2c_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_glossWave_75_2191c0_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_glossWave_75_2191c0_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_gloss-wave_75_2191c0_500x100.png"
	name := "static/css/images/start/ui-bg_gloss-wave_75_2191c0_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiBg_insetHard_100_fcfdfd_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiBg_insetHard_100_fcfdfd_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-bg_inset-hard_100_fcfdfd_1x100.png"
	name := "static/css/images/start/ui-bg_inset-hard_100_fcfdfd_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_0078ae_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_0078ae_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_0078ae_256x240.png"
	name := "static/css/images/start/ui-icons_0078ae_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_056b93_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_056b93_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_056b93_256x240.png"
	name := "static/css/images/start/ui-icons_056b93_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_d8e7f3_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_d8e7f3_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_d8e7f3_256x240.png"
	name := "static/css/images/start/ui-icons_d8e7f3_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_e0fdff_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_e0fdff_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_e0fdff_256x240.png"
	name := "static/css/images/start/ui-icons_e0fdff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_f5e175_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_f5e175_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_f5e175_256x240.png"
	name := "static/css/images/start/ui-icons_f5e175_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_f7a50d_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_f7a50d_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_f7a50d_256x240.png"
	name := "static/css/images/start/ui-icons_f7a50d_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStartUiIcons_fcd113_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesStartUiIcons_fcd113_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\start\\ui-icons_fcd113_256x240.png"
	name := "static/css/images/start/ui-icons_fcd113_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesStripesPng reads file data from disk. It returns an error on failure.
func staticCssImagesStripesPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\stripes.png"
	name := "static/css/images/stripes.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSuccessPng reads file data from disk. It returns an error on failure.
func staticCssImagesSuccessPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\success.png"
	name := "static/css/images/success.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyReadmeTxt reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyReadmeTxt() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ReadMe.txt"
	name := "static/css/images/sunny/ReadMe.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_diagonalsMedium_20_d34d17_40x40Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_diagonalsMedium_20_d34d17_40x40Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_diagonals-medium_20_d34d17_40x40.png"
	name := "static/css/images/sunny/ui-bg_diagonals-medium_20_d34d17_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_flat_30_cccccc_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_flat_30_cccccc_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_flat_30_cccccc_40x100.png"
	name := "static/css/images/sunny/ui-bg_flat_30_cccccc_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_flat_50_5c5c5c_40x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_flat_50_5c5c5c_40x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_flat_50_5c5c5c_40x100.png"
	name := "static/css/images/sunny/ui-bg_flat_50_5c5c5c_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_glossWave_45_817865_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_glossWave_45_817865_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_gloss-wave_45_817865_500x100.png"
	name := "static/css/images/sunny/ui-bg_gloss-wave_45_817865_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_glossWave_60_fece2f_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_glossWave_60_fece2f_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_gloss-wave_60_fece2f_500x100.png"
	name := "static/css/images/sunny/ui-bg_gloss-wave_60_fece2f_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_glossWave_70_ffdd57_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_glossWave_70_ffdd57_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_gloss-wave_70_ffdd57_500x100.png"
	name := "static/css/images/sunny/ui-bg_gloss-wave_70_ffdd57_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_glossWave_90_fff9e5_500x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_glossWave_90_fff9e5_500x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_gloss-wave_90_fff9e5_500x100.png"
	name := "static/css/images/sunny/ui-bg_gloss-wave_90_fff9e5_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_highlightSoft_100_feeebd_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_highlightSoft_100_feeebd_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_highlight-soft_100_feeebd_1x100.png"
	name := "static/css/images/sunny/ui-bg_highlight-soft_100_feeebd_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiBg_insetSoft_30_ffffff_1x100Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiBg_insetSoft_30_ffffff_1x100Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-bg_inset-soft_30_ffffff_1x100.png"
	name := "static/css/images/sunny/ui-bg_inset-soft_30_ffffff_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_3d3d3d_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_3d3d3d_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_3d3d3d_256x240.png"
	name := "static/css/images/sunny/ui-icons_3d3d3d_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_bd7b00_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_bd7b00_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_bd7b00_256x240.png"
	name := "static/css/images/sunny/ui-icons_bd7b00_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_d19405_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_d19405_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_d19405_256x240.png"
	name := "static/css/images/sunny/ui-icons_d19405_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_eb990f_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_eb990f_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_eb990f_256x240.png"
	name := "static/css/images/sunny/ui-icons_eb990f_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_ed9f26_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_ed9f26_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_ed9f26_256x240.png"
	name := "static/css/images/sunny/ui-icons_ed9f26_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_fadc7a_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_fadc7a_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_fadc7a_256x240.png"
	name := "static/css/images/sunny/ui-icons_fadc7a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesSunnyUiIcons_ffe180_256x240Png reads file data from disk. It returns an error on failure.
func staticCssImagesSunnyUiIcons_ffe180_256x240Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\sunny\\ui-icons_ffe180_256x240.png"
	name := "static/css/images/sunny/ui-icons_ffe180_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTickPng reads file data from disk. It returns an error on failure.
func staticCssImagesTickPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\tick.png"
	name := "static/css/images/tick.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTimePng reads file data from disk. It returns an error on failure.
func staticCssImagesTimePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\time.png"
	name := "static/css/images/time.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTrack_classicPng reads file data from disk. It returns an error on failure.
func staticCssImagesTrack_classicPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\track_classic.png"
	name := "static/css/images/track_classic.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTrack_darkbluePng reads file data from disk. It returns an error on failure.
func staticCssImagesTrack_darkbluePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\track_darkblue.png"
	name := "static/css/images/track_darkblue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTrack_shinyblackPng reads file data from disk. It returns an error on failure.
func staticCssImagesTrack_shinyblackPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\track_shinyblack.png"
	name := "static/css/images/track_shinyblack.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesTrack_summerPng reads file data from disk. It returns an error on failure.
func staticCssImagesTrack_summerPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\track_summer.png"
	name := "static/css/images/track_summer.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesWarningPng reads file data from disk. It returns an error on failure.
func staticCssImagesWarningPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\warning.png"
	name := "static/css/images/warning.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesWp_check_indeterminate_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesWp_check_indeterminate_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\wp_check_indeterminate_white.png"
	name := "static/css/images/wp_check_indeterminate_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssImagesWp_check_whitePng reads file data from disk. It returns an error on failure.
func staticCssImagesWp_check_whitePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\images\\wp_check_white.png"
	name := "static/css/images/wp_check_white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryUiCustomMinCss reads file data from disk. It returns an error on failure.
func staticCssJqueryUiCustomMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\jquery-ui.custom.min.css"
	name := "static/css/jquery-ui.custom.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryUiMinCss reads file data from disk. It returns an error on failure.
func staticCssJqueryUiMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\jquery-ui.min.css"
	name := "static/css/jquery-ui.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryGritterMinCss reads file data from disk. It returns an error on failure.
func staticCssJqueryGritterMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\jquery.gritter.min.css"
	name := "static/css/jquery.gritter.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqxBaseCss reads file data from disk. It returns an error on failure.
func staticCssJqxBaseCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\jqx.base.css"
	name := "static/css/jqx.base.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssPrettifyMinCss reads file data from disk. It returns an error on failure.
func staticCssPrettifyMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\prettify.min.css"
	name := "static/css/prettify.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSelect2MinCss reads file data from disk. It returns an error on failure.
func staticCssSelect2MinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\select2.min.css"
	name := "static/css/select2.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSweetalert2Css reads file data from disk. It returns an error on failure.
func staticCssSweetalert2Css() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\sweetalert2.css"
	name := "static/css/sweetalert2.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSweetalert2MinCss reads file data from disk. It returns an error on failure.
func staticCssSweetalert2MinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\sweetalert2.min.css"
	name := "static/css/sweetalert2.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssUiJqgridMinCss reads file data from disk. It returns an error on failure.
func staticCssUiJqgridMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\css\\ui.jqgrid.min.css"
	name := "static/css/ui.jqgrid.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450CssFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func staticFontAwesome450CssFontAwesomeMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\css\\font-awesome.min.css"
	name := "static/font-awesome/4.5.0/css/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450FontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func staticFontAwesome450FontsFontawesomeWebfontEot() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\fonts\\fontawesome-webfont.eot"
	name := "static/font-awesome/4.5.0/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450FontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func staticFontAwesome450FontsFontawesomeWebfontSvg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\fonts\\fontawesome-webfont.svg"
	name := "static/font-awesome/4.5.0/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450FontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func staticFontAwesome450FontsFontawesomeWebfontTtf() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\fonts\\fontawesome-webfont.ttf"
	name := "static/font-awesome/4.5.0/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450FontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func staticFontAwesome450FontsFontawesomeWebfontWoff() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\fonts\\fontawesome-webfont.woff"
	name := "static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontAwesome450FontsFontawesomeWebfontWoff2 reads file data from disk. It returns an error on failure.
func staticFontAwesome450FontsFontawesomeWebfontWoff2() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\font-awesome\\4.5.0\\fonts\\fontawesome-webfont.woff2"
	name := "static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func staticFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\fonts\\glyphicons-halflings-regular.eot"
	name := "static/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func staticFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\fonts\\glyphicons-halflings-regular.svg"
	name := "static/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func staticFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\fonts\\glyphicons-halflings-regular.ttf"
	name := "static/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func staticFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\fonts\\glyphicons-halflings-regular.woff"
	name := "static/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func staticFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\fonts\\glyphicons-halflings-regular.woff2"
	name := "static/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFotoEdy_prasetiyo_1232414142414Png reads file data from disk. It returns an error on failure.
func staticFotoEdy_prasetiyo_1232414142414Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\foto\\EDY_PRASETIYO_1232414142414.png"
	name := "static/foto/EDY_PRASETIYO_1232414142414.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFotoEdy_pras_22_123132131321Png reads file data from disk. It returns an error on failure.
func staticFotoEdy_pras_22_123132131321Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\foto\\EDY_PRAS_22_123132131321.png"
	name := "static/foto/EDY_PRAS_22_123132131321.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFotoEdy44_nokktp123Png reads file data from disk. It returns an error on failure.
func staticFotoEdy44_nokktp123Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\foto\\edy44_nokktp123.png"
	name := "static/foto/edy44_nokktp123.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFotoEdy_3_nokktp12333Png reads file data from disk. It returns an error on failure.
func staticFotoEdy_3_nokktp12333Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\foto\\edy_3_nokktp12333.png"
	name := "static/foto/edy_3_nokktp12333.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFotoEdy_paramsPng reads file data from disk. It returns an error on failure.
func staticFotoEdy_paramsPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\foto\\edy_params.png"
	name := "static/foto/edy_params.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHeaderJpg reads file data from disk. It returns an error on failure.
func staticHeaderJpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\header.jpg"
	name := "static/header.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatarPng reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatarPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar.png"
	name := "static/images/avatars/avatar.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatar1Png reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatar1Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar1.png"
	name := "static/images/avatars/avatar1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatar2Png reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatar2Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar2.png"
	name := "static/images/avatars/avatar2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatar3Png reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatar3Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar3.png"
	name := "static/images/avatars/avatar3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatar4Png reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatar4Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar4.png"
	name := "static/images/avatars/avatar4.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsAvatar5Png reads file data from disk. It returns an error on failure.
func staticImagesAvatarsAvatar5Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\avatar5.png"
	name := "static/images/avatars/avatar5.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsProfilePicJpg reads file data from disk. It returns an error on failure.
func staticImagesAvatarsProfilePicJpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\profile-pic.jpg"
	name := "static/images/avatars/profile-pic.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesAvatarsUserJpg reads file data from disk. It returns an error on failure.
func staticImagesAvatarsUserJpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\avatars\\user.jpg"
	name := "static/images/avatars/user.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesBootstrapColorpickerAlphaHorizontalPng reads file data from disk. It returns an error on failure.
func staticImagesBootstrapColorpickerAlphaHorizontalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\bootstrap-colorpicker\\alpha-horizontal.png"
	name := "static/images/bootstrap-colorpicker/alpha-horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesBootstrapColorpickerAlphaPng reads file data from disk. It returns an error on failure.
func staticImagesBootstrapColorpickerAlphaPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\bootstrap-colorpicker\\alpha.png"
	name := "static/images/bootstrap-colorpicker/alpha.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesBootstrapColorpickerHueHorizontalPng reads file data from disk. It returns an error on failure.
func staticImagesBootstrapColorpickerHueHorizontalPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\bootstrap-colorpicker\\hue-horizontal.png"
	name := "static/images/bootstrap-colorpicker/hue-horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesBootstrapColorpickerHuePng reads file data from disk. It returns an error on failure.
func staticImagesBootstrapColorpickerHuePng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\bootstrap-colorpicker\\hue.png"
	name := "static/images/bootstrap-colorpicker/hue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesBootstrapColorpickerSaturationPng reads file data from disk. It returns an error on failure.
func staticImagesBootstrapColorpickerSaturationPng() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\bootstrap-colorpicker\\saturation.png"
	name := "static/images/bootstrap-colorpicker/saturation.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesEmailEmail1Png reads file data from disk. It returns an error on failure.
func staticImagesEmailEmail1Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\email\\email1.png"
	name := "static/images/email/email1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesEmailEmail2Png reads file data from disk. It returns an error on failure.
func staticImagesEmailEmail2Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\email\\email2.png"
	name := "static/images/email/email2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesEmailEmail3Png reads file data from disk. It returns an error on failure.
func staticImagesEmailEmail3Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\email\\email3.png"
	name := "static/images/email/email3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesEmailEmail4Png reads file data from disk. It returns an error on failure.
func staticImagesEmailEmail4Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\email\\email4.png"
	name := "static/images/email/email4.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage1Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage1Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-1.jpg"
	name := "static/images/gallery/image-1.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage2Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage2Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-2.jpg"
	name := "static/images/gallery/image-2.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage3Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage3Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-3.jpg"
	name := "static/images/gallery/image-3.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage4Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage4Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-4.jpg"
	name := "static/images/gallery/image-4.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage5Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage5Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-5.jpg"
	name := "static/images/gallery/image-5.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryImage6Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryImage6Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\image-6.jpg"
	name := "static/images/gallery/image-6.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb1Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb1Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-1.jpg"
	name := "static/images/gallery/thumb-1.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb2Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb2Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-2.jpg"
	name := "static/images/gallery/thumb-2.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb3Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb3Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-3.jpg"
	name := "static/images/gallery/thumb-3.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb4Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb4Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-4.jpg"
	name := "static/images/gallery/thumb-4.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb5Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb5Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-5.jpg"
	name := "static/images/gallery/thumb-5.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesGalleryThumb6Jpg reads file data from disk. It returns an error on failure.
func staticImagesGalleryThumb6Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\gallery\\thumb-6.jpg"
	name := "static/images/gallery/thumb-6.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPlaceholder165x90Png reads file data from disk. It returns an error on failure.
func staticImagesPlaceholder165x90Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\placeholder\\165x90.png"
	name := "static/images/placeholder/165x90.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPlaceholder255x150Png reads file data from disk. It returns an error on failure.
func staticImagesPlaceholder255x150Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\placeholder\\255x150.png"
	name := "static/images/placeholder/255x150.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPlaceholder530x270Png reads file data from disk. It returns an error on failure.
func staticImagesPlaceholder530x270Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\placeholder\\530x270.png"
	name := "static/images/placeholder/530x270.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPlaceholder550x280Png reads file data from disk. It returns an error on failure.
func staticImagesPlaceholder550x280Png() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\images\\placeholder\\550x280.png"
	name := "static/images/placeholder/550x280.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapasHtml reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapasHtml() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS.html"
	name := "static/js/LOGIN MANAJEMEN LAPAS.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAceElementsMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAceElementsMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\ace-elements.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/ace-elements.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAceExtraMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAceExtraMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\ace-extra.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/ace-extra.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAceRtlMinCss reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAceRtlMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\ace-rtl.min.css"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/ace-rtl.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAceMinCss reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAceMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\ace.min.css"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAceMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAceMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\ace.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesAxiosMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesAxiosMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\axios.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/axios.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesBootstrapDatetimepickerMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesBootstrapDatetimepickerMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\bootstrap-datetimepicker.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-datetimepicker.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesBootstrapNotifyMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesBootstrapNotifyMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\bootstrap-notify.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-notify.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesBootstrapTableJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesBootstrapTableJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\bootstrap-table.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-table.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesBootstrapMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\bootstrap.min.css"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesBootstrapMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesBootstrapMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\bootstrap.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesFontAwesomeMinCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\font-awesome.min.css"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesFontsGoogleapisComCss reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesFontsGoogleapisComCss() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\fonts.googleapis.com.css"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/fonts.googleapis.com.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesIdJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesIdJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\id.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/id.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJqueryInputmaskBundleJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJqueryInputmaskBundleJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\jquery.inputmask.bundle.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/jquery.inputmask.bundle.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJqueryJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJqueryJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\jquery.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/jquery.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJquerySerializejsonMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJquerySerializejsonMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\jquery.serializejson.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/jquery.serializejson.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJqxAllJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJqxAllJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\jqx-all.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/jqx-all.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJqxcoreJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJqxcoreJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\jqxcore.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/jqxcore.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesJsCookieMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesJsCookieMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\js.cookie.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/js.cookie.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesMomentWithLocalesMinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesMomentWithLocalesMinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\moment-with-locales.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/moment-with-locales.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesSelect2MinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesSelect2MinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\select2.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/select2.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsLoginManajemenLapas_filesSweetalert2MinJsDownload reads file data from disk. It returns an error on failure.
func staticJsLoginManajemenLapas_filesSweetalert2MinJsDownload() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\LOGIN MANAJEMEN LAPAS_files\\sweetalert2.min.js.download"
	name := "static/js/LOGIN MANAJEMEN LAPAS_files/sweetalert2.min.js.download"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRev_reg__anak_acc_Xls reads file data from disk. It returns an error on failure.
func staticJsRev_reg__anak_acc_Xls() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\REV._REG_._ANAK_acc_.xls"
	name := "static/js/REV._REG_._ANAK_acc_.xls"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAceEditableMinJs reads file data from disk. It returns an error on failure.
func staticJsAceEditableMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\ace-editable.min.js"
	name := "static/js/ace-editable.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAceElementsMinJs reads file data from disk. It returns an error on failure.
func staticJsAceElementsMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\ace-elements.min.js"
	name := "static/js/ace-elements.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAceExtraMinJs reads file data from disk. It returns an error on failure.
func staticJsAceExtraMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\ace-extra.min.js"
	name := "static/js/ace-extra.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAceMinJs reads file data from disk. It returns an error on failure.
func staticJsAceMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\ace.min.js"
	name := "static/js/ace.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAutosizeMinJs reads file data from disk. It returns an error on failure.
func staticJsAutosizeMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\autosize.min.js"
	name := "static/js/autosize.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAxiosJs reads file data from disk. It returns an error on failure.
func staticJsAxiosJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\axios.js"
	name := "static/js/axios.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAxiosMinJs reads file data from disk. It returns an error on failure.
func staticJsAxiosMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\axios.min.js"
	name := "static/js/axios.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootboxJs reads file data from disk. It returns an error on failure.
func staticJsBootboxJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootbox.js"
	name := "static/js/bootbox.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapColorpickerMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapColorpickerMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-colorpicker.min.js"
	name := "static/js/bootstrap-colorpicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapDatepickerMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapDatepickerMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-datepicker.min.js"
	name := "static/js/bootstrap-datepicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapDatetimepickerMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapDatetimepickerMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-datetimepicker.min.js"
	name := "static/js/bootstrap-datetimepicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapEditableMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapEditableMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-editable.min.js"
	name := "static/js/bootstrap-editable.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapMarkdownMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapMarkdownMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-markdown.min.js"
	name := "static/js/bootstrap-markdown.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapMultiselectMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapMultiselectMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-multiselect.min.js"
	name := "static/js/bootstrap-multiselect.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapNotifyMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapNotifyMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-notify.min.js"
	name := "static/js/bootstrap-notify.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTableJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTableJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-table.js"
	name := "static/js/bootstrap-table.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTagMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTagMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-tag.min.js"
	name := "static/js/bootstrap-tag.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTimepickerMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTimepickerMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-timepicker.min.js"
	name := "static/js/bootstrap-timepicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapWysiwygMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapWysiwygMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap-wysiwyg.min.js"
	name := "static/js/bootstrap-wysiwyg.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\bootstrap.min.js"
	name := "static/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsButtonsColvisMinJs reads file data from disk. It returns an error on failure.
func staticJsButtonsColvisMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\buttons.colVis.min.js"
	name := "static/js/buttons.colVis.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsButtonsFlashMinJs reads file data from disk. It returns an error on failure.
func staticJsButtonsFlashMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\buttons.flash.min.js"
	name := "static/js/buttons.flash.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsButtonsHtml5MinJs reads file data from disk. It returns an error on failure.
func staticJsButtonsHtml5MinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\buttons.html5.min.js"
	name := "static/js/buttons.html5.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsButtonsPrintMinJs reads file data from disk. It returns an error on failure.
func staticJsButtonsPrintMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\buttons.print.min.js"
	name := "static/js/buttons.print.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsChosenJqueryMinJs reads file data from disk. It returns an error on failure.
func staticJsChosenJqueryMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\chosen.jquery.min.js"
	name := "static/js/chosen.jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDatatablesButtonsMinJs reads file data from disk. It returns an error on failure.
func staticJsDatatablesButtonsMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\dataTables.buttons.min.js"
	name := "static/js/dataTables.buttons.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDatatablesSelectMinJs reads file data from disk. It returns an error on failure.
func staticJsDatatablesSelectMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\dataTables.select.min.js"
	name := "static/js/dataTables.select.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDaterangepickerMinJs reads file data from disk. It returns an error on failure.
func staticJsDaterangepickerMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\daterangepicker.min.js"
	name := "static/js/daterangepicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDropzoneMinJs reads file data from disk. It returns an error on failure.
func staticJsDropzoneMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\dropzone.min.js"
	name := "static/js/dropzone.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsExcanvasMinJs reads file data from disk. It returns an error on failure.
func staticJsExcanvasMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\excanvas.min.js"
	name := "static/js/excanvas.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsFullcalendarMinJs reads file data from disk. It returns an error on failure.
func staticJsFullcalendarMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\fullcalendar.min.js"
	name := "static/js/fullcalendar.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsGridLocaleEnJs reads file data from disk. It returns an error on failure.
func staticJsGridLocaleEnJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\grid.locale-en.js"
	name := "static/js/grid.locale-en.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsHolderMinJs reads file data from disk. It returns an error on failure.
func staticJsHolderMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\holder.min.js"
	name := "static/js/holder.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsHtml5shivMinJs reads file data from disk. It returns an error on failure.
func staticJsHtml5shivMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\html5shiv.min.js"
	name := "static/js/html5shiv.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsIdJs reads file data from disk. It returns an error on failure.
func staticJsIdJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\id.js"
	name := "static/js/id.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery1113MinJs reads file data from disk. It returns an error on failure.
func staticJsJquery1113MinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-1.11.3.min.js"
	name := "static/js/jquery-1.11.3.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery214MinJs reads file data from disk. It returns an error on failure.
func staticJsJquery214MinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-2.1.4.min.js"
	name := "static/js/jquery-2.1.4.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryAdditionalMethodsMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryAdditionalMethodsMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-additional-methods.min.js"
	name := "static/js/jquery-additional-methods.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryTypeaheadJs reads file data from disk. It returns an error on failure.
func staticJsJqueryTypeaheadJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-typeahead.js"
	name := "static/js/jquery-typeahead.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiCustomMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiCustomMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-ui.custom.min.js"
	name := "static/js/jquery-ui.custom.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery-ui.min.js"
	name := "static/js/jquery-ui.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryBootstrapDuallistboxMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryBootstrapDuallistboxMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.bootstrap-duallistbox.min.js"
	name := "static/js/jquery.bootstrap-duallistbox.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryColorboxMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryColorboxMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.colorbox.min.js"
	name := "static/js/jquery.colorbox.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryDatatablesBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryDatatablesBootstrapMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.dataTables.bootstrap.min.js"
	name := "static/js/jquery.dataTables.bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryDatatablesMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryDatatablesMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.dataTables.min.js"
	name := "static/js/jquery.dataTables.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryEasypiechartMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryEasypiechartMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.easypiechart.min.js"
	name := "static/js/jquery.easypiechart.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryFlotMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryFlotMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.flot.min.js"
	name := "static/js/jquery.flot.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryFlotPieMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryFlotPieMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.flot.pie.min.js"
	name := "static/js/jquery.flot.pie.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryFlotResizeMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryFlotResizeMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.flot.resize.min.js"
	name := "static/js/jquery.flot.resize.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryGritterMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryGritterMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.gritter.min.js"
	name := "static/js/jquery.gritter.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryHotkeysIndexMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryHotkeysIndexMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.hotkeys.index.min.js"
	name := "static/js/jquery.hotkeys.index.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryInputlimiterMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryInputlimiterMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.inputlimiter.min.js"
	name := "static/js/jquery.inputlimiter.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryInputmaskBundleJs reads file data from disk. It returns an error on failure.
func staticJsJqueryInputmaskBundleJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.inputmask.bundle.js"
	name := "static/js/jquery.inputmask.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryJqgridMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryJqgridMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.jqGrid.min.js"
	name := "static/js/jquery.jqGrid.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryKnobMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryKnobMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.knob.min.js"
	name := "static/js/jquery.knob.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryMaskedinputMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryMaskedinputMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.maskedinput.min.js"
	name := "static/js/jquery.maskedinput.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.min.js"
	name := "static/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryMobileCustomMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryMobileCustomMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.mobile.custom.min.js"
	name := "static/js/jquery.mobile.custom.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryNestableMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryNestableMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.nestable.min.js"
	name := "static/js/jquery.nestable.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryRatyMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryRatyMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.raty.min.js"
	name := "static/js/jquery.raty.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquerySerializejsonMinJs reads file data from disk. It returns an error on failure.
func staticJsJquerySerializejsonMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.serializejson.min.js"
	name := "static/js/jquery.serializejson.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquerySparklineIndexMinJs reads file data from disk. It returns an error on failure.
func staticJsJquerySparklineIndexMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.sparkline.index.min.js"
	name := "static/js/jquery.sparkline.index.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiTouchPunchMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiTouchPunchMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.ui.touch-punch.min.js"
	name := "static/js/jquery.ui.touch-punch.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryValidateMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryValidateMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jquery.validate.min.js"
	name := "static/js/jquery.validate.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqxAllJs reads file data from disk. It returns an error on failure.
func staticJsJqxAllJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jqx-all.js"
	name := "static/js/jqx-all.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqxcoreJs reads file data from disk. It returns an error on failure.
func staticJsJqxcoreJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\jqxcore.js"
	name := "static/js/jqxcore.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsCookieMinJs reads file data from disk. It returns an error on failure.
func staticJsJsCookieMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\js.cookie.min.js"
	name := "static/js/js.cookie.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMarkdownMinJs reads file data from disk. It returns an error on failure.
func staticJsMarkdownMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\markdown.min.js"
	name := "static/js/markdown.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMomentWithLocalesMinJs reads file data from disk. It returns an error on failure.
func staticJsMomentWithLocalesMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\moment-with-locales.min.js"
	name := "static/js/moment-with-locales.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMomentMinJs reads file data from disk. It returns an error on failure.
func staticJsMomentMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\moment.min.js"
	name := "static/js/moment.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPrettifyMinJs reads file data from disk. It returns an error on failure.
func staticJsPrettifyMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\prettify.min.js"
	name := "static/js/prettify.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsReloadMinJs reads file data from disk. It returns an error on failure.
func staticJsReloadMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\reload.min.js"
	name := "static/js/reload.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRespondMinJs reads file data from disk. It returns an error on failure.
func staticJsRespondMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\respond.min.js"
	name := "static/js/respond.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSelect2MinJs reads file data from disk. It returns an error on failure.
func staticJsSelect2MinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\select2.min.js"
	name := "static/js/select2.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSpinJs reads file data from disk. It returns an error on failure.
func staticJsSpinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\spin.js"
	name := "static/js/spin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSpinboxMinJs reads file data from disk. It returns an error on failure.
func staticJsSpinboxMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\spinbox.min.js"
	name := "static/js/spinbox.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSweetalert2CommonJs reads file data from disk. It returns an error on failure.
func staticJsSweetalert2CommonJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\sweetalert2.common.js"
	name := "static/js/sweetalert2.common.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSweetalert2Js reads file data from disk. It returns an error on failure.
func staticJsSweetalert2Js() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\sweetalert2.js"
	name := "static/js/sweetalert2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSweetalert2MinJs reads file data from disk. It returns an error on failure.
func staticJsSweetalert2MinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\sweetalert2.min.js"
	name := "static/js/sweetalert2.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTreeMinJs reads file data from disk. It returns an error on failure.
func staticJsTreeMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\tree.min.js"
	name := "static/js/tree.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsWizardMinJs reads file data from disk. It returns an error on failure.
func staticJsWizardMinJs() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\js\\wizard.min.js"
	name := "static/js/wizard.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLoginJpg reads file data from disk. It returns an error on failure.
func staticLoginJpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\login.jpg"
	name := "static/login.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLogin1Jpg reads file data from disk. It returns an error on failure.
func staticLogin1Jpg() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\login1.jpg"
	name := "static/login1.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSwfFlashexportSwf reads file data from disk. It returns an error on failure.
func staticSwfFlashexportSwf() (*asset, error) {
	path := "E:\\appdanlib\\Go_project\\src\\github.com\\edot92\\gotherimg\\static\\swf\\flashExport.swf"
	name := "static/swf/flashExport.swf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/ace-ie.min.css": staticCssAceIeMinCss,
	"static/css/ace-part2.min.css": staticCssAcePart2MinCss,
	"static/css/ace-rtl.min.css": staticCssAceRtlMinCss,
	"static/css/ace-skins.min.css": staticCssAceSkinsMinCss,
	"static/css/ace.min.css": staticCssAceMinCss,
	"static/css/bootstrap-colorpicker.min.css": staticCssBootstrapColorpickerMinCss,
	"static/css/bootstrap-datepicker3.min.css": staticCssBootstrapDatepicker3MinCss,
	"static/css/bootstrap-datetimepicker.min.css": staticCssBootstrapDatetimepickerMinCss,
	"static/css/bootstrap-duallistbox.min.css": staticCssBootstrapDuallistboxMinCss,
	"static/css/bootstrap-editable.min.css": staticCssBootstrapEditableMinCss,
	"static/css/bootstrap-multiselect.min.css": staticCssBootstrapMultiselectMinCss,
	"static/css/bootstrap-table.css": staticCssBootstrapTableCss,
	"static/css/bootstrap-timepicker.min.css": staticCssBootstrapTimepickerMinCss,
	"static/css/bootstrap.min.css": staticCssBootstrapMinCss,
	"static/css/chosen.min.css": staticCssChosenMinCss,
	"static/css/colorbox.min.css": staticCssColorboxMinCss,
	"static/css/daterangepicker.min.css": staticCssDaterangepickerMinCss,
	"static/css/dropzone.min.css": staticCssDropzoneMinCss,
	"static/css/font-awesome.min.css": staticCssFontAwesomeMinCss,
	"static/css/fonts.googleapis.com.css": staticCssFontsGoogleapisComCss,
	"static/css/fullcalendar.min.css": staticCssFullcalendarMinCss,
	"static/css/images/backImage.png": staticCssImagesBackimagePng,
	"static/css/images/backgroundTop.png": staticCssImagesBackgroundtopPng,
	"static/css/images/bg_black.png": staticCssImagesBg_blackPng,
	"static/css/images/bg_black_horizontal.png": staticCssImagesBg_black_horizontalPng,
	"static/css/images/bg_blackhover.png": staticCssImagesBg_blackhoverPng,
	"static/css/images/bg_blackhover_horizontal.png": staticCssImagesBg_blackhover_horizontalPng,
	"static/css/images/bg_blackpressed.png": staticCssImagesBg_blackpressedPng,
	"static/css/images/bg_blackpressed_horizontal.png": staticCssImagesBg_blackpressed_horizontalPng,
	"static/css/images/bg_blueenergy.png": staticCssImagesBg_blueenergyPng,
	"static/css/images/bg_darkblue.png": staticCssImagesBg_darkbluePng,
	"static/css/images/bg_darkbluehover.png": staticCssImagesBg_darkbluehoverPng,
	"static/css/images/bg_darkbluepressed.png": staticCssImagesBg_darkbluepressedPng,
	"static/css/images/black_gradient.png": staticCssImagesBlack_gradientPng,
	"static/css/images/blackbackground.png": staticCssImagesBlackbackgroundPng,
	"static/css/images/check_black.png": staticCssImagesCheck_blackPng,
	"static/css/images/check_blue.png": staticCssImagesCheck_bluePng,
	"static/css/images/check_blue_indeterminate.png": staticCssImagesCheck_blue_indeterminatePng,
	"static/css/images/check_disabled.png": staticCssImagesCheck_disabledPng,
	"static/css/images/check_indeterminate_black.png": staticCssImagesCheck_indeterminate_blackPng,
	"static/css/images/check_indeterminate_disabled.png": staticCssImagesCheck_indeterminate_disabledPng,
	"static/css/images/check_indeterminate_white.png": staticCssImagesCheck_indeterminate_whitePng,
	"static/css/images/check_lightblue.png": staticCssImagesCheck_lightbluePng,
	"static/css/images/check_lightblue_indeterminate.png": staticCssImagesCheck_lightblue_indeterminatePng,
	"static/css/images/check_white.png": staticCssImagesCheck_whitePng,
	"static/css/images/close.png": staticCssImagesClosePng,
	"static/css/images/close_black.png": staticCssImagesClose_blackPng,
	"static/css/images/close_blue.png": staticCssImagesClose_bluePng,
	"static/css/images/close_white.png": staticCssImagesClose_whitePng,
	"static/css/images/colorpicker/ReadMe.txt": staticCssImagesColorpickerReadmeTxt,
	"static/css/images/colorpicker/bar-hue.png": staticCssImagesColorpickerBarHuePng,
	"static/css/images/colorpicker/bar-saturation.png": staticCssImagesColorpickerBarSaturationPng,
	"static/css/images/colorpicker/map-hue.png": staticCssImagesColorpickerMapHuePng,
	"static/css/images/colorpicker/map-saturation-overlay.png": staticCssImagesColorpickerMapSaturationOverlayPng,
	"static/css/images/colorpicker/map-saturation.png": staticCssImagesColorpickerMapSaturationPng,
	"static/css/images/common.png": staticCssImagesCommonPng,
	"static/css/images/crosshair-white.png": staticCssImagesCrosshairWhitePng,
	"static/css/images/crosshair.png": staticCssImagesCrosshairPng,
	"static/css/images/darkness/ReadMe.txt": staticCssImagesDarknessReadmeTxt,
	"static/css/images/darkness/ui-bg_flat_30_cccccc_40x100.png": staticCssImagesDarknessUiBg_flat_30_cccccc_40x100Png,
	"static/css/images/darkness/ui-bg_flat_50_5c5c5c_40x100.png": staticCssImagesDarknessUiBg_flat_50_5c5c5c_40x100Png,
	"static/css/images/darkness/ui-bg_glass_20_555555_1x400.png": staticCssImagesDarknessUiBg_glass_20_555555_1x400Png,
	"static/css/images/darkness/ui-bg_glass_40_0078a3_1x400.png": staticCssImagesDarknessUiBg_glass_40_0078a3_1x400Png,
	"static/css/images/darkness/ui-bg_glass_40_ffc73d_1x400.png": staticCssImagesDarknessUiBg_glass_40_ffc73d_1x400Png,
	"static/css/images/darkness/ui-bg_gloss-wave_25_333333_500x100.png": staticCssImagesDarknessUiBg_glossWave_25_333333_500x100Png,
	"static/css/images/darkness/ui-bg_highlight-soft_80_eeeeee_1x100.png": staticCssImagesDarknessUiBg_highlightSoft_80_eeeeee_1x100Png,
	"static/css/images/darkness/ui-bg_inset-soft_25_000000_1x100.png": staticCssImagesDarknessUiBg_insetSoft_25_000000_1x100Png,
	"static/css/images/darkness/ui-bg_inset-soft_30_f58400_1x100.png": staticCssImagesDarknessUiBg_insetSoft_30_f58400_1x100Png,
	"static/css/images/darkness/ui-icons_222222_256x240.png": staticCssImagesDarknessUiIcons_222222_256x240Png,
	"static/css/images/darkness/ui-icons_4b8e0b_256x240.png": staticCssImagesDarknessUiIcons_4b8e0b_256x240Png,
	"static/css/images/darkness/ui-icons_a83300_256x240.png": staticCssImagesDarknessUiIcons_a83300_256x240Png,
	"static/css/images/darkness/ui-icons_cccccc_256x240.png": staticCssImagesDarknessUiIcons_cccccc_256x240Png,
	"static/css/images/darkness/ui-icons_ffffff_256x240.png": staticCssImagesDarknessUiIcons_ffffff_256x240Png,
	"static/css/images/darkred_gradient.png": staticCssImagesDarkred_gradientPng,
	"static/css/images/drag.png": staticCssImagesDragPng,
	"static/css/images/dragcancel.png": staticCssImagesDragcancelPng,
	"static/css/images/error.png": staticCssImagesErrorPng,
	"static/css/images/filter.png": staticCssImagesFilterPng,
	"static/css/images/html_editor.png": staticCssImagesHtml_editorPng,
	"static/css/images/html_editor_white.png": staticCssImagesHtml_editor_whitePng,
	"static/css/images/icon-calendar-white.png": staticCssImagesIconCalendarWhitePng,
	"static/css/images/icon-calendar.png": staticCssImagesIconCalendarPng,
	"static/css/images/icon-cancel-white.png": staticCssImagesIconCancelWhitePng,
	"static/css/images/icon-cancel.png": staticCssImagesIconCancelPng,
	"static/css/images/icon-delete-white.png": staticCssImagesIconDeleteWhitePng,
	"static/css/images/icon-delete.png": staticCssImagesIconDeletePng,
	"static/css/images/icon-down-blue.png": staticCssImagesIconDownBluePng,
	"static/css/images/icon-down-transparent.png": staticCssImagesIconDownTransparentPng,
	"static/css/images/icon-down-white.png": staticCssImagesIconDownWhitePng,
	"static/css/images/icon-down.png": staticCssImagesIconDownPng,
	"static/css/images/icon-edit-white.png": staticCssImagesIconEditWhitePng,
	"static/css/images/icon-edit.png": staticCssImagesIconEditPng,
	"static/css/images/icon-first-blue.png": staticCssImagesIconFirstBluePng,
	"static/css/images/icon-first-transparent.png": staticCssImagesIconFirstTransparentPng,
	"static/css/images/icon-first-white.png": staticCssImagesIconFirstWhitePng,
	"static/css/images/icon-first.png": staticCssImagesIconFirstPng,
	"static/css/images/icon-last-blue.png": staticCssImagesIconLastBluePng,
	"static/css/images/icon-last-transparent.png": staticCssImagesIconLastTransparentPng,
	"static/css/images/icon-last-white.png": staticCssImagesIconLastWhitePng,
	"static/css/images/icon-last.png": staticCssImagesIconLastPng,
	"static/css/images/icon-left-blue.png": staticCssImagesIconLeftBluePng,
	"static/css/images/icon-left-transparent.png": staticCssImagesIconLeftTransparentPng,
	"static/css/images/icon-left-white.png": staticCssImagesIconLeftWhitePng,
	"static/css/images/icon-left.png": staticCssImagesIconLeftPng,
	"static/css/images/icon-menu-minimized-white.png": staticCssImagesIconMenuMinimizedWhitePng,
	"static/css/images/icon-menu-minimized.png": staticCssImagesIconMenuMinimizedPng,
	"static/css/images/icon-plus-white.png": staticCssImagesIconPlusWhitePng,
	"static/css/images/icon-plus.png": staticCssImagesIconPlusPng,
	"static/css/images/icon-recurrence-exception-white.png": staticCssImagesIconRecurrenceExceptionWhitePng,
	"static/css/images/icon-recurrence-exception.png": staticCssImagesIconRecurrenceExceptionPng,
	"static/css/images/icon-recurrence-white.png": staticCssImagesIconRecurrenceWhitePng,
	"static/css/images/icon-recurrence.png": staticCssImagesIconRecurrencePng,
	"static/css/images/icon-right-blue.png": staticCssImagesIconRightBluePng,
	"static/css/images/icon-right-transparent.png": staticCssImagesIconRightTransparentPng,
	"static/css/images/icon-right-white.png": staticCssImagesIconRightWhitePng,
	"static/css/images/icon-right.png": staticCssImagesIconRightPng,
	"static/css/images/icon-save-white.png": staticCssImagesIconSaveWhitePng,
	"static/css/images/icon-save.png": staticCssImagesIconSavePng,
	"static/css/images/icon-showpassword-white.png": staticCssImagesIconShowpasswordWhitePng,
	"static/css/images/icon-showpassword.png": staticCssImagesIconShowpasswordPng,
	"static/css/images/icon-time-white.png": staticCssImagesIconTimeWhitePng,
	"static/css/images/icon-time.png": staticCssImagesIconTimePng,
	"static/css/images/icon-up-blue.png": staticCssImagesIconUpBluePng,
	"static/css/images/icon-up-transparent.png": staticCssImagesIconUpTransparentPng,
	"static/css/images/icon-up-white.png": staticCssImagesIconUpWhitePng,
	"static/css/images/icon-up.png": staticCssImagesIconUpPng,
	"static/css/images/info.png": staticCssImagesInfoPng,
	"static/css/images/le-frog/ReadMe.txt": staticCssImagesLeFrogReadmeTxt,
	"static/css/images/le-frog/ui-bg_diagonals-small_0_aaaaaa_40x40.png": staticCssImagesLeFrogUiBg_diagonalsSmall_0_aaaaaa_40x40Png,
	"static/css/images/le-frog/ui-bg_diagonals-thick_15_444444_40x40.png": staticCssImagesLeFrogUiBg_diagonalsThick_15_444444_40x40Png,
	"static/css/images/le-frog/ui-bg_diagonals-thick_95_ffdc2e_40x40.png": staticCssImagesLeFrogUiBg_diagonalsThick_95_ffdc2e_40x40Png,
	"static/css/images/le-frog/ui-bg_glass_55_fbf5d0_1x400.png": staticCssImagesLeFrogUiBg_glass_55_fbf5d0_1x400Png,
	"static/css/images/le-frog/ui-bg_highlight-hard_30_285c00_1x100.png": staticCssImagesLeFrogUiBg_highlightHard_30_285c00_1x100Png,
	"static/css/images/le-frog/ui-bg_highlight-soft_33_3a8104_1x100.png": staticCssImagesLeFrogUiBg_highlightSoft_33_3a8104_1x100Png,
	"static/css/images/le-frog/ui-bg_highlight-soft_50_4eb305_1x100.png": staticCssImagesLeFrogUiBg_highlightSoft_50_4eb305_1x100Png,
	"static/css/images/le-frog/ui-bg_highlight-soft_60_4ca20b_1x100.png": staticCssImagesLeFrogUiBg_highlightSoft_60_4ca20b_1x100Png,
	"static/css/images/le-frog/ui-bg_inset-soft_10_285c00_1x100.png": staticCssImagesLeFrogUiBg_insetSoft_10_285c00_1x100Png,
	"static/css/images/le-frog/ui-icons_4eb305_256x240.png": staticCssImagesLeFrogUiIcons_4eb305_256x240Png,
	"static/css/images/le-frog/ui-icons_72b42d_256x240.png": staticCssImagesLeFrogUiIcons_72b42d_256x240Png,
	"static/css/images/le-frog/ui-icons_cd0a0a_256x240.png": staticCssImagesLeFrogUiIcons_cd0a0a_256x240Png,
	"static/css/images/le-frog/ui-icons_ffffff_256x240.png": staticCssImagesLeFrogUiIcons_ffffff_256x240Png,
	"static/css/images/lightness/ReadMe.txt": staticCssImagesLightnessReadmeTxt,
	"static/css/images/lightness/icon-first.png": staticCssImagesLightnessIconFirstPng,
	"static/css/images/lightness/icon-last.png": staticCssImagesLightnessIconLastPng,
	"static/css/images/lightness/ui-bg_diagonals-thick_18_b81900_40x40.png": staticCssImagesLightnessUiBg_diagonalsThick_18_b81900_40x40Png,
	"static/css/images/lightness/ui-bg_diagonals-thick_20_666666_40x40.png": staticCssImagesLightnessUiBg_diagonalsThick_20_666666_40x40Png,
	"static/css/images/lightness/ui-bg_flat_10_000000_40x100.png": staticCssImagesLightnessUiBg_flat_10_000000_40x100Png,
	"static/css/images/lightness/ui-bg_glass_100_f6f6f6_1x400.png": staticCssImagesLightnessUiBg_glass_100_f6f6f6_1x400Png,
	"static/css/images/lightness/ui-bg_glass_100_fdf5ce_1x400.png": staticCssImagesLightnessUiBg_glass_100_fdf5ce_1x400Png,
	"static/css/images/lightness/ui-bg_glass_65_ffffff_1x400.png": staticCssImagesLightnessUiBg_glass_65_ffffff_1x400Png,
	"static/css/images/lightness/ui-bg_gloss-wave_35_f6a828_500x100.png": staticCssImagesLightnessUiBg_glossWave_35_f6a828_500x100Png,
	"static/css/images/lightness/ui-bg_highlight-soft_100_eeeeee_1x100.png": staticCssImagesLightnessUiBg_highlightSoft_100_eeeeee_1x100Png,
	"static/css/images/lightness/ui-bg_highlight-soft_75_ffe45c_1x100.png": staticCssImagesLightnessUiBg_highlightSoft_75_ffe45c_1x100Png,
	"static/css/images/lightness/ui-icons_222222_256x240.png": staticCssImagesLightnessUiIcons_222222_256x240Png,
	"static/css/images/lightness/ui-icons_228ef1_256x240.png": staticCssImagesLightnessUiIcons_228ef1_256x240Png,
	"static/css/images/lightness/ui-icons_ef8c08_256x240.png": staticCssImagesLightnessUiIcons_ef8c08_256x240Png,
	"static/css/images/lightness/ui-icons_ffd27a_256x240.png": staticCssImagesLightnessUiIcons_ffd27a_256x240Png,
	"static/css/images/lightness/ui-icons_ffffff_256x240.png": staticCssImagesLightnessUiIcons_ffffff_256x240Png,
	"static/css/images/loader-small.gif": staticCssImagesLoaderSmallGif,
	"static/css/images/loader.gif": staticCssImagesLoaderGif,
	"static/css/images/mail.png": staticCssImagesMailPng,
	"static/css/images/menubutton.png": staticCssImagesMenubuttonPng,
	"static/css/images/metro-icon-down-white.png": staticCssImagesMetroIconDownWhitePng,
	"static/css/images/metro-icon-down.png": staticCssImagesMetroIconDownPng,
	"static/css/images/metro-icon-first-white.png": staticCssImagesMetroIconFirstWhitePng,
	"static/css/images/metro-icon-first.png": staticCssImagesMetroIconFirstPng,
	"static/css/images/metro-icon-last-white.png": staticCssImagesMetroIconLastWhitePng,
	"static/css/images/metro-icon-last.png": staticCssImagesMetroIconLastPng,
	"static/css/images/metro-icon-left-white.png": staticCssImagesMetroIconLeftWhitePng,
	"static/css/images/metro-icon-left.png": staticCssImagesMetroIconLeftPng,
	"static/css/images/metro-icon-right - Copy.png": staticCssImagesMetroIconRightCopyPng,
	"static/css/images/metro-icon-right-white.png": staticCssImagesMetroIconRightWhitePng,
	"static/css/images/metro-icon-right.png": staticCssImagesMetroIconRightPng,
	"static/css/images/metro-icon-up-white.png": staticCssImagesMetroIconUpWhitePng,
	"static/css/images/metro-icon-up.png": staticCssImagesMetroIconUpPng,
	"static/css/images/multi-arrow.gif": staticCssImagesMultiArrowGif,
	"static/css/images/office-icon-down.png": staticCssImagesOfficeIconDownPng,
	"static/css/images/office-icon-first.png": staticCssImagesOfficeIconFirstPng,
	"static/css/images/office-icon-last.png": staticCssImagesOfficeIconLastPng,
	"static/css/images/office-icon-left.png": staticCssImagesOfficeIconLeftPng,
	"static/css/images/office-icon-right.png": staticCssImagesOfficeIconRightPng,
	"static/css/images/office-icon-up.png": staticCssImagesOfficeIconUpPng,
	"static/css/images/overcast/ReadMe.txt": staticCssImagesOvercastReadmeTxt,
	"static/css/images/overcast/ui-bg_flat_0_aaaaaa_40x100.png": staticCssImagesOvercastUiBg_flat_0_aaaaaa_40x100Png,
	"static/css/images/overcast/ui-bg_flat_0_eeeeee_40x100.png": staticCssImagesOvercastUiBg_flat_0_eeeeee_40x100Png,
	"static/css/images/overcast/ui-bg_flat_55_c0402a_40x100.png": staticCssImagesOvercastUiBg_flat_55_c0402a_40x100Png,
	"static/css/images/overcast/ui-bg_flat_55_eeeeee_40x100.png": staticCssImagesOvercastUiBg_flat_55_eeeeee_40x100Png,
	"static/css/images/overcast/ui-bg_glass_100_f8f8f8_1x400.png": staticCssImagesOvercastUiBg_glass_100_f8f8f8_1x400Png,
	"static/css/images/overcast/ui-bg_glass_35_dddddd_1x400.png": staticCssImagesOvercastUiBg_glass_35_dddddd_1x400Png,
	"static/css/images/overcast/ui-bg_glass_60_eeeeee_1x400.png": staticCssImagesOvercastUiBg_glass_60_eeeeee_1x400Png,
	"static/css/images/overcast/ui-bg_inset-hard_75_999999_1x100.png": staticCssImagesOvercastUiBg_insetHard_75_999999_1x100Png,
	"static/css/images/overcast/ui-bg_inset-soft_50_c9c9c9_1x100.png": staticCssImagesOvercastUiBg_insetSoft_50_c9c9c9_1x100Png,
	"static/css/images/overcast/ui-icons_3383bb_256x240.png": staticCssImagesOvercastUiIcons_3383bb_256x240Png,
	"static/css/images/overcast/ui-icons_454545_256x240.png": staticCssImagesOvercastUiIcons_454545_256x240Png,
	"static/css/images/overcast/ui-icons_70b2e1_256x240.png": staticCssImagesOvercastUiIcons_70b2e1_256x240Png,
	"static/css/images/overcast/ui-icons_999999_256x240.png": staticCssImagesOvercastUiIcons_999999_256x240Png,
	"static/css/images/overcast/ui-icons_fbc856_256x240.png": staticCssImagesOvercastUiIcons_fbc856_256x240Png,
	"static/css/images/pin-black.png": staticCssImagesPinBlackPng,
	"static/css/images/pin-blue.png": staticCssImagesPinBluePng,
	"static/css/images/pin-lightblue.png": staticCssImagesPinLightbluePng,
	"static/css/images/pin-white.png": staticCssImagesPinWhitePng,
	"static/css/images/pin-yellow.png": staticCssImagesPinYellowPng,
	"static/css/images/pin.png": staticCssImagesPinPng,
	"static/css/images/pinned-black.png": staticCssImagesPinnedBlackPng,
	"static/css/images/pinned-blue.png": staticCssImagesPinnedBluePng,
	"static/css/images/pinned-lightblue.png": staticCssImagesPinnedLightbluePng,
	"static/css/images/pinned-white.png": staticCssImagesPinnedWhitePng,
	"static/css/images/pinned-yellow.png": staticCssImagesPinnedYellowPng,
	"static/css/images/pinned.png": staticCssImagesPinnedPng,
	"static/css/images/plus.png": staticCssImagesPlusPng,
	"static/css/images/plus_white.png": staticCssImagesPlus_whitePng,
	"static/css/images/pointer.png": staticCssImagesPointerPng,
	"static/css/images/rangebar_classic.png": staticCssImagesRangebar_classicPng,
	"static/css/images/rangebar_darkblue.png": staticCssImagesRangebar_darkbluePng,
	"static/css/images/rangebar_shinyblack.png": staticCssImagesRangebar_shinyblackPng,
	"static/css/images/rangebar_summer.png": staticCssImagesRangebar_summerPng,
	"static/css/images/red_arrow_down.png": staticCssImagesRed_arrow_downPng,
	"static/css/images/red_arrow_up.png": staticCssImagesRed_arrow_upPng,
	"static/css/images/red_gradient.png": staticCssImagesRed_gradientPng,
	"static/css/images/redmond/ReadMe.txt": staticCssImagesRedmondReadmeTxt,
	"static/css/images/redmond/icon-first.png": staticCssImagesRedmondIconFirstPng,
	"static/css/images/redmond/icon-last.png": staticCssImagesRedmondIconLastPng,
	"static/css/images/redmond/ui-bg_flat_0_aaaaaa_40x100.png": staticCssImagesRedmondUiBg_flat_0_aaaaaa_40x100Png,
	"static/css/images/redmond/ui-bg_flat_55_fbec88_40x100.png": staticCssImagesRedmondUiBg_flat_55_fbec88_40x100Png,
	"static/css/images/redmond/ui-bg_glass_75_d0e5f5_1x400.png": staticCssImagesRedmondUiBg_glass_75_d0e5f5_1x400Png,
	"static/css/images/redmond/ui-bg_glass_85_dfeffc_1x400.png": staticCssImagesRedmondUiBg_glass_85_dfeffc_1x400Png,
	"static/css/images/redmond/ui-bg_glass_95_fef1ec_1x400.png": staticCssImagesRedmondUiBg_glass_95_fef1ec_1x400Png,
	"static/css/images/redmond/ui-bg_gloss-wave_55_5c9ccc_500x100.png": staticCssImagesRedmondUiBg_glossWave_55_5c9ccc_500x100Png,
	"static/css/images/redmond/ui-bg_inset-hard_100_f5f8f9_1x100.png": staticCssImagesRedmondUiBg_insetHard_100_f5f8f9_1x100Png,
	"static/css/images/redmond/ui-bg_inset-hard_100_fcfdfd_1x100.png": staticCssImagesRedmondUiBg_insetHard_100_fcfdfd_1x100Png,
	"static/css/images/redmond/ui-icons_217bc0_256x240.png": staticCssImagesRedmondUiIcons_217bc0_256x240Png,
	"static/css/images/redmond/ui-icons_2e83ff_256x240.png": staticCssImagesRedmondUiIcons_2e83ff_256x240Png,
	"static/css/images/redmond/ui-icons_469bdd_256x240.png": staticCssImagesRedmondUiIcons_469bdd_256x240Png,
	"static/css/images/redmond/ui-icons_6da8d5_256x240.png": staticCssImagesRedmondUiIcons_6da8d5_256x240Png,
	"static/css/images/redmond/ui-icons_cd0a0a_256x240.png": staticCssImagesRedmondUiIcons_cd0a0a_256x240Png,
	"static/css/images/redmond/ui-icons_d8e7f3_256x240.png": staticCssImagesRedmondUiIcons_d8e7f3_256x240Png,
	"static/css/images/redmond/ui-icons_f9bd01_256x240.png": staticCssImagesRedmondUiIcons_f9bd01_256x240Png,
	"static/css/images/roundbg_check_black.png": staticCssImagesRoundbg_check_blackPng,
	"static/css/images/roundbg_check_disabled.png": staticCssImagesRoundbg_check_disabledPng,
	"static/css/images/roundbg_check_indeterminate.png": staticCssImagesRoundbg_check_indeterminatePng,
	"static/css/images/roundbg_check_white.png": staticCssImagesRoundbg_check_whitePng,
	"static/css/images/roundbg_classic_hover.png": staticCssImagesRoundbg_classic_hoverPng,
	"static/css/images/roundbg_classic_normal.png": staticCssImagesRoundbg_classic_normalPng,
	"static/css/images/roundbg_disabled.png": staticCssImagesRoundbg_disabledPng,
	"static/css/images/search.png": staticCssImagesSearchPng,
	"static/css/images/search_white.png": staticCssImagesSearch_whitePng,
	"static/css/images/smoothness/ReadMe.txt": staticCssImagesSmoothnessReadmeTxt,
	"static/css/images/smoothness/ui-bg_flat_0_aaaaaa_40x100.png": staticCssImagesSmoothnessUiBg_flat_0_aaaaaa_40x100Png,
	"static/css/images/smoothness/ui-bg_flat_75_ffffff_40x100.png": staticCssImagesSmoothnessUiBg_flat_75_ffffff_40x100Png,
	"static/css/images/smoothness/ui-bg_glass_55_fbf9ee_1x400.png": staticCssImagesSmoothnessUiBg_glass_55_fbf9ee_1x400Png,
	"static/css/images/smoothness/ui-bg_glass_65_ffffff_1x400.png": staticCssImagesSmoothnessUiBg_glass_65_ffffff_1x400Png,
	"static/css/images/smoothness/ui-bg_glass_75_dadada_1x400.png": staticCssImagesSmoothnessUiBg_glass_75_dadada_1x400Png,
	"static/css/images/smoothness/ui-bg_glass_75_e6e6e6_1x400.png": staticCssImagesSmoothnessUiBg_glass_75_e6e6e6_1x400Png,
	"static/css/images/smoothness/ui-bg_glass_95_fef1ec_1x400.png": staticCssImagesSmoothnessUiBg_glass_95_fef1ec_1x400Png,
	"static/css/images/smoothness/ui-bg_highlight-soft_75_cccccc_1x100.png": staticCssImagesSmoothnessUiBg_highlightSoft_75_cccccc_1x100Png,
	"static/css/images/smoothness/ui-icons_222222_256x240.png": staticCssImagesSmoothnessUiIcons_222222_256x240Png,
	"static/css/images/smoothness/ui-icons_2e83ff_256x240.png": staticCssImagesSmoothnessUiIcons_2e83ff_256x240Png,
	"static/css/images/smoothness/ui-icons_454545_256x240.png": staticCssImagesSmoothnessUiIcons_454545_256x240Png,
	"static/css/images/smoothness/ui-icons_888888_256x240.png": staticCssImagesSmoothnessUiIcons_888888_256x240Png,
	"static/css/images/smoothness/ui-icons_cd0a0a_256x240.png": staticCssImagesSmoothnessUiIcons_cd0a0a_256x240Png,
	"static/css/images/sortasc.png": staticCssImagesSortascPng,
	"static/css/images/sortascbutton.png": staticCssImagesSortascbuttonPng,
	"static/css/images/sortdesc.png": staticCssImagesSortdescPng,
	"static/css/images/sortdescbutton.png": staticCssImagesSortdescbuttonPng,
	"static/css/images/sortremove.png": staticCssImagesSortremovePng,
	"static/css/images/star.png": staticCssImagesStarPng,
	"static/css/images/star_disabled.png": staticCssImagesStar_disabledPng,
	"static/css/images/star_hover.png": staticCssImagesStar_hoverPng,
	"static/css/images/start/ReadMe.txt": staticCssImagesStartReadmeTxt,
	"static/css/images/start/ui-bg_flat_55_999999_40x100.png": staticCssImagesStartUiBg_flat_55_999999_40x100Png,
	"static/css/images/start/ui-bg_flat_75_aaaaaa_40x100.png": staticCssImagesStartUiBg_flat_75_aaaaaa_40x100Png,
	"static/css/images/start/ui-bg_glass_45_0078ae_1x400.png": staticCssImagesStartUiBg_glass_45_0078ae_1x400Png,
	"static/css/images/start/ui-bg_glass_55_f8da4e_1x400.png": staticCssImagesStartUiBg_glass_55_f8da4e_1x400Png,
	"static/css/images/start/ui-bg_glass_75_79c9ec_1x400.png": staticCssImagesStartUiBg_glass_75_79c9ec_1x400Png,
	"static/css/images/start/ui-bg_gloss-wave_45_e14f1c_500x100.png": staticCssImagesStartUiBg_glossWave_45_e14f1c_500x100Png,
	"static/css/images/start/ui-bg_gloss-wave_50_6eac2c_500x100.png": staticCssImagesStartUiBg_glossWave_50_6eac2c_500x100Png,
	"static/css/images/start/ui-bg_gloss-wave_75_2191c0_500x100.png": staticCssImagesStartUiBg_glossWave_75_2191c0_500x100Png,
	"static/css/images/start/ui-bg_inset-hard_100_fcfdfd_1x100.png": staticCssImagesStartUiBg_insetHard_100_fcfdfd_1x100Png,
	"static/css/images/start/ui-icons_0078ae_256x240.png": staticCssImagesStartUiIcons_0078ae_256x240Png,
	"static/css/images/start/ui-icons_056b93_256x240.png": staticCssImagesStartUiIcons_056b93_256x240Png,
	"static/css/images/start/ui-icons_d8e7f3_256x240.png": staticCssImagesStartUiIcons_d8e7f3_256x240Png,
	"static/css/images/start/ui-icons_e0fdff_256x240.png": staticCssImagesStartUiIcons_e0fdff_256x240Png,
	"static/css/images/start/ui-icons_f5e175_256x240.png": staticCssImagesStartUiIcons_f5e175_256x240Png,
	"static/css/images/start/ui-icons_f7a50d_256x240.png": staticCssImagesStartUiIcons_f7a50d_256x240Png,
	"static/css/images/start/ui-icons_fcd113_256x240.png": staticCssImagesStartUiIcons_fcd113_256x240Png,
	"static/css/images/stripes.png": staticCssImagesStripesPng,
	"static/css/images/success.png": staticCssImagesSuccessPng,
	"static/css/images/sunny/ReadMe.txt": staticCssImagesSunnyReadmeTxt,
	"static/css/images/sunny/ui-bg_diagonals-medium_20_d34d17_40x40.png": staticCssImagesSunnyUiBg_diagonalsMedium_20_d34d17_40x40Png,
	"static/css/images/sunny/ui-bg_flat_30_cccccc_40x100.png": staticCssImagesSunnyUiBg_flat_30_cccccc_40x100Png,
	"static/css/images/sunny/ui-bg_flat_50_5c5c5c_40x100.png": staticCssImagesSunnyUiBg_flat_50_5c5c5c_40x100Png,
	"static/css/images/sunny/ui-bg_gloss-wave_45_817865_500x100.png": staticCssImagesSunnyUiBg_glossWave_45_817865_500x100Png,
	"static/css/images/sunny/ui-bg_gloss-wave_60_fece2f_500x100.png": staticCssImagesSunnyUiBg_glossWave_60_fece2f_500x100Png,
	"static/css/images/sunny/ui-bg_gloss-wave_70_ffdd57_500x100.png": staticCssImagesSunnyUiBg_glossWave_70_ffdd57_500x100Png,
	"static/css/images/sunny/ui-bg_gloss-wave_90_fff9e5_500x100.png": staticCssImagesSunnyUiBg_glossWave_90_fff9e5_500x100Png,
	"static/css/images/sunny/ui-bg_highlight-soft_100_feeebd_1x100.png": staticCssImagesSunnyUiBg_highlightSoft_100_feeebd_1x100Png,
	"static/css/images/sunny/ui-bg_inset-soft_30_ffffff_1x100.png": staticCssImagesSunnyUiBg_insetSoft_30_ffffff_1x100Png,
	"static/css/images/sunny/ui-icons_3d3d3d_256x240.png": staticCssImagesSunnyUiIcons_3d3d3d_256x240Png,
	"static/css/images/sunny/ui-icons_bd7b00_256x240.png": staticCssImagesSunnyUiIcons_bd7b00_256x240Png,
	"static/css/images/sunny/ui-icons_d19405_256x240.png": staticCssImagesSunnyUiIcons_d19405_256x240Png,
	"static/css/images/sunny/ui-icons_eb990f_256x240.png": staticCssImagesSunnyUiIcons_eb990f_256x240Png,
	"static/css/images/sunny/ui-icons_ed9f26_256x240.png": staticCssImagesSunnyUiIcons_ed9f26_256x240Png,
	"static/css/images/sunny/ui-icons_fadc7a_256x240.png": staticCssImagesSunnyUiIcons_fadc7a_256x240Png,
	"static/css/images/sunny/ui-icons_ffe180_256x240.png": staticCssImagesSunnyUiIcons_ffe180_256x240Png,
	"static/css/images/tick.png": staticCssImagesTickPng,
	"static/css/images/time.png": staticCssImagesTimePng,
	"static/css/images/track_classic.png": staticCssImagesTrack_classicPng,
	"static/css/images/track_darkblue.png": staticCssImagesTrack_darkbluePng,
	"static/css/images/track_shinyblack.png": staticCssImagesTrack_shinyblackPng,
	"static/css/images/track_summer.png": staticCssImagesTrack_summerPng,
	"static/css/images/warning.png": staticCssImagesWarningPng,
	"static/css/images/wp_check_indeterminate_white.png": staticCssImagesWp_check_indeterminate_whitePng,
	"static/css/images/wp_check_white.png": staticCssImagesWp_check_whitePng,
	"static/css/jquery-ui.custom.min.css": staticCssJqueryUiCustomMinCss,
	"static/css/jquery-ui.min.css": staticCssJqueryUiMinCss,
	"static/css/jquery.gritter.min.css": staticCssJqueryGritterMinCss,
	"static/css/jqx.base.css": staticCssJqxBaseCss,
	"static/css/prettify.min.css": staticCssPrettifyMinCss,
	"static/css/select2.min.css": staticCssSelect2MinCss,
	"static/css/sweetalert2.css": staticCssSweetalert2Css,
	"static/css/sweetalert2.min.css": staticCssSweetalert2MinCss,
	"static/css/ui.jqgrid.min.css": staticCssUiJqgridMinCss,
	"static/font-awesome/4.5.0/css/font-awesome.min.css": staticFontAwesome450CssFontAwesomeMinCss,
	"static/font-awesome/4.5.0/fonts/fontawesome-webfont.eot": staticFontAwesome450FontsFontawesomeWebfontEot,
	"static/font-awesome/4.5.0/fonts/fontawesome-webfont.svg": staticFontAwesome450FontsFontawesomeWebfontSvg,
	"static/font-awesome/4.5.0/fonts/fontawesome-webfont.ttf": staticFontAwesome450FontsFontawesomeWebfontTtf,
	"static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff": staticFontAwesome450FontsFontawesomeWebfontWoff,
	"static/font-awesome/4.5.0/fonts/fontawesome-webfont.woff2": staticFontAwesome450FontsFontawesomeWebfontWoff2,
	"static/fonts/glyphicons-halflings-regular.eot": staticFontsGlyphiconsHalflingsRegularEot,
	"static/fonts/glyphicons-halflings-regular.svg": staticFontsGlyphiconsHalflingsRegularSvg,
	"static/fonts/glyphicons-halflings-regular.ttf": staticFontsGlyphiconsHalflingsRegularTtf,
	"static/fonts/glyphicons-halflings-regular.woff": staticFontsGlyphiconsHalflingsRegularWoff,
	"static/fonts/glyphicons-halflings-regular.woff2": staticFontsGlyphiconsHalflingsRegularWoff2,
	"static/foto/EDY_PRASETIYO_1232414142414.png": staticFotoEdy_prasetiyo_1232414142414Png,
	"static/foto/EDY_PRAS_22_123132131321.png": staticFotoEdy_pras_22_123132131321Png,
	"static/foto/edy44_nokktp123.png": staticFotoEdy44_nokktp123Png,
	"static/foto/edy_3_nokktp12333.png": staticFotoEdy_3_nokktp12333Png,
	"static/foto/edy_params.png": staticFotoEdy_paramsPng,
	"static/header.jpg": staticHeaderJpg,
	"static/images/avatars/avatar.png": staticImagesAvatarsAvatarPng,
	"static/images/avatars/avatar1.png": staticImagesAvatarsAvatar1Png,
	"static/images/avatars/avatar2.png": staticImagesAvatarsAvatar2Png,
	"static/images/avatars/avatar3.png": staticImagesAvatarsAvatar3Png,
	"static/images/avatars/avatar4.png": staticImagesAvatarsAvatar4Png,
	"static/images/avatars/avatar5.png": staticImagesAvatarsAvatar5Png,
	"static/images/avatars/profile-pic.jpg": staticImagesAvatarsProfilePicJpg,
	"static/images/avatars/user.jpg": staticImagesAvatarsUserJpg,
	"static/images/bootstrap-colorpicker/alpha-horizontal.png": staticImagesBootstrapColorpickerAlphaHorizontalPng,
	"static/images/bootstrap-colorpicker/alpha.png": staticImagesBootstrapColorpickerAlphaPng,
	"static/images/bootstrap-colorpicker/hue-horizontal.png": staticImagesBootstrapColorpickerHueHorizontalPng,
	"static/images/bootstrap-colorpicker/hue.png": staticImagesBootstrapColorpickerHuePng,
	"static/images/bootstrap-colorpicker/saturation.png": staticImagesBootstrapColorpickerSaturationPng,
	"static/images/email/email1.png": staticImagesEmailEmail1Png,
	"static/images/email/email2.png": staticImagesEmailEmail2Png,
	"static/images/email/email3.png": staticImagesEmailEmail3Png,
	"static/images/email/email4.png": staticImagesEmailEmail4Png,
	"static/images/gallery/image-1.jpg": staticImagesGalleryImage1Jpg,
	"static/images/gallery/image-2.jpg": staticImagesGalleryImage2Jpg,
	"static/images/gallery/image-3.jpg": staticImagesGalleryImage3Jpg,
	"static/images/gallery/image-4.jpg": staticImagesGalleryImage4Jpg,
	"static/images/gallery/image-5.jpg": staticImagesGalleryImage5Jpg,
	"static/images/gallery/image-6.jpg": staticImagesGalleryImage6Jpg,
	"static/images/gallery/thumb-1.jpg": staticImagesGalleryThumb1Jpg,
	"static/images/gallery/thumb-2.jpg": staticImagesGalleryThumb2Jpg,
	"static/images/gallery/thumb-3.jpg": staticImagesGalleryThumb3Jpg,
	"static/images/gallery/thumb-4.jpg": staticImagesGalleryThumb4Jpg,
	"static/images/gallery/thumb-5.jpg": staticImagesGalleryThumb5Jpg,
	"static/images/gallery/thumb-6.jpg": staticImagesGalleryThumb6Jpg,
	"static/images/placeholder/165x90.png": staticImagesPlaceholder165x90Png,
	"static/images/placeholder/255x150.png": staticImagesPlaceholder255x150Png,
	"static/images/placeholder/530x270.png": staticImagesPlaceholder530x270Png,
	"static/images/placeholder/550x280.png": staticImagesPlaceholder550x280Png,
	"static/js/LOGIN MANAJEMEN LAPAS.html": staticJsLoginManajemenLapasHtml,
	"static/js/LOGIN MANAJEMEN LAPAS_files/ace-elements.min.js.download": staticJsLoginManajemenLapas_filesAceElementsMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/ace-extra.min.js.download": staticJsLoginManajemenLapas_filesAceExtraMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/ace-rtl.min.css": staticJsLoginManajemenLapas_filesAceRtlMinCss,
	"static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.css": staticJsLoginManajemenLapas_filesAceMinCss,
	"static/js/LOGIN MANAJEMEN LAPAS_files/ace.min.js.download": staticJsLoginManajemenLapas_filesAceMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/axios.min.js.download": staticJsLoginManajemenLapas_filesAxiosMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-datetimepicker.min.js.download": staticJsLoginManajemenLapas_filesBootstrapDatetimepickerMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-notify.min.js.download": staticJsLoginManajemenLapas_filesBootstrapNotifyMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap-table.js.download": staticJsLoginManajemenLapas_filesBootstrapTableJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.css": staticJsLoginManajemenLapas_filesBootstrapMinCss,
	"static/js/LOGIN MANAJEMEN LAPAS_files/bootstrap.min.js.download": staticJsLoginManajemenLapas_filesBootstrapMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/font-awesome.min.css": staticJsLoginManajemenLapas_filesFontAwesomeMinCss,
	"static/js/LOGIN MANAJEMEN LAPAS_files/fonts.googleapis.com.css": staticJsLoginManajemenLapas_filesFontsGoogleapisComCss,
	"static/js/LOGIN MANAJEMEN LAPAS_files/id.js.download": staticJsLoginManajemenLapas_filesIdJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/jquery.inputmask.bundle.js.download": staticJsLoginManajemenLapas_filesJqueryInputmaskBundleJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/jquery.js.download": staticJsLoginManajemenLapas_filesJqueryJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/jquery.serializejson.min.js.download": staticJsLoginManajemenLapas_filesJquerySerializejsonMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/jqx-all.js.download": staticJsLoginManajemenLapas_filesJqxAllJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/jqxcore.js.download": staticJsLoginManajemenLapas_filesJqxcoreJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/js.cookie.min.js.download": staticJsLoginManajemenLapas_filesJsCookieMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/moment-with-locales.min.js.download": staticJsLoginManajemenLapas_filesMomentWithLocalesMinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/select2.min.js.download": staticJsLoginManajemenLapas_filesSelect2MinJsDownload,
	"static/js/LOGIN MANAJEMEN LAPAS_files/sweetalert2.min.js.download": staticJsLoginManajemenLapas_filesSweetalert2MinJsDownload,
	"static/js/REV._REG_._ANAK_acc_.xls": staticJsRev_reg__anak_acc_Xls,
	"static/js/ace-editable.min.js": staticJsAceEditableMinJs,
	"static/js/ace-elements.min.js": staticJsAceElementsMinJs,
	"static/js/ace-extra.min.js": staticJsAceExtraMinJs,
	"static/js/ace.min.js": staticJsAceMinJs,
	"static/js/autosize.min.js": staticJsAutosizeMinJs,
	"static/js/axios.js": staticJsAxiosJs,
	"static/js/axios.min.js": staticJsAxiosMinJs,
	"static/js/bootbox.js": staticJsBootboxJs,
	"static/js/bootstrap-colorpicker.min.js": staticJsBootstrapColorpickerMinJs,
	"static/js/bootstrap-datepicker.min.js": staticJsBootstrapDatepickerMinJs,
	"static/js/bootstrap-datetimepicker.min.js": staticJsBootstrapDatetimepickerMinJs,
	"static/js/bootstrap-editable.min.js": staticJsBootstrapEditableMinJs,
	"static/js/bootstrap-markdown.min.js": staticJsBootstrapMarkdownMinJs,
	"static/js/bootstrap-multiselect.min.js": staticJsBootstrapMultiselectMinJs,
	"static/js/bootstrap-notify.min.js": staticJsBootstrapNotifyMinJs,
	"static/js/bootstrap-table.js": staticJsBootstrapTableJs,
	"static/js/bootstrap-tag.min.js": staticJsBootstrapTagMinJs,
	"static/js/bootstrap-timepicker.min.js": staticJsBootstrapTimepickerMinJs,
	"static/js/bootstrap-wysiwyg.min.js": staticJsBootstrapWysiwygMinJs,
	"static/js/bootstrap.min.js": staticJsBootstrapMinJs,
	"static/js/buttons.colVis.min.js": staticJsButtonsColvisMinJs,
	"static/js/buttons.flash.min.js": staticJsButtonsFlashMinJs,
	"static/js/buttons.html5.min.js": staticJsButtonsHtml5MinJs,
	"static/js/buttons.print.min.js": staticJsButtonsPrintMinJs,
	"static/js/chosen.jquery.min.js": staticJsChosenJqueryMinJs,
	"static/js/dataTables.buttons.min.js": staticJsDatatablesButtonsMinJs,
	"static/js/dataTables.select.min.js": staticJsDatatablesSelectMinJs,
	"static/js/daterangepicker.min.js": staticJsDaterangepickerMinJs,
	"static/js/dropzone.min.js": staticJsDropzoneMinJs,
	"static/js/excanvas.min.js": staticJsExcanvasMinJs,
	"static/js/fullcalendar.min.js": staticJsFullcalendarMinJs,
	"static/js/grid.locale-en.js": staticJsGridLocaleEnJs,
	"static/js/holder.min.js": staticJsHolderMinJs,
	"static/js/html5shiv.min.js": staticJsHtml5shivMinJs,
	"static/js/id.js": staticJsIdJs,
	"static/js/jquery-1.11.3.min.js": staticJsJquery1113MinJs,
	"static/js/jquery-2.1.4.min.js": staticJsJquery214MinJs,
	"static/js/jquery-additional-methods.min.js": staticJsJqueryAdditionalMethodsMinJs,
	"static/js/jquery-typeahead.js": staticJsJqueryTypeaheadJs,
	"static/js/jquery-ui.custom.min.js": staticJsJqueryUiCustomMinJs,
	"static/js/jquery-ui.min.js": staticJsJqueryUiMinJs,
	"static/js/jquery.bootstrap-duallistbox.min.js": staticJsJqueryBootstrapDuallistboxMinJs,
	"static/js/jquery.colorbox.min.js": staticJsJqueryColorboxMinJs,
	"static/js/jquery.dataTables.bootstrap.min.js": staticJsJqueryDatatablesBootstrapMinJs,
	"static/js/jquery.dataTables.min.js": staticJsJqueryDatatablesMinJs,
	"static/js/jquery.easypiechart.min.js": staticJsJqueryEasypiechartMinJs,
	"static/js/jquery.flot.min.js": staticJsJqueryFlotMinJs,
	"static/js/jquery.flot.pie.min.js": staticJsJqueryFlotPieMinJs,
	"static/js/jquery.flot.resize.min.js": staticJsJqueryFlotResizeMinJs,
	"static/js/jquery.gritter.min.js": staticJsJqueryGritterMinJs,
	"static/js/jquery.hotkeys.index.min.js": staticJsJqueryHotkeysIndexMinJs,
	"static/js/jquery.inputlimiter.min.js": staticJsJqueryInputlimiterMinJs,
	"static/js/jquery.inputmask.bundle.js": staticJsJqueryInputmaskBundleJs,
	"static/js/jquery.jqGrid.min.js": staticJsJqueryJqgridMinJs,
	"static/js/jquery.knob.min.js": staticJsJqueryKnobMinJs,
	"static/js/jquery.maskedinput.min.js": staticJsJqueryMaskedinputMinJs,
	"static/js/jquery.min.js": staticJsJqueryMinJs,
	"static/js/jquery.mobile.custom.min.js": staticJsJqueryMobileCustomMinJs,
	"static/js/jquery.nestable.min.js": staticJsJqueryNestableMinJs,
	"static/js/jquery.raty.min.js": staticJsJqueryRatyMinJs,
	"static/js/jquery.serializejson.min.js": staticJsJquerySerializejsonMinJs,
	"static/js/jquery.sparkline.index.min.js": staticJsJquerySparklineIndexMinJs,
	"static/js/jquery.ui.touch-punch.min.js": staticJsJqueryUiTouchPunchMinJs,
	"static/js/jquery.validate.min.js": staticJsJqueryValidateMinJs,
	"static/js/jqx-all.js": staticJsJqxAllJs,
	"static/js/jqxcore.js": staticJsJqxcoreJs,
	"static/js/js.cookie.min.js": staticJsJsCookieMinJs,
	"static/js/markdown.min.js": staticJsMarkdownMinJs,
	"static/js/moment-with-locales.min.js": staticJsMomentWithLocalesMinJs,
	"static/js/moment.min.js": staticJsMomentMinJs,
	"static/js/prettify.min.js": staticJsPrettifyMinJs,
	"static/js/reload.min.js": staticJsReloadMinJs,
	"static/js/respond.min.js": staticJsRespondMinJs,
	"static/js/select2.min.js": staticJsSelect2MinJs,
	"static/js/spin.js": staticJsSpinJs,
	"static/js/spinbox.min.js": staticJsSpinboxMinJs,
	"static/js/sweetalert2.common.js": staticJsSweetalert2CommonJs,
	"static/js/sweetalert2.js": staticJsSweetalert2Js,
	"static/js/sweetalert2.min.js": staticJsSweetalert2MinJs,
	"static/js/tree.min.js": staticJsTreeMinJs,
	"static/js/wizard.min.js": staticJsWizardMinJs,
	"static/login.jpg": staticLoginJpg,
	"static/login1.jpg": staticLogin1Jpg,
	"static/swf/flashExport.swf": staticSwfFlashexportSwf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"ace-ie.min.css": &bintree{staticCssAceIeMinCss, map[string]*bintree{}},
			"ace-part2.min.css": &bintree{staticCssAcePart2MinCss, map[string]*bintree{}},
			"ace-rtl.min.css": &bintree{staticCssAceRtlMinCss, map[string]*bintree{}},
			"ace-skins.min.css": &bintree{staticCssAceSkinsMinCss, map[string]*bintree{}},
			"ace.min.css": &bintree{staticCssAceMinCss, map[string]*bintree{}},
			"bootstrap-colorpicker.min.css": &bintree{staticCssBootstrapColorpickerMinCss, map[string]*bintree{}},
			"bootstrap-datepicker3.min.css": &bintree{staticCssBootstrapDatepicker3MinCss, map[string]*bintree{}},
			"bootstrap-datetimepicker.min.css": &bintree{staticCssBootstrapDatetimepickerMinCss, map[string]*bintree{}},
			"bootstrap-duallistbox.min.css": &bintree{staticCssBootstrapDuallistboxMinCss, map[string]*bintree{}},
			"bootstrap-editable.min.css": &bintree{staticCssBootstrapEditableMinCss, map[string]*bintree{}},
			"bootstrap-multiselect.min.css": &bintree{staticCssBootstrapMultiselectMinCss, map[string]*bintree{}},
			"bootstrap-table.css": &bintree{staticCssBootstrapTableCss, map[string]*bintree{}},
			"bootstrap-timepicker.min.css": &bintree{staticCssBootstrapTimepickerMinCss, map[string]*bintree{}},
			"bootstrap.min.css": &bintree{staticCssBootstrapMinCss, map[string]*bintree{}},
			"chosen.min.css": &bintree{staticCssChosenMinCss, map[string]*bintree{}},
			"colorbox.min.css": &bintree{staticCssColorboxMinCss, map[string]*bintree{}},
			"daterangepicker.min.css": &bintree{staticCssDaterangepickerMinCss, map[string]*bintree{}},
			"dropzone.min.css": &bintree{staticCssDropzoneMinCss, map[string]*bintree{}},
			"font-awesome.min.css": &bintree{staticCssFontAwesomeMinCss, map[string]*bintree{}},
			"fonts.googleapis.com.css": &bintree{staticCssFontsGoogleapisComCss, map[string]*bintree{}},
			"fullcalendar.min.css": &bintree{staticCssFullcalendarMinCss, map[string]*bintree{}},
			"images": &bintree{nil, map[string]*bintree{
				"backImage.png": &bintree{staticCssImagesBackimagePng, map[string]*bintree{}},
				"backgroundTop.png": &bintree{staticCssImagesBackgroundtopPng, map[string]*bintree{}},
				"bg_black.png": &bintree{staticCssImagesBg_blackPng, map[string]*bintree{}},
				"bg_black_horizontal.png": &bintree{staticCssImagesBg_black_horizontalPng, map[string]*bintree{}},
				"bg_blackhover.png": &bintree{staticCssImagesBg_blackhoverPng, map[string]*bintree{}},
				"bg_blackhover_horizontal.png": &bintree{staticCssImagesBg_blackhover_horizontalPng, map[string]*bintree{}},
				"bg_blackpressed.png": &bintree{staticCssImagesBg_blackpressedPng, map[string]*bintree{}},
				"bg_blackpressed_horizontal.png": &bintree{staticCssImagesBg_blackpressed_horizontalPng, map[string]*bintree{}},
				"bg_blueenergy.png": &bintree{staticCssImagesBg_blueenergyPng, map[string]*bintree{}},
				"bg_darkblue.png": &bintree{staticCssImagesBg_darkbluePng, map[string]*bintree{}},
				"bg_darkbluehover.png": &bintree{staticCssImagesBg_darkbluehoverPng, map[string]*bintree{}},
				"bg_darkbluepressed.png": &bintree{staticCssImagesBg_darkbluepressedPng, map[string]*bintree{}},
				"black_gradient.png": &bintree{staticCssImagesBlack_gradientPng, map[string]*bintree{}},
				"blackbackground.png": &bintree{staticCssImagesBlackbackgroundPng, map[string]*bintree{}},
				"check_black.png": &bintree{staticCssImagesCheck_blackPng, map[string]*bintree{}},
				"check_blue.png": &bintree{staticCssImagesCheck_bluePng, map[string]*bintree{}},
				"check_blue_indeterminate.png": &bintree{staticCssImagesCheck_blue_indeterminatePng, map[string]*bintree{}},
				"check_disabled.png": &bintree{staticCssImagesCheck_disabledPng, map[string]*bintree{}},
				"check_indeterminate_black.png": &bintree{staticCssImagesCheck_indeterminate_blackPng, map[string]*bintree{}},
				"check_indeterminate_disabled.png": &bintree{staticCssImagesCheck_indeterminate_disabledPng, map[string]*bintree{}},
				"check_indeterminate_white.png": &bintree{staticCssImagesCheck_indeterminate_whitePng, map[string]*bintree{}},
				"check_lightblue.png": &bintree{staticCssImagesCheck_lightbluePng, map[string]*bintree{}},
				"check_lightblue_indeterminate.png": &bintree{staticCssImagesCheck_lightblue_indeterminatePng, map[string]*bintree{}},
				"check_white.png": &bintree{staticCssImagesCheck_whitePng, map[string]*bintree{}},
				"close.png": &bintree{staticCssImagesClosePng, map[string]*bintree{}},
				"close_black.png": &bintree{staticCssImagesClose_blackPng, map[string]*bintree{}},
				"close_blue.png": &bintree{staticCssImagesClose_bluePng, map[string]*bintree{}},
				"close_white.png": &bintree{staticCssImagesClose_whitePng, map[string]*bintree{}},
				"colorpicker": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesColorpickerReadmeTxt, map[string]*bintree{}},
					"bar-hue.png": &bintree{staticCssImagesColorpickerBarHuePng, map[string]*bintree{}},
					"bar-saturation.png": &bintree{staticCssImagesColorpickerBarSaturationPng, map[string]*bintree{}},
					"map-hue.png": &bintree{staticCssImagesColorpickerMapHuePng, map[string]*bintree{}},
					"map-saturation-overlay.png": &bintree{staticCssImagesColorpickerMapSaturationOverlayPng, map[string]*bintree{}},
					"map-saturation.png": &bintree{staticCssImagesColorpickerMapSaturationPng, map[string]*bintree{}},
				}},
				"common.png": &bintree{staticCssImagesCommonPng, map[string]*bintree{}},
				"crosshair-white.png": &bintree{staticCssImagesCrosshairWhitePng, map[string]*bintree{}},
				"crosshair.png": &bintree{staticCssImagesCrosshairPng, map[string]*bintree{}},
				"darkness": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesDarknessReadmeTxt, map[string]*bintree{}},
					"ui-bg_flat_30_cccccc_40x100.png": &bintree{staticCssImagesDarknessUiBg_flat_30_cccccc_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_50_5c5c5c_40x100.png": &bintree{staticCssImagesDarknessUiBg_flat_50_5c5c5c_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_20_555555_1x400.png": &bintree{staticCssImagesDarknessUiBg_glass_20_555555_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_40_0078a3_1x400.png": &bintree{staticCssImagesDarknessUiBg_glass_40_0078a3_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_40_ffc73d_1x400.png": &bintree{staticCssImagesDarknessUiBg_glass_40_ffc73d_1x400Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_25_333333_500x100.png": &bintree{staticCssImagesDarknessUiBg_glossWave_25_333333_500x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_80_eeeeee_1x100.png": &bintree{staticCssImagesDarknessUiBg_highlightSoft_80_eeeeee_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-soft_25_000000_1x100.png": &bintree{staticCssImagesDarknessUiBg_insetSoft_25_000000_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-soft_30_f58400_1x100.png": &bintree{staticCssImagesDarknessUiBg_insetSoft_30_f58400_1x100Png, map[string]*bintree{}},
					"ui-icons_222222_256x240.png": &bintree{staticCssImagesDarknessUiIcons_222222_256x240Png, map[string]*bintree{}},
					"ui-icons_4b8e0b_256x240.png": &bintree{staticCssImagesDarknessUiIcons_4b8e0b_256x240Png, map[string]*bintree{}},
					"ui-icons_a83300_256x240.png": &bintree{staticCssImagesDarknessUiIcons_a83300_256x240Png, map[string]*bintree{}},
					"ui-icons_cccccc_256x240.png": &bintree{staticCssImagesDarknessUiIcons_cccccc_256x240Png, map[string]*bintree{}},
					"ui-icons_ffffff_256x240.png": &bintree{staticCssImagesDarknessUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				}},
				"darkred_gradient.png": &bintree{staticCssImagesDarkred_gradientPng, map[string]*bintree{}},
				"drag.png": &bintree{staticCssImagesDragPng, map[string]*bintree{}},
				"dragcancel.png": &bintree{staticCssImagesDragcancelPng, map[string]*bintree{}},
				"error.png": &bintree{staticCssImagesErrorPng, map[string]*bintree{}},
				"filter.png": &bintree{staticCssImagesFilterPng, map[string]*bintree{}},
				"html_editor.png": &bintree{staticCssImagesHtml_editorPng, map[string]*bintree{}},
				"html_editor_white.png": &bintree{staticCssImagesHtml_editor_whitePng, map[string]*bintree{}},
				"icon-calendar-white.png": &bintree{staticCssImagesIconCalendarWhitePng, map[string]*bintree{}},
				"icon-calendar.png": &bintree{staticCssImagesIconCalendarPng, map[string]*bintree{}},
				"icon-cancel-white.png": &bintree{staticCssImagesIconCancelWhitePng, map[string]*bintree{}},
				"icon-cancel.png": &bintree{staticCssImagesIconCancelPng, map[string]*bintree{}},
				"icon-delete-white.png": &bintree{staticCssImagesIconDeleteWhitePng, map[string]*bintree{}},
				"icon-delete.png": &bintree{staticCssImagesIconDeletePng, map[string]*bintree{}},
				"icon-down-blue.png": &bintree{staticCssImagesIconDownBluePng, map[string]*bintree{}},
				"icon-down-transparent.png": &bintree{staticCssImagesIconDownTransparentPng, map[string]*bintree{}},
				"icon-down-white.png": &bintree{staticCssImagesIconDownWhitePng, map[string]*bintree{}},
				"icon-down.png": &bintree{staticCssImagesIconDownPng, map[string]*bintree{}},
				"icon-edit-white.png": &bintree{staticCssImagesIconEditWhitePng, map[string]*bintree{}},
				"icon-edit.png": &bintree{staticCssImagesIconEditPng, map[string]*bintree{}},
				"icon-first-blue.png": &bintree{staticCssImagesIconFirstBluePng, map[string]*bintree{}},
				"icon-first-transparent.png": &bintree{staticCssImagesIconFirstTransparentPng, map[string]*bintree{}},
				"icon-first-white.png": &bintree{staticCssImagesIconFirstWhitePng, map[string]*bintree{}},
				"icon-first.png": &bintree{staticCssImagesIconFirstPng, map[string]*bintree{}},
				"icon-last-blue.png": &bintree{staticCssImagesIconLastBluePng, map[string]*bintree{}},
				"icon-last-transparent.png": &bintree{staticCssImagesIconLastTransparentPng, map[string]*bintree{}},
				"icon-last-white.png": &bintree{staticCssImagesIconLastWhitePng, map[string]*bintree{}},
				"icon-last.png": &bintree{staticCssImagesIconLastPng, map[string]*bintree{}},
				"icon-left-blue.png": &bintree{staticCssImagesIconLeftBluePng, map[string]*bintree{}},
				"icon-left-transparent.png": &bintree{staticCssImagesIconLeftTransparentPng, map[string]*bintree{}},
				"icon-left-white.png": &bintree{staticCssImagesIconLeftWhitePng, map[string]*bintree{}},
				"icon-left.png": &bintree{staticCssImagesIconLeftPng, map[string]*bintree{}},
				"icon-menu-minimized-white.png": &bintree{staticCssImagesIconMenuMinimizedWhitePng, map[string]*bintree{}},
				"icon-menu-minimized.png": &bintree{staticCssImagesIconMenuMinimizedPng, map[string]*bintree{}},
				"icon-plus-white.png": &bintree{staticCssImagesIconPlusWhitePng, map[string]*bintree{}},
				"icon-plus.png": &bintree{staticCssImagesIconPlusPng, map[string]*bintree{}},
				"icon-recurrence-exception-white.png": &bintree{staticCssImagesIconRecurrenceExceptionWhitePng, map[string]*bintree{}},
				"icon-recurrence-exception.png": &bintree{staticCssImagesIconRecurrenceExceptionPng, map[string]*bintree{}},
				"icon-recurrence-white.png": &bintree{staticCssImagesIconRecurrenceWhitePng, map[string]*bintree{}},
				"icon-recurrence.png": &bintree{staticCssImagesIconRecurrencePng, map[string]*bintree{}},
				"icon-right-blue.png": &bintree{staticCssImagesIconRightBluePng, map[string]*bintree{}},
				"icon-right-transparent.png": &bintree{staticCssImagesIconRightTransparentPng, map[string]*bintree{}},
				"icon-right-white.png": &bintree{staticCssImagesIconRightWhitePng, map[string]*bintree{}},
				"icon-right.png": &bintree{staticCssImagesIconRightPng, map[string]*bintree{}},
				"icon-save-white.png": &bintree{staticCssImagesIconSaveWhitePng, map[string]*bintree{}},
				"icon-save.png": &bintree{staticCssImagesIconSavePng, map[string]*bintree{}},
				"icon-showpassword-white.png": &bintree{staticCssImagesIconShowpasswordWhitePng, map[string]*bintree{}},
				"icon-showpassword.png": &bintree{staticCssImagesIconShowpasswordPng, map[string]*bintree{}},
				"icon-time-white.png": &bintree{staticCssImagesIconTimeWhitePng, map[string]*bintree{}},
				"icon-time.png": &bintree{staticCssImagesIconTimePng, map[string]*bintree{}},
				"icon-up-blue.png": &bintree{staticCssImagesIconUpBluePng, map[string]*bintree{}},
				"icon-up-transparent.png": &bintree{staticCssImagesIconUpTransparentPng, map[string]*bintree{}},
				"icon-up-white.png": &bintree{staticCssImagesIconUpWhitePng, map[string]*bintree{}},
				"icon-up.png": &bintree{staticCssImagesIconUpPng, map[string]*bintree{}},
				"info.png": &bintree{staticCssImagesInfoPng, map[string]*bintree{}},
				"le-frog": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesLeFrogReadmeTxt, map[string]*bintree{}},
					"ui-bg_diagonals-small_0_aaaaaa_40x40.png": &bintree{staticCssImagesLeFrogUiBg_diagonalsSmall_0_aaaaaa_40x40Png, map[string]*bintree{}},
					"ui-bg_diagonals-thick_15_444444_40x40.png": &bintree{staticCssImagesLeFrogUiBg_diagonalsThick_15_444444_40x40Png, map[string]*bintree{}},
					"ui-bg_diagonals-thick_95_ffdc2e_40x40.png": &bintree{staticCssImagesLeFrogUiBg_diagonalsThick_95_ffdc2e_40x40Png, map[string]*bintree{}},
					"ui-bg_glass_55_fbf5d0_1x400.png": &bintree{staticCssImagesLeFrogUiBg_glass_55_fbf5d0_1x400Png, map[string]*bintree{}},
					"ui-bg_highlight-hard_30_285c00_1x100.png": &bintree{staticCssImagesLeFrogUiBg_highlightHard_30_285c00_1x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_33_3a8104_1x100.png": &bintree{staticCssImagesLeFrogUiBg_highlightSoft_33_3a8104_1x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_50_4eb305_1x100.png": &bintree{staticCssImagesLeFrogUiBg_highlightSoft_50_4eb305_1x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_60_4ca20b_1x100.png": &bintree{staticCssImagesLeFrogUiBg_highlightSoft_60_4ca20b_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-soft_10_285c00_1x100.png": &bintree{staticCssImagesLeFrogUiBg_insetSoft_10_285c00_1x100Png, map[string]*bintree{}},
					"ui-icons_4eb305_256x240.png": &bintree{staticCssImagesLeFrogUiIcons_4eb305_256x240Png, map[string]*bintree{}},
					"ui-icons_72b42d_256x240.png": &bintree{staticCssImagesLeFrogUiIcons_72b42d_256x240Png, map[string]*bintree{}},
					"ui-icons_cd0a0a_256x240.png": &bintree{staticCssImagesLeFrogUiIcons_cd0a0a_256x240Png, map[string]*bintree{}},
					"ui-icons_ffffff_256x240.png": &bintree{staticCssImagesLeFrogUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				}},
				"lightness": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesLightnessReadmeTxt, map[string]*bintree{}},
					"icon-first.png": &bintree{staticCssImagesLightnessIconFirstPng, map[string]*bintree{}},
					"icon-last.png": &bintree{staticCssImagesLightnessIconLastPng, map[string]*bintree{}},
					"ui-bg_diagonals-thick_18_b81900_40x40.png": &bintree{staticCssImagesLightnessUiBg_diagonalsThick_18_b81900_40x40Png, map[string]*bintree{}},
					"ui-bg_diagonals-thick_20_666666_40x40.png": &bintree{staticCssImagesLightnessUiBg_diagonalsThick_20_666666_40x40Png, map[string]*bintree{}},
					"ui-bg_flat_10_000000_40x100.png": &bintree{staticCssImagesLightnessUiBg_flat_10_000000_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_100_f6f6f6_1x400.png": &bintree{staticCssImagesLightnessUiBg_glass_100_f6f6f6_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_100_fdf5ce_1x400.png": &bintree{staticCssImagesLightnessUiBg_glass_100_fdf5ce_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_65_ffffff_1x400.png": &bintree{staticCssImagesLightnessUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_35_f6a828_500x100.png": &bintree{staticCssImagesLightnessUiBg_glossWave_35_f6a828_500x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_100_eeeeee_1x100.png": &bintree{staticCssImagesLightnessUiBg_highlightSoft_100_eeeeee_1x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_75_ffe45c_1x100.png": &bintree{staticCssImagesLightnessUiBg_highlightSoft_75_ffe45c_1x100Png, map[string]*bintree{}},
					"ui-icons_222222_256x240.png": &bintree{staticCssImagesLightnessUiIcons_222222_256x240Png, map[string]*bintree{}},
					"ui-icons_228ef1_256x240.png": &bintree{staticCssImagesLightnessUiIcons_228ef1_256x240Png, map[string]*bintree{}},
					"ui-icons_ef8c08_256x240.png": &bintree{staticCssImagesLightnessUiIcons_ef8c08_256x240Png, map[string]*bintree{}},
					"ui-icons_ffd27a_256x240.png": &bintree{staticCssImagesLightnessUiIcons_ffd27a_256x240Png, map[string]*bintree{}},
					"ui-icons_ffffff_256x240.png": &bintree{staticCssImagesLightnessUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				}},
				"loader-small.gif": &bintree{staticCssImagesLoaderSmallGif, map[string]*bintree{}},
				"loader.gif": &bintree{staticCssImagesLoaderGif, map[string]*bintree{}},
				"mail.png": &bintree{staticCssImagesMailPng, map[string]*bintree{}},
				"menubutton.png": &bintree{staticCssImagesMenubuttonPng, map[string]*bintree{}},
				"metro-icon-down-white.png": &bintree{staticCssImagesMetroIconDownWhitePng, map[string]*bintree{}},
				"metro-icon-down.png": &bintree{staticCssImagesMetroIconDownPng, map[string]*bintree{}},
				"metro-icon-first-white.png": &bintree{staticCssImagesMetroIconFirstWhitePng, map[string]*bintree{}},
				"metro-icon-first.png": &bintree{staticCssImagesMetroIconFirstPng, map[string]*bintree{}},
				"metro-icon-last-white.png": &bintree{staticCssImagesMetroIconLastWhitePng, map[string]*bintree{}},
				"metro-icon-last.png": &bintree{staticCssImagesMetroIconLastPng, map[string]*bintree{}},
				"metro-icon-left-white.png": &bintree{staticCssImagesMetroIconLeftWhitePng, map[string]*bintree{}},
				"metro-icon-left.png": &bintree{staticCssImagesMetroIconLeftPng, map[string]*bintree{}},
				"metro-icon-right - Copy.png": &bintree{staticCssImagesMetroIconRightCopyPng, map[string]*bintree{}},
				"metro-icon-right-white.png": &bintree{staticCssImagesMetroIconRightWhitePng, map[string]*bintree{}},
				"metro-icon-right.png": &bintree{staticCssImagesMetroIconRightPng, map[string]*bintree{}},
				"metro-icon-up-white.png": &bintree{staticCssImagesMetroIconUpWhitePng, map[string]*bintree{}},
				"metro-icon-up.png": &bintree{staticCssImagesMetroIconUpPng, map[string]*bintree{}},
				"multi-arrow.gif": &bintree{staticCssImagesMultiArrowGif, map[string]*bintree{}},
				"office-icon-down.png": &bintree{staticCssImagesOfficeIconDownPng, map[string]*bintree{}},
				"office-icon-first.png": &bintree{staticCssImagesOfficeIconFirstPng, map[string]*bintree{}},
				"office-icon-last.png": &bintree{staticCssImagesOfficeIconLastPng, map[string]*bintree{}},
				"office-icon-left.png": &bintree{staticCssImagesOfficeIconLeftPng, map[string]*bintree{}},
				"office-icon-right.png": &bintree{staticCssImagesOfficeIconRightPng, map[string]*bintree{}},
				"office-icon-up.png": &bintree{staticCssImagesOfficeIconUpPng, map[string]*bintree{}},
				"overcast": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesOvercastReadmeTxt, map[string]*bintree{}},
					"ui-bg_flat_0_aaaaaa_40x100.png": &bintree{staticCssImagesOvercastUiBg_flat_0_aaaaaa_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_0_eeeeee_40x100.png": &bintree{staticCssImagesOvercastUiBg_flat_0_eeeeee_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_55_c0402a_40x100.png": &bintree{staticCssImagesOvercastUiBg_flat_55_c0402a_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_55_eeeeee_40x100.png": &bintree{staticCssImagesOvercastUiBg_flat_55_eeeeee_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_100_f8f8f8_1x400.png": &bintree{staticCssImagesOvercastUiBg_glass_100_f8f8f8_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_35_dddddd_1x400.png": &bintree{staticCssImagesOvercastUiBg_glass_35_dddddd_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_60_eeeeee_1x400.png": &bintree{staticCssImagesOvercastUiBg_glass_60_eeeeee_1x400Png, map[string]*bintree{}},
					"ui-bg_inset-hard_75_999999_1x100.png": &bintree{staticCssImagesOvercastUiBg_insetHard_75_999999_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-soft_50_c9c9c9_1x100.png": &bintree{staticCssImagesOvercastUiBg_insetSoft_50_c9c9c9_1x100Png, map[string]*bintree{}},
					"ui-icons_3383bb_256x240.png": &bintree{staticCssImagesOvercastUiIcons_3383bb_256x240Png, map[string]*bintree{}},
					"ui-icons_454545_256x240.png": &bintree{staticCssImagesOvercastUiIcons_454545_256x240Png, map[string]*bintree{}},
					"ui-icons_70b2e1_256x240.png": &bintree{staticCssImagesOvercastUiIcons_70b2e1_256x240Png, map[string]*bintree{}},
					"ui-icons_999999_256x240.png": &bintree{staticCssImagesOvercastUiIcons_999999_256x240Png, map[string]*bintree{}},
					"ui-icons_fbc856_256x240.png": &bintree{staticCssImagesOvercastUiIcons_fbc856_256x240Png, map[string]*bintree{}},
				}},
				"pin-black.png": &bintree{staticCssImagesPinBlackPng, map[string]*bintree{}},
				"pin-blue.png": &bintree{staticCssImagesPinBluePng, map[string]*bintree{}},
				"pin-lightblue.png": &bintree{staticCssImagesPinLightbluePng, map[string]*bintree{}},
				"pin-white.png": &bintree{staticCssImagesPinWhitePng, map[string]*bintree{}},
				"pin-yellow.png": &bintree{staticCssImagesPinYellowPng, map[string]*bintree{}},
				"pin.png": &bintree{staticCssImagesPinPng, map[string]*bintree{}},
				"pinned-black.png": &bintree{staticCssImagesPinnedBlackPng, map[string]*bintree{}},
				"pinned-blue.png": &bintree{staticCssImagesPinnedBluePng, map[string]*bintree{}},
				"pinned-lightblue.png": &bintree{staticCssImagesPinnedLightbluePng, map[string]*bintree{}},
				"pinned-white.png": &bintree{staticCssImagesPinnedWhitePng, map[string]*bintree{}},
				"pinned-yellow.png": &bintree{staticCssImagesPinnedYellowPng, map[string]*bintree{}},
				"pinned.png": &bintree{staticCssImagesPinnedPng, map[string]*bintree{}},
				"plus.png": &bintree{staticCssImagesPlusPng, map[string]*bintree{}},
				"plus_white.png": &bintree{staticCssImagesPlus_whitePng, map[string]*bintree{}},
				"pointer.png": &bintree{staticCssImagesPointerPng, map[string]*bintree{}},
				"rangebar_classic.png": &bintree{staticCssImagesRangebar_classicPng, map[string]*bintree{}},
				"rangebar_darkblue.png": &bintree{staticCssImagesRangebar_darkbluePng, map[string]*bintree{}},
				"rangebar_shinyblack.png": &bintree{staticCssImagesRangebar_shinyblackPng, map[string]*bintree{}},
				"rangebar_summer.png": &bintree{staticCssImagesRangebar_summerPng, map[string]*bintree{}},
				"red_arrow_down.png": &bintree{staticCssImagesRed_arrow_downPng, map[string]*bintree{}},
				"red_arrow_up.png": &bintree{staticCssImagesRed_arrow_upPng, map[string]*bintree{}},
				"red_gradient.png": &bintree{staticCssImagesRed_gradientPng, map[string]*bintree{}},
				"redmond": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesRedmondReadmeTxt, map[string]*bintree{}},
					"icon-first.png": &bintree{staticCssImagesRedmondIconFirstPng, map[string]*bintree{}},
					"icon-last.png": &bintree{staticCssImagesRedmondIconLastPng, map[string]*bintree{}},
					"ui-bg_flat_0_aaaaaa_40x100.png": &bintree{staticCssImagesRedmondUiBg_flat_0_aaaaaa_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_55_fbec88_40x100.png": &bintree{staticCssImagesRedmondUiBg_flat_55_fbec88_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_75_d0e5f5_1x400.png": &bintree{staticCssImagesRedmondUiBg_glass_75_d0e5f5_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_85_dfeffc_1x400.png": &bintree{staticCssImagesRedmondUiBg_glass_85_dfeffc_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_95_fef1ec_1x400.png": &bintree{staticCssImagesRedmondUiBg_glass_95_fef1ec_1x400Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_55_5c9ccc_500x100.png": &bintree{staticCssImagesRedmondUiBg_glossWave_55_5c9ccc_500x100Png, map[string]*bintree{}},
					"ui-bg_inset-hard_100_f5f8f9_1x100.png": &bintree{staticCssImagesRedmondUiBg_insetHard_100_f5f8f9_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-hard_100_fcfdfd_1x100.png": &bintree{staticCssImagesRedmondUiBg_insetHard_100_fcfdfd_1x100Png, map[string]*bintree{}},
					"ui-icons_217bc0_256x240.png": &bintree{staticCssImagesRedmondUiIcons_217bc0_256x240Png, map[string]*bintree{}},
					"ui-icons_2e83ff_256x240.png": &bintree{staticCssImagesRedmondUiIcons_2e83ff_256x240Png, map[string]*bintree{}},
					"ui-icons_469bdd_256x240.png": &bintree{staticCssImagesRedmondUiIcons_469bdd_256x240Png, map[string]*bintree{}},
					"ui-icons_6da8d5_256x240.png": &bintree{staticCssImagesRedmondUiIcons_6da8d5_256x240Png, map[string]*bintree{}},
					"ui-icons_cd0a0a_256x240.png": &bintree{staticCssImagesRedmondUiIcons_cd0a0a_256x240Png, map[string]*bintree{}},
					"ui-icons_d8e7f3_256x240.png": &bintree{staticCssImagesRedmondUiIcons_d8e7f3_256x240Png, map[string]*bintree{}},
					"ui-icons_f9bd01_256x240.png": &bintree{staticCssImagesRedmondUiIcons_f9bd01_256x240Png, map[string]*bintree{}},
				}},
				"roundbg_check_black.png": &bintree{staticCssImagesRoundbg_check_blackPng, map[string]*bintree{}},
				"roundbg_check_disabled.png": &bintree{staticCssImagesRoundbg_check_disabledPng, map[string]*bintree{}},
				"roundbg_check_indeterminate.png": &bintree{staticCssImagesRoundbg_check_indeterminatePng, map[string]*bintree{}},
				"roundbg_check_white.png": &bintree{staticCssImagesRoundbg_check_whitePng, map[string]*bintree{}},
				"roundbg_classic_hover.png": &bintree{staticCssImagesRoundbg_classic_hoverPng, map[string]*bintree{}},
				"roundbg_classic_normal.png": &bintree{staticCssImagesRoundbg_classic_normalPng, map[string]*bintree{}},
				"roundbg_disabled.png": &bintree{staticCssImagesRoundbg_disabledPng, map[string]*bintree{}},
				"search.png": &bintree{staticCssImagesSearchPng, map[string]*bintree{}},
				"search_white.png": &bintree{staticCssImagesSearch_whitePng, map[string]*bintree{}},
				"smoothness": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesSmoothnessReadmeTxt, map[string]*bintree{}},
					"ui-bg_flat_0_aaaaaa_40x100.png": &bintree{staticCssImagesSmoothnessUiBg_flat_0_aaaaaa_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_75_ffffff_40x100.png": &bintree{staticCssImagesSmoothnessUiBg_flat_75_ffffff_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_55_fbf9ee_1x400.png": &bintree{staticCssImagesSmoothnessUiBg_glass_55_fbf9ee_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_65_ffffff_1x400.png": &bintree{staticCssImagesSmoothnessUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_75_dadada_1x400.png": &bintree{staticCssImagesSmoothnessUiBg_glass_75_dadada_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_75_e6e6e6_1x400.png": &bintree{staticCssImagesSmoothnessUiBg_glass_75_e6e6e6_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_95_fef1ec_1x400.png": &bintree{staticCssImagesSmoothnessUiBg_glass_95_fef1ec_1x400Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_75_cccccc_1x100.png": &bintree{staticCssImagesSmoothnessUiBg_highlightSoft_75_cccccc_1x100Png, map[string]*bintree{}},
					"ui-icons_222222_256x240.png": &bintree{staticCssImagesSmoothnessUiIcons_222222_256x240Png, map[string]*bintree{}},
					"ui-icons_2e83ff_256x240.png": &bintree{staticCssImagesSmoothnessUiIcons_2e83ff_256x240Png, map[string]*bintree{}},
					"ui-icons_454545_256x240.png": &bintree{staticCssImagesSmoothnessUiIcons_454545_256x240Png, map[string]*bintree{}},
					"ui-icons_888888_256x240.png": &bintree{staticCssImagesSmoothnessUiIcons_888888_256x240Png, map[string]*bintree{}},
					"ui-icons_cd0a0a_256x240.png": &bintree{staticCssImagesSmoothnessUiIcons_cd0a0a_256x240Png, map[string]*bintree{}},
				}},
				"sortasc.png": &bintree{staticCssImagesSortascPng, map[string]*bintree{}},
				"sortascbutton.png": &bintree{staticCssImagesSortascbuttonPng, map[string]*bintree{}},
				"sortdesc.png": &bintree{staticCssImagesSortdescPng, map[string]*bintree{}},
				"sortdescbutton.png": &bintree{staticCssImagesSortdescbuttonPng, map[string]*bintree{}},
				"sortremove.png": &bintree{staticCssImagesSortremovePng, map[string]*bintree{}},
				"star.png": &bintree{staticCssImagesStarPng, map[string]*bintree{}},
				"star_disabled.png": &bintree{staticCssImagesStar_disabledPng, map[string]*bintree{}},
				"star_hover.png": &bintree{staticCssImagesStar_hoverPng, map[string]*bintree{}},
				"start": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesStartReadmeTxt, map[string]*bintree{}},
					"ui-bg_flat_55_999999_40x100.png": &bintree{staticCssImagesStartUiBg_flat_55_999999_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_75_aaaaaa_40x100.png": &bintree{staticCssImagesStartUiBg_flat_75_aaaaaa_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_45_0078ae_1x400.png": &bintree{staticCssImagesStartUiBg_glass_45_0078ae_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_55_f8da4e_1x400.png": &bintree{staticCssImagesStartUiBg_glass_55_f8da4e_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_75_79c9ec_1x400.png": &bintree{staticCssImagesStartUiBg_glass_75_79c9ec_1x400Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_45_e14f1c_500x100.png": &bintree{staticCssImagesStartUiBg_glossWave_45_e14f1c_500x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_50_6eac2c_500x100.png": &bintree{staticCssImagesStartUiBg_glossWave_50_6eac2c_500x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_75_2191c0_500x100.png": &bintree{staticCssImagesStartUiBg_glossWave_75_2191c0_500x100Png, map[string]*bintree{}},
					"ui-bg_inset-hard_100_fcfdfd_1x100.png": &bintree{staticCssImagesStartUiBg_insetHard_100_fcfdfd_1x100Png, map[string]*bintree{}},
					"ui-icons_0078ae_256x240.png": &bintree{staticCssImagesStartUiIcons_0078ae_256x240Png, map[string]*bintree{}},
					"ui-icons_056b93_256x240.png": &bintree{staticCssImagesStartUiIcons_056b93_256x240Png, map[string]*bintree{}},
					"ui-icons_d8e7f3_256x240.png": &bintree{staticCssImagesStartUiIcons_d8e7f3_256x240Png, map[string]*bintree{}},
					"ui-icons_e0fdff_256x240.png": &bintree{staticCssImagesStartUiIcons_e0fdff_256x240Png, map[string]*bintree{}},
					"ui-icons_f5e175_256x240.png": &bintree{staticCssImagesStartUiIcons_f5e175_256x240Png, map[string]*bintree{}},
					"ui-icons_f7a50d_256x240.png": &bintree{staticCssImagesStartUiIcons_f7a50d_256x240Png, map[string]*bintree{}},
					"ui-icons_fcd113_256x240.png": &bintree{staticCssImagesStartUiIcons_fcd113_256x240Png, map[string]*bintree{}},
				}},
				"stripes.png": &bintree{staticCssImagesStripesPng, map[string]*bintree{}},
				"success.png": &bintree{staticCssImagesSuccessPng, map[string]*bintree{}},
				"sunny": &bintree{nil, map[string]*bintree{
					"ReadMe.txt": &bintree{staticCssImagesSunnyReadmeTxt, map[string]*bintree{}},
					"ui-bg_diagonals-medium_20_d34d17_40x40.png": &bintree{staticCssImagesSunnyUiBg_diagonalsMedium_20_d34d17_40x40Png, map[string]*bintree{}},
					"ui-bg_flat_30_cccccc_40x100.png": &bintree{staticCssImagesSunnyUiBg_flat_30_cccccc_40x100Png, map[string]*bintree{}},
					"ui-bg_flat_50_5c5c5c_40x100.png": &bintree{staticCssImagesSunnyUiBg_flat_50_5c5c5c_40x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_45_817865_500x100.png": &bintree{staticCssImagesSunnyUiBg_glossWave_45_817865_500x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_60_fece2f_500x100.png": &bintree{staticCssImagesSunnyUiBg_glossWave_60_fece2f_500x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_70_ffdd57_500x100.png": &bintree{staticCssImagesSunnyUiBg_glossWave_70_ffdd57_500x100Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_90_fff9e5_500x100.png": &bintree{staticCssImagesSunnyUiBg_glossWave_90_fff9e5_500x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_100_feeebd_1x100.png": &bintree{staticCssImagesSunnyUiBg_highlightSoft_100_feeebd_1x100Png, map[string]*bintree{}},
					"ui-bg_inset-soft_30_ffffff_1x100.png": &bintree{staticCssImagesSunnyUiBg_insetSoft_30_ffffff_1x100Png, map[string]*bintree{}},
					"ui-icons_3d3d3d_256x240.png": &bintree{staticCssImagesSunnyUiIcons_3d3d3d_256x240Png, map[string]*bintree{}},
					"ui-icons_bd7b00_256x240.png": &bintree{staticCssImagesSunnyUiIcons_bd7b00_256x240Png, map[string]*bintree{}},
					"ui-icons_d19405_256x240.png": &bintree{staticCssImagesSunnyUiIcons_d19405_256x240Png, map[string]*bintree{}},
					"ui-icons_eb990f_256x240.png": &bintree{staticCssImagesSunnyUiIcons_eb990f_256x240Png, map[string]*bintree{}},
					"ui-icons_ed9f26_256x240.png": &bintree{staticCssImagesSunnyUiIcons_ed9f26_256x240Png, map[string]*bintree{}},
					"ui-icons_fadc7a_256x240.png": &bintree{staticCssImagesSunnyUiIcons_fadc7a_256x240Png, map[string]*bintree{}},
					"ui-icons_ffe180_256x240.png": &bintree{staticCssImagesSunnyUiIcons_ffe180_256x240Png, map[string]*bintree{}},
				}},
				"tick.png": &bintree{staticCssImagesTickPng, map[string]*bintree{}},
				"time.png": &bintree{staticCssImagesTimePng, map[string]*bintree{}},
				"track_classic.png": &bintree{staticCssImagesTrack_classicPng, map[string]*bintree{}},
				"track_darkblue.png": &bintree{staticCssImagesTrack_darkbluePng, map[string]*bintree{}},
				"track_shinyblack.png": &bintree{staticCssImagesTrack_shinyblackPng, map[string]*bintree{}},
				"track_summer.png": &bintree{staticCssImagesTrack_summerPng, map[string]*bintree{}},
				"warning.png": &bintree{staticCssImagesWarningPng, map[string]*bintree{}},
				"wp_check_indeterminate_white.png": &bintree{staticCssImagesWp_check_indeterminate_whitePng, map[string]*bintree{}},
				"wp_check_white.png": &bintree{staticCssImagesWp_check_whitePng, map[string]*bintree{}},
			}},
			"jquery-ui.custom.min.css": &bintree{staticCssJqueryUiCustomMinCss, map[string]*bintree{}},
			"jquery-ui.min.css": &bintree{staticCssJqueryUiMinCss, map[string]*bintree{}},
			"jquery.gritter.min.css": &bintree{staticCssJqueryGritterMinCss, map[string]*bintree{}},
			"jqx.base.css": &bintree{staticCssJqxBaseCss, map[string]*bintree{}},
			"prettify.min.css": &bintree{staticCssPrettifyMinCss, map[string]*bintree{}},
			"select2.min.css": &bintree{staticCssSelect2MinCss, map[string]*bintree{}},
			"sweetalert2.css": &bintree{staticCssSweetalert2Css, map[string]*bintree{}},
			"sweetalert2.min.css": &bintree{staticCssSweetalert2MinCss, map[string]*bintree{}},
			"ui.jqgrid.min.css": &bintree{staticCssUiJqgridMinCss, map[string]*bintree{}},
		}},
		"font-awesome": &bintree{nil, map[string]*bintree{
			"4.5.0": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"font-awesome.min.css": &bintree{staticFontAwesome450CssFontAwesomeMinCss, map[string]*bintree{}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"fontawesome-webfont.eot": &bintree{staticFontAwesome450FontsFontawesomeWebfontEot, map[string]*bintree{}},
					"fontawesome-webfont.svg": &bintree{staticFontAwesome450FontsFontawesomeWebfontSvg, map[string]*bintree{}},
					"fontawesome-webfont.ttf": &bintree{staticFontAwesome450FontsFontawesomeWebfontTtf, map[string]*bintree{}},
					"fontawesome-webfont.woff": &bintree{staticFontAwesome450FontsFontawesomeWebfontWoff, map[string]*bintree{}},
					"fontawesome-webfont.woff2": &bintree{staticFontAwesome450FontsFontawesomeWebfontWoff2, map[string]*bintree{}},
				}},
			}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"glyphicons-halflings-regular.eot": &bintree{staticFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
			"glyphicons-halflings-regular.svg": &bintree{staticFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
			"glyphicons-halflings-regular.ttf": &bintree{staticFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
			"glyphicons-halflings-regular.woff": &bintree{staticFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
			"glyphicons-halflings-regular.woff2": &bintree{staticFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
		}},
		"foto": &bintree{nil, map[string]*bintree{
			"EDY_PRASETIYO_1232414142414.png": &bintree{staticFotoEdy_prasetiyo_1232414142414Png, map[string]*bintree{}},
			"EDY_PRAS_22_123132131321.png": &bintree{staticFotoEdy_pras_22_123132131321Png, map[string]*bintree{}},
			"edy44_nokktp123.png": &bintree{staticFotoEdy44_nokktp123Png, map[string]*bintree{}},
			"edy_3_nokktp12333.png": &bintree{staticFotoEdy_3_nokktp12333Png, map[string]*bintree{}},
			"edy_params.png": &bintree{staticFotoEdy_paramsPng, map[string]*bintree{}},
		}},
		"header.jpg": &bintree{staticHeaderJpg, map[string]*bintree{}},
		"images": &bintree{nil, map[string]*bintree{
			"avatars": &bintree{nil, map[string]*bintree{
				"avatar.png": &bintree{staticImagesAvatarsAvatarPng, map[string]*bintree{}},
				"avatar1.png": &bintree{staticImagesAvatarsAvatar1Png, map[string]*bintree{}},
				"avatar2.png": &bintree{staticImagesAvatarsAvatar2Png, map[string]*bintree{}},
				"avatar3.png": &bintree{staticImagesAvatarsAvatar3Png, map[string]*bintree{}},
				"avatar4.png": &bintree{staticImagesAvatarsAvatar4Png, map[string]*bintree{}},
				"avatar5.png": &bintree{staticImagesAvatarsAvatar5Png, map[string]*bintree{}},
				"profile-pic.jpg": &bintree{staticImagesAvatarsProfilePicJpg, map[string]*bintree{}},
				"user.jpg": &bintree{staticImagesAvatarsUserJpg, map[string]*bintree{}},
			}},
			"bootstrap-colorpicker": &bintree{nil, map[string]*bintree{
				"alpha-horizontal.png": &bintree{staticImagesBootstrapColorpickerAlphaHorizontalPng, map[string]*bintree{}},
				"alpha.png": &bintree{staticImagesBootstrapColorpickerAlphaPng, map[string]*bintree{}},
				"hue-horizontal.png": &bintree{staticImagesBootstrapColorpickerHueHorizontalPng, map[string]*bintree{}},
				"hue.png": &bintree{staticImagesBootstrapColorpickerHuePng, map[string]*bintree{}},
				"saturation.png": &bintree{staticImagesBootstrapColorpickerSaturationPng, map[string]*bintree{}},
			}},
			"email": &bintree{nil, map[string]*bintree{
				"email1.png": &bintree{staticImagesEmailEmail1Png, map[string]*bintree{}},
				"email2.png": &bintree{staticImagesEmailEmail2Png, map[string]*bintree{}},
				"email3.png": &bintree{staticImagesEmailEmail3Png, map[string]*bintree{}},
				"email4.png": &bintree{staticImagesEmailEmail4Png, map[string]*bintree{}},
			}},
			"gallery": &bintree{nil, map[string]*bintree{
				"image-1.jpg": &bintree{staticImagesGalleryImage1Jpg, map[string]*bintree{}},
				"image-2.jpg": &bintree{staticImagesGalleryImage2Jpg, map[string]*bintree{}},
				"image-3.jpg": &bintree{staticImagesGalleryImage3Jpg, map[string]*bintree{}},
				"image-4.jpg": &bintree{staticImagesGalleryImage4Jpg, map[string]*bintree{}},
				"image-5.jpg": &bintree{staticImagesGalleryImage5Jpg, map[string]*bintree{}},
				"image-6.jpg": &bintree{staticImagesGalleryImage6Jpg, map[string]*bintree{}},
				"thumb-1.jpg": &bintree{staticImagesGalleryThumb1Jpg, map[string]*bintree{}},
				"thumb-2.jpg": &bintree{staticImagesGalleryThumb2Jpg, map[string]*bintree{}},
				"thumb-3.jpg": &bintree{staticImagesGalleryThumb3Jpg, map[string]*bintree{}},
				"thumb-4.jpg": &bintree{staticImagesGalleryThumb4Jpg, map[string]*bintree{}},
				"thumb-5.jpg": &bintree{staticImagesGalleryThumb5Jpg, map[string]*bintree{}},
				"thumb-6.jpg": &bintree{staticImagesGalleryThumb6Jpg, map[string]*bintree{}},
			}},
			"placeholder": &bintree{nil, map[string]*bintree{
				"165x90.png": &bintree{staticImagesPlaceholder165x90Png, map[string]*bintree{}},
				"255x150.png": &bintree{staticImagesPlaceholder255x150Png, map[string]*bintree{}},
				"530x270.png": &bintree{staticImagesPlaceholder530x270Png, map[string]*bintree{}},
				"550x280.png": &bintree{staticImagesPlaceholder550x280Png, map[string]*bintree{}},
			}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"LOGIN MANAJEMEN LAPAS.html": &bintree{staticJsLoginManajemenLapasHtml, map[string]*bintree{}},
			"LOGIN MANAJEMEN LAPAS_files": &bintree{nil, map[string]*bintree{
				"ace-elements.min.js.download": &bintree{staticJsLoginManajemenLapas_filesAceElementsMinJsDownload, map[string]*bintree{}},
				"ace-extra.min.js.download": &bintree{staticJsLoginManajemenLapas_filesAceExtraMinJsDownload, map[string]*bintree{}},
				"ace-rtl.min.css": &bintree{staticJsLoginManajemenLapas_filesAceRtlMinCss, map[string]*bintree{}},
				"ace.min.css": &bintree{staticJsLoginManajemenLapas_filesAceMinCss, map[string]*bintree{}},
				"ace.min.js.download": &bintree{staticJsLoginManajemenLapas_filesAceMinJsDownload, map[string]*bintree{}},
				"axios.min.js.download": &bintree{staticJsLoginManajemenLapas_filesAxiosMinJsDownload, map[string]*bintree{}},
				"bootstrap-datetimepicker.min.js.download": &bintree{staticJsLoginManajemenLapas_filesBootstrapDatetimepickerMinJsDownload, map[string]*bintree{}},
				"bootstrap-notify.min.js.download": &bintree{staticJsLoginManajemenLapas_filesBootstrapNotifyMinJsDownload, map[string]*bintree{}},
				"bootstrap-table.js.download": &bintree{staticJsLoginManajemenLapas_filesBootstrapTableJsDownload, map[string]*bintree{}},
				"bootstrap.min.css": &bintree{staticJsLoginManajemenLapas_filesBootstrapMinCss, map[string]*bintree{}},
				"bootstrap.min.js.download": &bintree{staticJsLoginManajemenLapas_filesBootstrapMinJsDownload, map[string]*bintree{}},
				"font-awesome.min.css": &bintree{staticJsLoginManajemenLapas_filesFontAwesomeMinCss, map[string]*bintree{}},
				"fonts.googleapis.com.css": &bintree{staticJsLoginManajemenLapas_filesFontsGoogleapisComCss, map[string]*bintree{}},
				"id.js.download": &bintree{staticJsLoginManajemenLapas_filesIdJsDownload, map[string]*bintree{}},
				"jquery.inputmask.bundle.js.download": &bintree{staticJsLoginManajemenLapas_filesJqueryInputmaskBundleJsDownload, map[string]*bintree{}},
				"jquery.js.download": &bintree{staticJsLoginManajemenLapas_filesJqueryJsDownload, map[string]*bintree{}},
				"jquery.serializejson.min.js.download": &bintree{staticJsLoginManajemenLapas_filesJquerySerializejsonMinJsDownload, map[string]*bintree{}},
				"jqx-all.js.download": &bintree{staticJsLoginManajemenLapas_filesJqxAllJsDownload, map[string]*bintree{}},
				"jqxcore.js.download": &bintree{staticJsLoginManajemenLapas_filesJqxcoreJsDownload, map[string]*bintree{}},
				"js.cookie.min.js.download": &bintree{staticJsLoginManajemenLapas_filesJsCookieMinJsDownload, map[string]*bintree{}},
				"moment-with-locales.min.js.download": &bintree{staticJsLoginManajemenLapas_filesMomentWithLocalesMinJsDownload, map[string]*bintree{}},
				"select2.min.js.download": &bintree{staticJsLoginManajemenLapas_filesSelect2MinJsDownload, map[string]*bintree{}},
				"sweetalert2.min.js.download": &bintree{staticJsLoginManajemenLapas_filesSweetalert2MinJsDownload, map[string]*bintree{}},
			}},
			"REV._REG_._ANAK_acc_.xls": &bintree{staticJsRev_reg__anak_acc_Xls, map[string]*bintree{}},
			"ace-editable.min.js": &bintree{staticJsAceEditableMinJs, map[string]*bintree{}},
			"ace-elements.min.js": &bintree{staticJsAceElementsMinJs, map[string]*bintree{}},
			"ace-extra.min.js": &bintree{staticJsAceExtraMinJs, map[string]*bintree{}},
			"ace.min.js": &bintree{staticJsAceMinJs, map[string]*bintree{}},
			"autosize.min.js": &bintree{staticJsAutosizeMinJs, map[string]*bintree{}},
			"axios.js": &bintree{staticJsAxiosJs, map[string]*bintree{}},
			"axios.min.js": &bintree{staticJsAxiosMinJs, map[string]*bintree{}},
			"bootbox.js": &bintree{staticJsBootboxJs, map[string]*bintree{}},
			"bootstrap-colorpicker.min.js": &bintree{staticJsBootstrapColorpickerMinJs, map[string]*bintree{}},
			"bootstrap-datepicker.min.js": &bintree{staticJsBootstrapDatepickerMinJs, map[string]*bintree{}},
			"bootstrap-datetimepicker.min.js": &bintree{staticJsBootstrapDatetimepickerMinJs, map[string]*bintree{}},
			"bootstrap-editable.min.js": &bintree{staticJsBootstrapEditableMinJs, map[string]*bintree{}},
			"bootstrap-markdown.min.js": &bintree{staticJsBootstrapMarkdownMinJs, map[string]*bintree{}},
			"bootstrap-multiselect.min.js": &bintree{staticJsBootstrapMultiselectMinJs, map[string]*bintree{}},
			"bootstrap-notify.min.js": &bintree{staticJsBootstrapNotifyMinJs, map[string]*bintree{}},
			"bootstrap-table.js": &bintree{staticJsBootstrapTableJs, map[string]*bintree{}},
			"bootstrap-tag.min.js": &bintree{staticJsBootstrapTagMinJs, map[string]*bintree{}},
			"bootstrap-timepicker.min.js": &bintree{staticJsBootstrapTimepickerMinJs, map[string]*bintree{}},
			"bootstrap-wysiwyg.min.js": &bintree{staticJsBootstrapWysiwygMinJs, map[string]*bintree{}},
			"bootstrap.min.js": &bintree{staticJsBootstrapMinJs, map[string]*bintree{}},
			"buttons.colVis.min.js": &bintree{staticJsButtonsColvisMinJs, map[string]*bintree{}},
			"buttons.flash.min.js": &bintree{staticJsButtonsFlashMinJs, map[string]*bintree{}},
			"buttons.html5.min.js": &bintree{staticJsButtonsHtml5MinJs, map[string]*bintree{}},
			"buttons.print.min.js": &bintree{staticJsButtonsPrintMinJs, map[string]*bintree{}},
			"chosen.jquery.min.js": &bintree{staticJsChosenJqueryMinJs, map[string]*bintree{}},
			"dataTables.buttons.min.js": &bintree{staticJsDatatablesButtonsMinJs, map[string]*bintree{}},
			"dataTables.select.min.js": &bintree{staticJsDatatablesSelectMinJs, map[string]*bintree{}},
			"daterangepicker.min.js": &bintree{staticJsDaterangepickerMinJs, map[string]*bintree{}},
			"dropzone.min.js": &bintree{staticJsDropzoneMinJs, map[string]*bintree{}},
			"excanvas.min.js": &bintree{staticJsExcanvasMinJs, map[string]*bintree{}},
			"fullcalendar.min.js": &bintree{staticJsFullcalendarMinJs, map[string]*bintree{}},
			"grid.locale-en.js": &bintree{staticJsGridLocaleEnJs, map[string]*bintree{}},
			"holder.min.js": &bintree{staticJsHolderMinJs, map[string]*bintree{}},
			"html5shiv.min.js": &bintree{staticJsHtml5shivMinJs, map[string]*bintree{}},
			"id.js": &bintree{staticJsIdJs, map[string]*bintree{}},
			"jquery-1.11.3.min.js": &bintree{staticJsJquery1113MinJs, map[string]*bintree{}},
			"jquery-2.1.4.min.js": &bintree{staticJsJquery214MinJs, map[string]*bintree{}},
			"jquery-additional-methods.min.js": &bintree{staticJsJqueryAdditionalMethodsMinJs, map[string]*bintree{}},
			"jquery-typeahead.js": &bintree{staticJsJqueryTypeaheadJs, map[string]*bintree{}},
			"jquery-ui.custom.min.js": &bintree{staticJsJqueryUiCustomMinJs, map[string]*bintree{}},
			"jquery-ui.min.js": &bintree{staticJsJqueryUiMinJs, map[string]*bintree{}},
			"jquery.bootstrap-duallistbox.min.js": &bintree{staticJsJqueryBootstrapDuallistboxMinJs, map[string]*bintree{}},
			"jquery.colorbox.min.js": &bintree{staticJsJqueryColorboxMinJs, map[string]*bintree{}},
			"jquery.dataTables.bootstrap.min.js": &bintree{staticJsJqueryDatatablesBootstrapMinJs, map[string]*bintree{}},
			"jquery.dataTables.min.js": &bintree{staticJsJqueryDatatablesMinJs, map[string]*bintree{}},
			"jquery.easypiechart.min.js": &bintree{staticJsJqueryEasypiechartMinJs, map[string]*bintree{}},
			"jquery.flot.min.js": &bintree{staticJsJqueryFlotMinJs, map[string]*bintree{}},
			"jquery.flot.pie.min.js": &bintree{staticJsJqueryFlotPieMinJs, map[string]*bintree{}},
			"jquery.flot.resize.min.js": &bintree{staticJsJqueryFlotResizeMinJs, map[string]*bintree{}},
			"jquery.gritter.min.js": &bintree{staticJsJqueryGritterMinJs, map[string]*bintree{}},
			"jquery.hotkeys.index.min.js": &bintree{staticJsJqueryHotkeysIndexMinJs, map[string]*bintree{}},
			"jquery.inputlimiter.min.js": &bintree{staticJsJqueryInputlimiterMinJs, map[string]*bintree{}},
			"jquery.inputmask.bundle.js": &bintree{staticJsJqueryInputmaskBundleJs, map[string]*bintree{}},
			"jquery.jqGrid.min.js": &bintree{staticJsJqueryJqgridMinJs, map[string]*bintree{}},
			"jquery.knob.min.js": &bintree{staticJsJqueryKnobMinJs, map[string]*bintree{}},
			"jquery.maskedinput.min.js": &bintree{staticJsJqueryMaskedinputMinJs, map[string]*bintree{}},
			"jquery.min.js": &bintree{staticJsJqueryMinJs, map[string]*bintree{}},
			"jquery.mobile.custom.min.js": &bintree{staticJsJqueryMobileCustomMinJs, map[string]*bintree{}},
			"jquery.nestable.min.js": &bintree{staticJsJqueryNestableMinJs, map[string]*bintree{}},
			"jquery.raty.min.js": &bintree{staticJsJqueryRatyMinJs, map[string]*bintree{}},
			"jquery.serializejson.min.js": &bintree{staticJsJquerySerializejsonMinJs, map[string]*bintree{}},
			"jquery.sparkline.index.min.js": &bintree{staticJsJquerySparklineIndexMinJs, map[string]*bintree{}},
			"jquery.ui.touch-punch.min.js": &bintree{staticJsJqueryUiTouchPunchMinJs, map[string]*bintree{}},
			"jquery.validate.min.js": &bintree{staticJsJqueryValidateMinJs, map[string]*bintree{}},
			"jqx-all.js": &bintree{staticJsJqxAllJs, map[string]*bintree{}},
			"jqxcore.js": &bintree{staticJsJqxcoreJs, map[string]*bintree{}},
			"js.cookie.min.js": &bintree{staticJsJsCookieMinJs, map[string]*bintree{}},
			"markdown.min.js": &bintree{staticJsMarkdownMinJs, map[string]*bintree{}},
			"moment-with-locales.min.js": &bintree{staticJsMomentWithLocalesMinJs, map[string]*bintree{}},
			"moment.min.js": &bintree{staticJsMomentMinJs, map[string]*bintree{}},
			"prettify.min.js": &bintree{staticJsPrettifyMinJs, map[string]*bintree{}},
			"reload.min.js": &bintree{staticJsReloadMinJs, map[string]*bintree{}},
			"respond.min.js": &bintree{staticJsRespondMinJs, map[string]*bintree{}},
			"select2.min.js": &bintree{staticJsSelect2MinJs, map[string]*bintree{}},
			"spin.js": &bintree{staticJsSpinJs, map[string]*bintree{}},
			"spinbox.min.js": &bintree{staticJsSpinboxMinJs, map[string]*bintree{}},
			"sweetalert2.common.js": &bintree{staticJsSweetalert2CommonJs, map[string]*bintree{}},
			"sweetalert2.js": &bintree{staticJsSweetalert2Js, map[string]*bintree{}},
			"sweetalert2.min.js": &bintree{staticJsSweetalert2MinJs, map[string]*bintree{}},
			"tree.min.js": &bintree{staticJsTreeMinJs, map[string]*bintree{}},
			"wizard.min.js": &bintree{staticJsWizardMinJs, map[string]*bintree{}},
		}},
		"login.jpg": &bintree{staticLoginJpg, map[string]*bintree{}},
		"login1.jpg": &bintree{staticLogin1Jpg, map[string]*bintree{}},
		"swf": &bintree{nil, map[string]*bintree{
			"flashExport.swf": &bintree{staticSwfFlashexportSwf, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

